!!strict

--TODO: optional arguments/returns

--------------------------------------------------------------------------------
-- C imports

!!cinclude '<stdio.h>'
!!cinclude '<errno.h>'

local errno: cint !cimport
local SEEK_SET: cint !cimport
local SEEK_END: cint !cimport
local SEEK_CUR: cint !cimport
local function strerror(errnum: cint): cstring !cimport end
local function fopen(pathname: cstring, mode: cstring): pointer !cimport end
local function fclose(stream: pointer): cint !cimport end
local function fflush(stream: pointer): cint !cimport end
local function fseek(stream: pointer, offset: clong, whence: cint): cint !cimport end
local function ftell(stream: pointer): clong !cimport end

--------------------------------------------------------------------------------
-- file stream

local function fileresult(success: boolean): boolean, string, integer
  if not success then
    return false, @string(strerror(errno)), errno
  end
  return true, '', 0
end

local filestream = @record{
  f: pointer
}

function filestream:close()
  assert(self.f, 'attempt to use a closed file')
  local status = fclose(self.f)
  self.f = nilptr
  return fileresult(status == 0)
end

function filestream:flush()
  assert(self.f, 'attempt to use a closed file')
  return fileresult(fflush(self.f))
end

function filestream:seek(whence: string, offset: integer)
  --TODO: return correct optional values
  assert(self.f, 'attempt to use a closed file')
  local op
  if whence == 'set' then op = SEEK_SET
  elseif whence == 'end' then op = SEEK_END
  elseif whence == 'cur' then op = SEEK_CUR
  else error "invalid option '%s'"
  end
  local len
  local errmsg, status
  if fseek(self.f, @clong(offset), op) == 0 then
    len = ftell(self.f)
  else
    len = -1
    local success
    success, errmsg, status = fileresult(false)
  end
  return len, errmsg, status
end

function filestream:setvbuf(mode: string, size: integer)
  assert(self.f, 'attempt to use a closed file')
end

-- filestream:lines

--[[
function filestream:read(...)
end

function filestream:write(...)
end
]]

--------------------------------------------------------------------------------
-- io module

local io = @record{}

function io.close(file: filestream)
  --TODO: optional argument
  return file:close()
end

function io.open(filename: string, mode: string)
  --TODO: optional argument and returns
  --TODO: check modes
  local f = fopen(filename, mode)
  if not f then
    return filestream{}, @string(strerror(errno)), errno
  end
  return filestream{f = f}, '', 0
end

function io.popen(prog: string, mode: string)
  return filestream{}
end

function io.output()
  return filestream{}
end

function io.input()
  return filestream{}
end

function io.stderr()
  return filestream{}
end

function io.stdin()
  return filestream{}
end

function io.stdout()
  return filestream{}
end

function io.tmpfile()
  return filestream{}
end
function io.flush(file: filestream)
  return file:flush()
end

--[[
function io.read(...)
  return io.input():read(...)
end

function io.write(...)
  return io.output():write(...)
end
]]

-- io.lines
-- io.type

--------------------------------------------------------------------------------
-- tests

local f = io.open('testfile', 'r')
assert(f.f == nilptr)

f = io.open('LICENSE', 'r')
assert(f.f ~= nilptr)
assert(f:flush() == true)
assert(f:flush() == true)
assert(f:close() == true)

f = io.open('LICENSE', 'r')
assert(io.flush(f) == true)
assert(io.close(f) == true)
