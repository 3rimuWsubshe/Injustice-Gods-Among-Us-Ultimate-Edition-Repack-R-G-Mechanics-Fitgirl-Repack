## pragmas.nogc = true

require 'coroutine'

local counter = 0
local main_co = coroutine.running()

do -- basic tests
  assert(coroutine.isyieldable(main_co) == false)
  assert(coroutine.status(main_co) == 'running')
  counter = 0
  local co = coroutine.create(function()
    local co = coroutine.running()
    assert(coroutine.status(main_co) == 'normal')
    assert(coroutine.status(co) == 'running')
    assert(coroutine.isyieldable(co) == true)
    counter = counter + 1
  end)
  assert(counter == 0)
  assert(coroutine.status(co) == 'suspended')
  assert(coroutine.resume(co) == true)
  assert(coroutine.status(co) == 'dead')
  assert(counter == 1)
  assert(coroutine.resume(co) == false)
  coroutine.destroy(&co)
end

do -- resume/yield
  counter = 0
  local co = coroutine.create(function()
    counter = counter + 1
    coroutine.yield()
    counter = counter + 1
  end)
  assert(counter == 0)
  assert(coroutine.status(co) == 'suspended')
  assert(coroutine.resume(co) == true)
  assert(counter == 1)
  assert(coroutine.status(co) == 'suspended')
  assert(coroutine.resume(co) == true)
  assert(counter == 2)
  assert(coroutine.status(co) == 'dead')
  assert(coroutine.resume(co) == false)
  coroutine.destroy(&co)
end

do -- passing 1 value between yield and resume
  local co = coroutine.create(function(a: integer): integer
    assert(a == 1)
    local co = coroutine.running()
    assert(coroutine.push(co, 2) == true)
    coroutine.yield(co)
    assert(coroutine.pop(co, @integer) == 3)
    return 4
  end)
  assert(coroutine.status(co) == 'suspended')
  assert(coroutine.push(co, 1) == true)
  assert(coroutine.resume(co) == true)
  assert(coroutine.pop(co, @integer) == 2)
  assert(coroutine.status(co) == 'suspended')
  assert(coroutine.push(co, 3) == true)
  assert(coroutine.resume(co) == true)
  assert(coroutine.pop(co, @integer) == 4)
  assert(coroutine.status(co) == 'dead')
  assert(coroutine.resume(co) == false)
  coroutine.destroy(&co)
end

do -- passing 2 values between yield and resume
  local Pair = @record{first: integer, second: stringview}
  local co = coroutine.create(function(first: integer, second: stringview): (integer, stringview)
    local co = coroutine.running()
    assert(first == 1 and second == 'a')
    assert(coroutine.push(co, 2) == true)
    assert(coroutine.push(co, 'b') == true)
    coroutine.yield(co)
    assert(coroutine.pop(co, @stringview) == 'c')
    assert(coroutine.pop(co, @integer) == 3)
    return 4, 'd'
  end)
  assert(coroutine.status(co) == 'suspended')
  assert(coroutine.push(co, 1) == true)
  local s: stringview = 'a'
  assert(coroutine.push(co, s) == true)
  assert(coroutine.resume(co) == true)
  assert(coroutine.pop(co, @stringview) == 'b')
  assert(coroutine.pop(co, @integer) == 2)
  assert(coroutine.status(co) == 'suspended')
  assert(coroutine.push(co, 3) == true)
  assert(coroutine.push(co, 'c') == true)
  assert(coroutine.resume(co) == true)
  assert(coroutine.pop(co, @stringview) == 'd')
  assert(coroutine.pop(co, @integer) == 4)
  assert(coroutine.status(co) == 'dead')
  assert(coroutine.resume(co) == false)
  coroutine.destroy(&co)
end

do -- fibonacci example
  local co = coroutine.create(function(max: integer): integer
    local co = coroutine.running()
    local m: integer, n: integer = 1, 1
    while m < max do
      coroutine.push(co, m)
      coroutine.yield(co)
      m, n = n, m + n
    end
    coroutine.push(co, m)
    return m
  end)
  assert(coroutine.push(co, 1000000) == true)
  assert(coroutine.resume(co) == true)
  local m: integer = 0
  while coroutine.status(co) == 'suspended' do
    assert(coroutine.resume(co) == true)
    m = coroutine.pop(co, @integer)
    assert(m > 0)
  end
  assert(m == 1346269)
end
