require 'string'

local sb: stringbuilder
local s: string

-- return
local function f(sb: *stringbuilder)
  sb:clear()
  sb:write_string'a'
  defer sb:write_string'd' end
  defer sb:write_string'c' end
  sb:write_string'b'
  return tostring(sb)
end
s = f(&sb)
assert(s == 'abcd')
s:destroy()

-- do block
local function f(sb: *stringbuilder)
  sb:clear()
  sb:write_string'a'
  defer sb:write_string'd' end
  do
    defer sb:write_string'b' end
  end
  sb:write_string'c'
  return tostring(sb)
end
s = f(&sb)
assert(s == 'abcd')
s:destroy()

-- nested do blocks
local function f(sb: *stringbuilder)
  sb:clear()
  sb:write_string'a'
  defer sb:write_string'e' end
  do
    defer sb:write_string'c' end
    do
      defer sb:write_string'b' end
    end
  end
  sb:write_string'd'
  return tostring(sb)
end
s = f(&sb)
assert(s == 'abcde')
s:destroy()

-- return in middle nested
local function f(sb: *stringbuilder)
  sb:clear()
  sb:write_string'a'
  defer sb:write_string'd' end
  if true then
    defer sb:write_string'c' end
    if true then
      defer sb:write_string'b' end
    end
    return tostring(sb)
  end
  return tostring(sb)
end
s = f(&sb)
assert(s == 'abcd')
s:destroy()

-- middle return
local function f(sb: *stringbuilder)
  sb:clear()
  sb:write_string'a'
  defer sb:write_string'd' end
  if true then
    defer sb:write_string'c' end
    return tostring(sb)
    if true then
      defer sb:write_string'b' end
    end
  end
  return tostring(sb)
end
s = f(&sb)
assert(s == 'acd')
s:destroy()

-- while and break
local function f(sb: *stringbuilder)
  sb:clear()
  sb:write_string'a'
  defer sb:write_string'c' end
  while true do
    defer sb:write_string'b' end
    break
  end
  return tostring(sb)
end
s = f(&sb)
assert(s == 'abc')
s:destroy()

-- for and continue
local function f(sb: *stringbuilder)
  sb:clear()
  sb:write_string'a'
  defer sb:write_string'c' end
  for i=1,3 do
    defer sb:write_string'b' end
    continue
    defer sb:write_string' ' end
  end
  return tostring(sb)
end
s = f(&sb)
assert(s == 'abbbc')
s:destroy()

-- repeat
local function f(sb: *stringbuilder)
  sb:clear()
  sb:write_string'a'
  defer sb:write_string'c' end
  repeat
    defer sb:write_string'b' end
    local x = true
  until x
  return tostring(sb)
end
s = f(&sb)
assert(s == 'abc')
s:destroy()

-- issue #46
local function f()
  local n = 0
  defer n = n+1 end
  local r = (do
    assert(true)
    return 0
  end)
  return n + r
end
assert(f() == 1)
local function g()
  local n = 0
  defer n = n+1 end
  local function x()
    assert(true)
    return 0
  end
  local r = x()
  return n + r
end
assert(g() == 1)

sb:destroy()
