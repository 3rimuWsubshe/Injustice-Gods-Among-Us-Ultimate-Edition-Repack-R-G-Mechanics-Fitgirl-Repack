require 'string'

local maxi: integer <comptime> = #[primtypes.integer.max]#
local mini: integer <comptime> = #[primtypes.integer.min]#

do -- initialization, len, eq and reset
  local arr: byte[6] = {0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00}
  local a: string = (@cstring)(&arr[0])
  local b: string = (@cstring)('hello')
  assert('a' == 'a')
  assert('' == '')
  assert(not ('a' == 'b'))
  assert(a == b)
  local c: string = 'hello'
  local d: string = (@cstring)('hello')
  assert(a == c and a == d)
  a:reset()
  assert(a == '')
  assert(not (a == b))
  b:reset()
  assert(a == b)
  a = (@cstring)(nilptr)
  assert(a == b)
  assert('a' == 'a')
end

do -- len
  local a: string = 'hello'
  local e: string
  assert(#a == 5)
  assert(a:len() == 5)
  assert(string.len(a) == 5)
  assert(string.len(&a) == 5)
  assert(#('hello') == 5)
  assert(('hello'):len() == 5)
  assert(string.len('hello') == 5)
  assert(#e == 0)
  assert(e:len() == 0)
  assert(string.len(e) == 0)
  assert(#('') == 0)
  assert((''):len() == 0)
  assert(string.len('') == 0)
  assert(string.len("") == 0)
  assert(string.len("\0\0\0") == 3)
  assert(string.len("1234567890") == 10)
end

do -- operators < and <=
  local a: string = '01'
  local b: string = '11'
  assert(not (a < a))
  assert(a <= a)
  assert(a < b and not (b < a))
  assert(a <= b and not (b <= a))
  b = '110'
  assert(a < b and not (b < a))
  assert(a <= b and not (b <= a))
  b = '010'
  assert(a < b and not (b < a))
  assert(a <= b and not (b <= a))
  b = a
  assert(not (a < b) and not (b < a))
  assert(a <= b and b <= a)
  local e: string
  assert(not (a < e) and e < a)
  assert(not (a <= e) and e <= a)
  assert('a' < 'b')
  assert('a' <= 'a')
  assert('alo' < 'alo1')
  assert('' < 'a')
  assert('alo\0alo' < 'alo\0b')
  assert('alo\0alo\0\0' > 'alo\0alo\0')
  assert('alo' < 'alo\0')
  assert('alo\0' > 'alo')
  assert('\0' < '\1')
  assert('\0\0' < '\0\1')
  assert('\1\0a\0a' <= '\1\0a\0a')
  assert(not ('\1\0a\0b' <= '\1\0a\0a'))
  assert('\0\0\0' < '\0\0\0\0')
  assert(not('\0\0\0\0' < '\0\0\0'))
  assert('\0\0\0' <= '\0\0\0\0')
  assert(not('\0\0\0\0' <= '\0\0\0'))
  assert('\0\0\0' <= '\0\0\0')
  assert('\0\0\0' >= '\0\0\0')
  assert(not ('\0\0b' < '\0\0a\0'))
end

do -- concat
  local a: string = 'ab'
  local b: string = 'cd'
  local c = a .. b
  assert(#c == 4)
  assert(#'' == 0)
  assert(#'a' == 1)
  assert(#'ab' == 2)
  assert(c == 'abcd')
  assert('abcd' == c)
  local e: string
  assert((a .. e) == a)
  assert((e .. a) == a)
  assert((e .. e) == e)
  assert('a'..'b' == 'ab')
end

do -- char
  local c = string.char(0x41)
  assert(c == 'A')
end

do -- byte
  local arr: byte[4] = {1,2,3,0}
  local a: string = (@cstring)(&arr[0])
  assert(a:byte( 1) == 1 and a:byte( 2) == 2 and a:byte( 3) == 3)
  assert(a:byte(-3) == 1 and a:byte(-2) == 2 and a:byte(-1) == 3)
  assert(string.byte("a") == 97)
  assert(string.byte("\xe4") > 127)
  assert(string.byte(string.char(255)) == 255)
  assert(string.byte(string.char(0)) == 0)
  assert(string.byte("\0") == 0)
  assert(string.byte("\0\0alo\0x", -1) == string.byte('x'))
  assert(string.byte("ba", 2) == 97)
end

do -- sub
  local a: string = 'hello'
  assert(a:sub(1,5) == a)
  assert(a:sub(1,-1) == 'hello')
  assert(a:sub(1) == 'hello')
  assert(a:sub(2,4) == 'ell')
  assert(a:sub(2) == 'ello')
  assert(a:sub(-4,-2) == 'ell')
  assert(a:sub(2,10) == 'ello')
  assert(a:sub(10,1) == '')
  assert(a:sub(-10,1) == 'h')
  assert(a:sub(-10,10) == 'hello')
  assert(a:sub(-10,-6) == '')
  assert(a:sub(-10,-5) == 'h')
  local e: string
  assert(e:sub(1,2) == e)
  assert(e:sub(-10,10) == e)
  assert(string.sub("123456789",2,4) == "234")
  assert(string.sub("123456789",7) == "789")
  assert(string.sub("123456789",7,6) == "")
  assert(string.sub("123456789",7,7) == "7")
  assert(string.sub("123456789",0,0) == "")
  assert(string.sub("123456789",-10,10) == "123456789")
  assert(string.sub("123456789",1,9) == "123456789")
  assert(string.sub("123456789",-10,-20) == "")
  assert(string.sub("123456789",-1) == "9")
  assert(string.sub("123456789",-4) == "6789")
  assert(string.sub("123456789",-6, -4) == "456")
  assert(string.sub("123456789", mini, -4) == "123456")
  assert(string.sub("123456789", mini, maxi) == "123456789")
  assert(string.sub("123456789", mini, mini) == "")
  assert(string.sub("\000123456789",3,5) == "234")
  assert(("\000123456789"):sub(8) == "789")
end

do -- rep
  local a: string = 'hi'
  assert(a:rep(-1) == '')
  assert(a:rep(0) == '')
  assert(a:rep(1) == a)
  assert(a:rep(2) == 'hihi')
  assert(a:rep(3) == 'hihihi')
  local e: string
  assert(e:rep(2) == e)
  assert(e:rep(3) == e)
  assert(string.rep('teste', 0) == '')
  assert(string.rep('tes\00te', 2) == 'tes\0tetes\000te')
  assert(string.rep('', 10) == '')
  for i=0,30 do assert(string.len(string.rep('a', i)) == i) end
  assert(string.rep('teste', 0, 'xuxu') == '')
  assert(string.rep('teste', 1, 'xuxu') == 'teste')
  assert(string.rep('teste', 2, 'xuxu') == 'testexuxuteste')
  assert(string.rep('teste', 3, 'xuxu') == 'testexuxutestexuxuteste')
  assert(string.rep('\1\0\1', 2, '\0\0') == '\1\0\1\0\0\1\0\1')
  assert(string.rep('', 10, '.') == string.rep('.', 9))
end

do -- reverse
  local a: string = 'hello'
  assert(a:reverse() == 'olleh')
  local e: string
  assert(e:reverse() == e)
  assert(string.reverse"" == "")
  assert(string.reverse"\0\1\2\3" == "\3\2\1\0")
  assert(string.reverse"\0001234" == "4321\0")
end

do -- upper and lower
  local a: string = 'hello1234'
  local b: string = 'HELLO1234'
  assert(a:upper() == 'HELLO1234')
  assert(b:upper() == 'HELLO1234')
  assert(a:lower() == 'hello1234')
  assert(b:lower() == 'hello1234')
  local e: string
  assert(e:upper() == e)
  assert(e:lower() == e)
  assert(string.upper("ab\0c") == "AB\0C")
  assert(string.lower("\0ABCc%$") == "\0abcc%$")
end

do -- arithmetic operators
  assert('2' + '3' == 5.0) assert('2' + 3 == 5.0) assert(2 + '3' == 5.0)
  assert('2' - '3' == -1.0) assert('2' - 3 == -1.0) assert(2 - '3' == -1.0)
  assert('2' * '3' == 6.0) assert('2' * 3 == 6.0) assert(2 * '3' == 6.0)
  assert('2' / '3' == 2.0/3.0) assert(2 / '3' == 2.0/3.0) assert('2' / 3 == 2.0/3.0)
  assert('2' // '3' == 0.0) assert(2 // '3' == 2.0//3.0) assert('2' // 3 == 2.0//3.0)
  assert('2' % '3' == 2.0) assert('2' % 3 == 2.0) assert(2 % '3' == 2.0)
  assert('2' ^ '3' == 8.0) assert('2' ^ 3 == 8.0) assert(2 ^ '3' == 8.0)
  assert(-'2' == -2.0)
  assert('2' & '3' == 2) assert('2' & 3 == 2) assert(2 & '3' == 2)
  assert('2' | '1' == 3) assert('2' | 1 == 3) assert(2 | '1' == 3)
  assert('2' ~ '3' == 1) assert(2 ~ '3' == 1) assert('2' ~ 3 == 1)
  assert('2' << '3' == 16) assert(2 << '3' == 16) assert('2' << 3 == 16)
  assert('2' >> '1' == 1) assert(2 >> '1' == 1) assert('2' >> 1 == 1)
  assert(~'2' == -3)
end

do -- find
  local s: string = 'hello world'
  local b, e
  b, e = s:find('h', 1, true) assert(b == 1 and e == 1)
  b, e = s:find('he', 1, true) assert(b == 1 and e == 2)
  b, e = s:find('ld', 1, true) print(b,e) assert(b == 10 and e == 11)
  b, e = s:find('heo', 1, true) assert(b == 0 and e == 0)
  b, e = s:find('hel', 1, true) assert(b == 1 and e == 3)
  b, e = s:find('d', 1, true) assert(b == 11 and e == 11)
  b, e = s:find('h', -11, true) assert(b == 1 and e == 1)
  b, e = s:find('h', -10, true) assert(b == 0 and e == 0)
  b, e = s:find('', 1, true) assert(b == 1 and e == 0)
  b, e = s:find('a', 1, true) assert(b == 0 and e == 0)
  s = ''
  b, e = s:find('', 1, true) assert(b == 1 and e == 0)
  b, e = s:find('a', 1, true) assert(b == 0 and e == 0)
end

do -- print
  print('hello')
  local s: string = 'world'
  print(s)
  print((@cstring)('!'))
end

do -- tostring
  assert(tostring(2) == '2')
  assert(tostring(0xff) == '255')
  assert(tostring(-2) == '-2')
  assert(tostring(false) == 'false')
  assert(tostring(true) == 'true')
  assert(tostring(nil) == 'nil')
  assert(tostring('hello world') == 'hello world')
  assert(#tostring('\0') == 1)
  assert(tostring(-1203) == "-1203")
  assert(tostring(1203.125) == "1203.125")
  assert(tostring(-0.5) == "-0.5")
  assert(tostring(-32767) == "-32767")
  assert(type(tostring(nil)) == 'string')
  assert(type(tostring(12)) == 'string')
  local function f() end
  assert(tostring(f):sub(1,12) == 'function: 0x')
  assert(tostring(string.lower):sub(1,12) == 'function: 0x')
  assert(tostring(tostring) == 'lazyfunction')
end

do -- string implicit conversion
  local v: stringview
  local s: string
  local c: cstring
  v = 'hello'
  s = v; assert(s == 'hello')
  c = v; assert(c == 'hello')
  s = 'world'
  v = s; assert(v == 'world')
  c = s; assert(c == 'world')
  c = 'text'
  s = c; assert(s == 'text')
  v = c; assert(v == 'text')
end

do -- tonumber
  assert(tonumber(1337) == 1337)
  assert(tonumber('1337') == 1337)
  assert(tonumber(0) == 0)
  assert(tonumber('0') == 0)

  local v: stringview = '1337'
  assert(tonumber(v) == 1337)
  local s: string = '1337'
  assert(tonumber(s) == 1337)
  local c: cstring = '1337'
  assert(tonumber(c) == 1337)
end
