require 'sequence'

do -- manual init and reset
  local seq: sequence(integer)
  assert(#seq == 0 and seq.impl == nilptr)
  seq:init()
  assert(seq.impl ~= nilptr)
  seq:reset()
  assert(seq.impl == nilptr)
end

do -- braces initializer
  local seq: sequence(integer) = {}
  assert(#seq == 0 and seq.impl ~= nilptr)
  seq = {1,2,3}
  assert(#seq == 3 and seq[0] == 0 and seq[1] == 1 and seq[2] == 2 and seq[3] == 3)
  seq = {4}
  assert(#seq == 1 and seq[0] == 0 and seq[1] == 4)
  seq = {}
  assert(#seq == 0)
end

do -- indexing new elements and clear
  local seq: sequence(integer) = {}
  seq[0] = 1
  assert(seq[0] == 1)
  assert(seq[1] == 0)
  assert(seq[2] == 0)
  seq[3] = 1
  assert(seq[3] == 1)
  assert(#seq == 3)
  seq:clear()
  assert(#seq == 0)
end

do -- reserve and resize
  local seq: sequence(integer) = {}
  assert(seq:capacity() == 0)
  seq:push(1)
  assert(seq:capacity() == 1)
  seq:reserve(4)
  assert(seq:capacity() == 4)
  seq:resize(2, 1)
  assert(#seq == 2 and seq[0] == 0 and seq[1] == 1 and seq[2] == 1)
  seq:resize(4, 2)
  assert(#seq == 4 and seq[0] == 0 and seq[1] == 1 and seq[2] == 1 and seq[3] == 2 and seq[4] == 2)
end

do -- push and pop
  local seq: sequence(integer) = {}
  seq:push(1)
  assert(#seq == 1 and seq[0] == 0 and seq[1] == 1)
  assert(seq:pop() == 1)
  assert(#seq == 0 and seq[0] == 0)
  seq:push(1) seq:push(2) seq:push(3)
  assert(#seq == 3 and seq[0] == 0 and seq[1] == 1 and seq[2] == 2 and seq[3] == 3)
end

do -- remove
  local seq: sequence(integer) = {1,2,3,4}
  seq[0] = 10
  assert(#seq == 4)
  assert(seq:remove(2) == 2)
  assert(#seq == 3 and seq[1] == 1 and seq[2] == 3 and seq[3] == 4)
  assert(seq:remove(3) == 4)
  assert(#seq == 2 and seq[1] == 1 and seq[2] == 3)
  assert(seq:remove(1) == 1)
  assert(#seq == 1 and seq[1] == 3)
  assert(seq:remove(1) == 3)
  assert(#seq == 0)
  assert(seq[0] == 10)
end

do -- insert
  local seq: sequence(integer)
  seq:insert(1, 3)
  assert(#seq == 1 and seq[1] == 3)
  seq:insert(1, 1)
  assert(#seq == 2 and seq[1] == 1 and seq[2] == 3)
  seq:insert(3, 4)
  assert(#seq == 3 and seq[1] == 1 and seq[2] == 3 and seq[3] == 4)
  seq:insert(2, 2)
  assert(#seq == 4 and seq[1] == 1 and seq[2] == 2 and seq[3] == 3 and seq[4] == 4)
end

do -- passing by reference
  local seqa: sequence(integer) = {1}
  local seqb: sequence(integer)
  seqb = seqa
  assert(#seqb == 1 and seqb[1] == 1)
  seqa:push(2)
  assert(#seqb == 2 and seqb[1] == 1 and seqb[2] == 2)
  seqa:clear()
  assert(#seqb == 0)
end

require 'allocators.generic'
do -- custom allocator
  local seq: sequence(integer, generic_allocator) = {1,2,3}
  assert(#seq == 3 and seq[0] == 0 and seq[1] == 1 and seq[2] == 2 and seq[3] == 3)
  seq:reset()
end
