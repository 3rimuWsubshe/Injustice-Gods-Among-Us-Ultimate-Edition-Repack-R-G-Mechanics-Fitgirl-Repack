require 'allocators.gc'
require 'memory'

local function alloc_test() <noinline>
  for i=1,128 do
    local p = gc_allocator:alloc(1024)
    if i == 1 then
      assert(gc:count() == 1)
    end
    assert(p ~= nilptr)
    p = nilptr
  end
end

local function clear_stack() <noinline>
  local buffer: [1024]byte <volatile>
end

do -- gc
  assert(gc:isrunning())
  gc:stop()
  assert(not gc:isrunning())
  gc:restart()
  assert(gc:isrunning())
  alloc_test()
  clear_stack()
  gc:collect()
  gc:collect()
  assert(gc:count() == 0)
end

do -- collectgarbage
  assert(collectgarbage("isrunning"))
  collectgarbage("stop")
  assert(not collectgarbage("isrunning"))
  collectgarbage("restart")
  assert(collectgarbage("isrunning"))
  alloc_test()
  clear_stack()
  collectgarbage()
  collectgarbage()
  collectgarbage("collect")
  assert(collectgarbage("count") == 0)
end

local gc_count = 0
do -- finalizers
  local function finalizer_test() <noinline>
    local Foo = @record {id: integer}

    function Foo:__gc()
      gc_count = gc_count + 1
    end

    local foos: span(Foo) = gc_allocator:spannew(@Foo, 2)
    local foo: *Foo = gc_allocator:new(@Foo)
    foos = (@span(Foo)){}
    foo = nilptr
  end
  finalizer_test()
  clear_stack()
  collectgarbage()
  collectgarbage()
  collectgarbage()
  assert(gc_count == 3)
end
