require 'string'

local function assert_match(s: string, patt: string, res: overload(niltype,string,sequence(string)))
  local status, captures = string.match(s, patt, 1)
  ## if res.type.is_niltype then
  assert(status == true and #captures == 1 and captures[1] == s)
  ## elseif res.type.is_string then
  assert(status == true and #captures == 1 and captures[1] == res)
  ## elseif res.type.is_sequence then
  assert(status == true)
  assert(#captures == #res)
  for i:isize=1,#captures do
    assert(captures[i] == res[i])
  end
  res:destroy()
  ## end
  captures:destroy()
end

local function assert_no_match(s: string, patt: string)
  local status, captures = string.match(s, patt)
  assert(status == false and #captures == 0)
end

do -- test pattern matching syntax
  -- character class
  assert_match('a', 'a')
  assert_no_match('b', 'a')

  -- '+'
  assert_match('a', 'a+')
  assert_match('aaa', 'a+')
  assert_match('aaab', 'a+', 'aaa')
  assert_no_match('b', 'a+')

  -- '-'
  assert_match('a', 'a-', '')
  assert_match('a', 'a-%a', 'a')

  -- '*'
  assert_match('', 'a*')
  assert_match('a', 'a*')
  assert_match('aaa', 'a*')
  assert_match('b', 'a*', '')

  -- '?'
  assert_match('a', 'a?')
  assert_match('aa', 'a?a?')
  assert_match('b', 'a?b')
  assert_match('b', 'a?', '')

  -- '^' anchor
  assert_match('a', '^a')
  assert_match('^', '^^')
  assert_match('aa', '^aa')
  assert_no_match('b', '^a')

  -- '$' anchor
  assert_match('a', 'a$')
  assert_match('$', '$$')
  assert_match('aa', 'aa$')
  assert_no_match('b', 'a$')
  assert_no_match('ab', 'a$')

  assert_match('a', '^a$')
  assert_match('aa', '^aa$')
  assert_match('^$', '^^$$')

  -- '.'
  assert_match('', '.*')
  assert_match('a', '.')
  assert_match('ab', '..')
  assert_match('aA0;\0\n', '.+')

  assert_match('0123456789', '%d+')
  assert_match('0123456789abcdefABCDEF', '%x+')
  assert_match('abcdefghijklmnopqrstuvwxyz', '%l+')
  assert_match('ABCDEFGHIJKLMNOPQRSTUVWXYZ', '%u+')
  assert_match('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', '%a+')
  assert_match('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', '%w+')
  assert_match('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789()[]{}<>|/\\"\'`~:;,.?!@#$%^&*_=+-', '%g+')
  assert_match('()[]{}<>|/\\"\'`~:;,.?!@#$%^&*_=+-', '%p+')
  assert_match('\0\a\b\f\n\r\t\v', '%c+')
  assert_match(' \t\v\n\r\f', '%s+')
  assert_match('\0\0', '%z+')
  assert_match('^$()%.[]*+-?', '%^%$%(%)%%%.%[%]%*%+%-%?')

  -- complement classes
  assert_match('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ()[]{}<>|/\\"\'`~:;,.?!@#$%^&*_=+-', '%D+')
  assert_match('ghijklmnopqrstuvwxyzGHIJKLMNOPQRSTUVWXYZ()[]{}<>|/\\"\'`~:;,.?!@#$%^&*_=+-', '%X+')
  assert_match('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789()[]{}<>|/\\"\'`~:;,.?!@#$%^&*_=+-', '%L+')
  assert_match('abcdefghijklmnopqrstuvwxyz0123456789()[]{}<>|/\\"\'`~:;,.?!@#$%^&*_=+-', '%U+')
  assert_match('0123456789()[]{}<>|/\\"\'`~:;,.?!@#$%^&*_=+-', '%A+')
  assert_match('()[]{}<>|/\\"\'`~:;,.?!@#$%^&*_=+-', '%W+')
  assert_match('\0\a\b\f\n\r\t\v', '%G+')
  assert_match('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', '%P+')
  assert_match('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789()[]{}<>|/\\"\'`~:;,.?!@#$%^&*_=+-', '%C+')
  assert_match('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789()[]{}<>|/\\"\'`~:;,.?!@#$%^&*_=+-', '%S+')

  -- set
  assert_match('0123456789', '[0-9]+')
  assert_match('abcdefghijklmnopqrstuvwxyz0123456789', '[a-z0-9]+')
  assert_match('abcdefghijklmnopqrstuvwxyz0123456789', '[a-z]+', 'abcdefghijklmnopqrstuvwxyz')
  assert_match('abcdefghijklmnopqrstuvwxyz0123456789', '[0-9]+', '0123456789')
  assert_match('abcdef12345_-', '[%w_-]+')

  -- max expanding
  assert_match('ababc', '[ab]+', 'abab')
  assert_match('ababc', '[ab]+c', 'ababc')
  assert_match('ababb', '[ab]+b', 'ababb')
  assert_no_match('ababb', '[ab]+c')

  -- min expanding
  assert_match('ababc', '[ab]-c', 'ababc')
  assert_no_match('ababb', '[ab]-c')

  -- optional expanding
  assert_match('a', 'a?a')

  -- complement set
  assert_match('()[]{}<>|/\\"\'`~:;,.?!@#$%^&*_=+-', '[^%w]+')

  -- balanced pattern
  assert_match('()', '%b()')
  assert_match('[]', '%b[]')
  assert_match('(())', '%b()')
  assert_match('(()())', '%b()')
  assert_match('(a(b)c(d)e)', '%b()')
  assert_match('(()', '%b()', '()')
  assert_no_match('(', '%b()')
  assert_no_match('(()', '^%b()')
  assert_no_match('ab', '%b()')

  -- frontier pattern
  assert_match('1a', '%f[%l]', '')
  assert_match('1a', '1%f[%l]%l')
  assert_match('12345abcdef', '%d+%f[%l]%l+')
  assert_match('12345abcdef', '%d+%f[^%d]%l+')

  -- captures
  assert_match('a', '(a)', 'a')
  assert_match('aa', '(a)%1', 'a')
  assert_match('abc', '(a)(b)(c)', (@sequence(string)){'a','b','c'})
  assert_match('abc ', '(a*(.)%w(%s*))', (@sequence(string)){'abc ', 'b', ' '})
  assert_match('abc {abc }{b}{ }', '(a*(.)%w(%s*)){%1}{%2}{%3}', (@sequence(string)){'abc ', 'b', ' '})
  -- assert_match('flaaap', '()aa()', 'aa')
  assert_no_match('flaaap', '()aa()%1')
end
