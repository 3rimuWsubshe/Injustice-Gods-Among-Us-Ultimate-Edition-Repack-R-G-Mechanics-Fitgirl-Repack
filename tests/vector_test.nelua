require 'vector'

do -- braces initializer
  local vec: vector(integer) = {}
  assert(#vec == 0 and vec:capacity() == 0)
  vec:destroy()
  vec = {1,2,3}
  assert(#vec == 3 and vec[0] == 1 and vec[1] == 2 and vec[2] == 3)
  vec:destroy()
  vec = {4}
  assert(#vec == 1 and vec[0] == 4)
  vec:destroy()
  vec = {}
  assert(#vec == 0)
end

do -- reset and clear
  local vec: vector(integer)
  assert(#vec == 0 and vec:capacity() == 0)
  vec = {1,2,3}
  assert(#vec == 3 and vec:capacity() == 3)
  vec:clear()
  assert(#vec == 0 and vec:capacity() == 3)
  vec:destroy()
  assert(#vec == 0 and vec:capacity() == 0)
end

do -- reserve and resize
  local vec: vector(integer) = {}
  assert(vec:capacity() == 0)
  vec:push(1)
  assert(vec:capacity() == 1)
  vec:reserve(4)
  assert(vec:capacity() == 4)
  vec:resize(2)
  assert(#vec == 2 and vec[0] == 1 and vec[1] == 0)
  vec:resize(4)
  assert(#vec == 4 and vec[0] == 1 and vec[1] == 0 and vec[2] == 0 and vec[3] == 0)
  vec:destroy()
end

do -- push and pop
  local vec: vector(integer)
  assert(#vec == 0)
  vec:push(1)
  assert(#vec == 1 and vec[0] == 1 and vec:capacity() == 1)
  vec:push(2)
  assert(#vec == 2 and vec[0] == 1 and vec[1] == 2 and vec:capacity() == 2)
  assert(vec:pop() == 2)
  assert(#vec == 1 and vec[0] == 1)
  assert(vec:pop() == 1)
  assert(#vec == 0)
  vec:destroy()
end

do -- remove
  local vec: vector(integer) = {1,2,3,4}
  assert(#vec == 4)
  assert(vec:remove(1) == 2)
  assert(#vec == 3 and vec[0] == 1 and vec[1] == 3 and vec[2] == 4)
  assert(vec:remove(2) == 4)
  assert(#vec == 2 and vec[0] == 1 and vec[1] == 3)
  assert(vec:remove(0) == 1)
  assert(#vec == 1 and vec[0] == 3)
  assert(vec:remove(0) == 3)
  assert(#vec == 0)
  vec:destroy()
end

do -- remove_value
  local vec: vector(integer)
  assert(vec:remove_value(0) == false)
  vec = {1,2,3,4}
  assert(#vec == 4)
  assert(vec:remove_value(3) == true)
  assert(#vec == 3 and vec[2] == 4)
  assert(vec:remove_value(3) == false)
  assert(vec:remove_value(1) == true)
  assert(#vec == 2 and vec[0] == 2)
  assert(vec:remove_value(2) == true)
  assert(#vec == 1 and vec[0] == 4)
  assert(vec:remove_value(4) == true)
  assert(#vec == 0)
  assert(vec:remove_value(4) == false)
  vec:destroy()
end

do -- remove_if
  local vec: vector(integer) = {1,2,3,4,5,7,8,9}
  local function is_odd(x: integer) return x % 2 == 1 end
  vec:remove_if(is_odd)
  assert(#vec == 3 and vec[0] == 2 and vec[1] == 4 and vec[2] == 8)
  local function is_even(x: integer) return x % 2 == 0 end
  vec:remove_if(is_even)
  assert(#vec == 0)
end

do -- insert
  local vec: vector(integer)
  vec:insert(0, 3)
  assert(#vec == 1 and vec[0] == 3)
  vec:insert(0, 1)
  assert(#vec == 2 and vec[0] == 1 and vec[1] == 3)
  vec:insert(2, 4)
  assert(#vec == 3 and vec[0] == 1 and vec[1] == 3 and vec[2] == 4)
  vec:insert(1, 2)
  assert(#vec == 4 and vec[0] == 1 and vec[1] == 2 and vec[2] == 3 and vec[3] == 4)
  vec:destroy()
end

require 'allocators.generic'
do -- custom allocator
  local vec: vector(integer, generic_allocator) = {1,2,3}
  assert(#vec == 3 and vec[0] == 1 and vec[1] == 2 and vec[2] == 3)
  vec:destroy()
end
