require 'span'
require 'iterators'

do -- pointer to span
  local arr: array(integer, 4) = {1,2,3,4}
  local s: span(integer) = { &arr[0], 4 }
  assert(#s == 4 and s[0] == 1 and s[1] == 2 and s[2] == 3 and s[3] == 4)
  s[0] = 5
  assert(arr[0] == 5)
end

do -- string to span
  local sv: string = 'AB'
  local s: span(byte) = sv
  assert(s[0] == 0x41 and s[1] == 0x42)
  assert(#s == 2)
end

do -- array to span
  local arr: array(integer, 4) = {1,2,3,4}
  local s: span(integer) = &arr
  assert(s.size == 4 and s.data == &arr[0])
  assert(#s == 4 and s[0] == 1 and s[1] == 2 and s[2] == 3 and s[3] == 4)
  s[0] = 5
  assert(arr[0] == 5)
end

do -- iterators
  local arr: array(integer, 4) = {1,2,3,4}
  local s: span(integer) = &arr
  do -- ipairs
    local sum = 0.0
    for i,v in ipairs(s) do
      sum = sum + (i+1)*v
    end
    assert(sum == 30)
  end
  do -- pairs
    local sum = 0.0
    for i,v in pairs(s) do
      sum = sum + (i+1)*v
    end
    assert(sum == 30)
  end
  do -- next
    local sum = 0.0
    for i,v in next,s,-1 do
      sum = sum + (i+1)*v
    end
    assert(sum == 30)
  end
end

require 'vector'
do -- vector to span
  local vec: vector(integer) = {1,2,3,4}
  local s: span(integer) = &vec
  assert(s.size == 4 and s.data == &vec[0])
  assert(#s == 4 and s[0] == 1 and s[1] == 2 and s[2] == 3 and s[3] == 4)
  s[0] = 5
  assert(vec[0] == 5)
  local vec2: vector(integer)
  local s: span(integer) = &vec2
  assert(#s == 0)
  vec:destroy()
end

require 'sequence'
do -- sequence to span
  local seq: sequence(integer) = {1,2,3,4}
  local s: span(integer) = &seq
  assert(s.size == 4 and s.data == &seq[1])
  assert(#s == 4 and s[0] == 1 and s[1] == 2 and s[2] == 3 and s[3] == 4)
  s[0] = 5
  assert(seq[1] == 5)
  s = {}
  assert(#s == 0 and s.data == nilptr)
  seq:destroy()
end

do
  local Node = @record{
    tag: string,
    nodes: vector(Node)
  }
  local node: Node = {'foo'}
  node.nodes:push(Node{'boo'})
  assert(node.tag == 'foo' and node.nodes[0].tag == 'boo')
  node.nodes:destroy()
end