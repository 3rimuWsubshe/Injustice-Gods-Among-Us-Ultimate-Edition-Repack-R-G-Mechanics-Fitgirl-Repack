require 'busted.runner'()

local assert = require 'spec.tools.assert'

describe("Nelua stdlib", function()

it("require", function()
  assert.run_c_from_file('tests/require_test.nelua')
end)
it("builtins", function()
  assert.run_c_from_file('tests/builtins_test.nelua', nil, 'warning: hi')
end)
it("traits", function()
  assert.run_c_from_file('tests/traits_test.nelua')
end)
it("libc", function()
  assert.run_c_from_file('tests/libc_test.nelua')
end)
it("math", function()
  assert.run_c_from_file('tests/math_test.nelua')
end)
it("memory", function()
  assert.run_c_from_file('tests/memory_test.nelua')
end)
it("gc", function()
  assert.run_c_from_file('tests/gc_test.nelua')
end)
it("allocators", function()
  assert.run_c_from_file('tests/allocators_test.nelua')
end)
it("span", function()
  assert.run_c_from_file('tests/span_test.nelua')
end)
it("sequence", function()
  assert.run_c_from_file('tests/sequence_test.nelua')
end)
it("vector", function()
  assert.run_c_from_file('tests/vector_test.nelua')
end)
it("list", function()
  assert.run_c_from_file('tests/list_test.nelua')
end)
it("hashmap", function()
  assert.run_c_from_file('tests/hashmap_test.nelua')
end)
it("hash", function()
  assert.run_c_from_file('tests/hash_test.nelua')
end)
it("resourcepool", function()
  assert.run_c_from_file('tests/resourcepool_test.nelua')
end)
it("io", function()
  assert.run_c_from_file('tests/io_test.nelua')
end)
it("os", function()
  assert.run_c_from_file('tests/os_test.nelua')
end)
it("stringbuilder", function()
  assert.run_c_from_file('tests/stringbuilder_test.nelua')
end)
it("string", function()
  assert.run_c_from_file('tests/string_test.nelua')
end)
it("defer", function()
  assert.run_c_from_file('tests/defer_test.nelua')
end)
it("coroutine", function()
  assert.run_c_from_file('tests/coroutine_test.nelua')
end)

end)
