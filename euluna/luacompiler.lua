local fs = require 'euluna.utils.fs'
local pegger = require 'euluna.utils.pegger'
local stringer = require 'euluna.utils.stringer'
local tabler = require 'euluna.utils.tabler'
local console = require 'euluna.utils.console'
local config = require 'euluna.configer'.get()

local lua_compiler = {}

function lua_compiler.compile_code(luacode, outfile)
  local luafile = outfile .. '.lua'

  -- file heading
  local hash = stringer.hash(luacode)
  local heading = string.format(
[[-- This file was auto generated by Euluna.
-- Compile Hash: %s

]], hash)
  local sourcecode = heading .. luacode

  -- check if write is actually needed
  local current_sourcecode = fs.tryreadfile(luafile)
  if not config.no_cache and current_sourcecode and current_sourcecode == sourcecode then
    if not config.quiet then console.info("using cached generated " .. luafile) end
    return luafile
  end

  fs.ensurefilepath(luafile)
  fs.writefile(luafile, sourcecode)
  if not config.quiet then console.info("generated " .. luafile) end

  return luafile
end

function lua_compiler.compile_binary(luafile)
  return luafile
end

function lua_compiler.get_run_command(binaryfile, runargs)
  -- generate compile command
  local args = pegger.split_execargs(config.lua_options)
  table.insert(args, fs.abspath(binaryfile))
  tabler.insertvalues(args, runargs)
  return config.lua, args
end

return lua_compiler
