--[[
The string library provides functions to manipulate strings.

String points to an immutable contiguous sequence of characters.
Internally it just holds a pointer to a buffer and a size.
It's buffer is zero terminated (`\0`) by default to have more compatibility with C.

The string type is defined by the compiler, however it does not have
its methods implemented, this module implements all string methods.

When the GC is disabled, you should call `destroy` to free the string memory
of any string returned in by this library, otherwise he memory will leak.
Note that strings can point to a buffer in the program static storage
and such strings should never be destroyed.
]]

require 'memory'
require 'span'
require 'patternmatcher'
require 'sequence'
require 'allocators.default'

local errno: cint <cimport,cinclude'<errno.h>',nodecl>
local function strtoll(str: cstring, endptr: *cstring, base: cint): clonglong <cimport,cinclude'<stdlib.h>',nodecl> end
local function strtod(str: cstring, endptr: *cstring): float64 <cimport,cinclude'<stdlib.h>',nodecl> end
local function strspn(s: cstring, accept: cstring): csize <cimport'strspn',cinclude'<string.h>',nodecl> end
local function snprintf(s: cstring, maxlen: csize, format: cstring, ...: cvarargs): cint <cimport'snprintf',cinclude'<stdio.h>',nodecl> end
local function isdigit(x: cint): cint <cimport,cinclude'<ctype.h>',nodecl,nosideeffect> end
local function isalnum(x: cint): cint <cimport,cinclude'<ctype.h>',nodecl,nosideeffect> end
local function isspace(x: cint): cint <cimport,cinclude'<ctype.h>',nodecl,nosideeffect> end
local function tolower(c: cint): cint <cimport,cinclude'<ctype.h>',nodecl,nosideeffect> end
local function toupper(c: cint): cint <cimport,cinclude'<ctype.h>',nodecl,nosideeffect> end

--[[
Allocate a new string to be filled with length `size`.

The string is guaranteed to be zero terminated,
so it can be safely be used as a `cstring`.

Used internally.
]]
function string._create(size: usize): string
  local s: string
  check(size > 0, 'attempt to create an empty string')
  s.size = size
  s.data = (@*[0]byte)(default_allocator:xalloc(size+1))
  s.data[size] = 0
  return s
end

 -- Must be required later because it depends on `string._create`
require 'stringbuilder'

--[[
Destroys a string freeing its memory.

When GC is enabled this does nothing, because string references can be shared with GC enabled.
This should never be called on string literals.
]]
function string.destroy(s: string): void
  ## if pragmas.nogc then -- cannot destroy when GC is enabled because string may be shared
  if s.size > 0 then
    default_allocator:dealloc(s.data)
    s.data = nilptr
    s.size = 0
  end
  ## end
end

--[[
Clone a string, allocating new space.

This is useful in case you want to own the string memory,
so you can modify it or manually manage its memory when GC is disabled.
]]
function string.copy(s: string): string
  local clone: string
  if unlikely(s.size == 0) then return clone end
  clone.data = (@*[0]byte)(default_allocator:xalloc(s.size+1))
  memory.copy(clone.data, s.data, s.size)
  clone.data[s.size] = 0
  clone.size = s.size
  return clone
end

--[[
Forward a string reference to be used elsewhere.

When GC is enabled this just returns the string itself.
When GC is disabled a string copy is returned, so it can be safely stored and destroyed.
]]
function string._forward(s: string): string <inline>
  ## if pragmas.nogc then -- must return a clone so we can destroy it later
  return string.copy(s)
  ## else -- reuse the string reference when GC is enabled
  return s
  ## end
end

-- Returns the internal numeric codes of the character at position `i`.
function string.byte(s: string, i: facultative(isize)): byte
  ## if i.type.is_niltype then
  local i: isize = 1
  ## end
  -- TODO: j argument and multiple returns
  if unlikely(s.size == 0) then return 0 end
  if unlikely(i < 0) then i = s.size + i + 1 end
  --TODO: return nil instead on failure
  check(i >= 1 and (@usize)(i) <= s.size, 'index out of range')
  return (@byte)(s.data[i-1])
end

--[[
Returns the substring of `s` that starts at `i` and continues until `j` (both inclusive).
Both `i` and `j` can be negative.
If `j` is absent, then it is assumed to be equal to `-1` (which is the same as the string length).
In particular, the call `string.sub(s,1,j)` returns a prefix of `s` with length `j`,
and `string.sub(s, -i)` (for a positive `i`) returns a suffix of `s` with length `i`.
]]
function string.sub(s: string, i: isize, j: facultative(isize)): string
  ## if j.type.is_niltype then
  local j: isize = -1
  ## end
  local size: isize = (@isize)(s.size)
  if unlikely(size == 0) then return (@string){} end
  if unlikely(i < 0) then i = size + i + 1 end
  if unlikely(i <= 0) then i = 1 end
  if unlikely(j < 0) then j = size + j + 1 end
  if unlikely(j > size) then j = size end
  if unlikely(i == 1 and j == size) then return string._forward(s) end
  if unlikely(i > j) then return (@string){} end
  local subsize: usize = (@usize)(j - i + 1)
  if unlikely(subsize == 0) then return (@string){} end
  local ret: string = string._create(subsize)
  memory.copy(&ret.data[0], &s.data[i-1], subsize)
  return ret
end

--[[
Return a view for a sub string in a string.

The main difference between this and `string.sub` is that, here we don't allocate a new string,
instead it reuses its memory as an optimization.
Use this only if you know what you are doing, to be safe use `string.sub` instead.

CAUTION: When using the GC the view will not hold reference of the original string,
thus if you don't hold the original string reference somewhere you will have a dangling reference.
The view string may not be zero terminated, thus you should never
cast it to a `cstring` to use in C functions.
]]
function string.subview(s: string, i: isize, j: facultative(isize)): string
  ## if j.type.is_niltype then
  local j: isize = -1
  ## end
  local size: isize = (@isize)(s.size)
  if unlikely(size == 0) then return (@string){} end
  if unlikely(i < 0) then i = size + i + 1 end
  if unlikely(i <= 0) then i = 1 end
  if unlikely(j < 0) then j = size + j + 1 end
  if unlikely(j > size) then j = size end
  if unlikely(i == 1 and j == size) then return s end
  if unlikely(i > j) then return (@string){} end
  local subsize: usize = (@usize)(j - i + 1)
  if unlikely(subsize == 0) then return (@string){} end
  return (@string){data=&s.data[i-1], size=subsize}
end

--[[
Looks for the first match of pattern in the string.

Returns the indices of where this occurrence starts and ends.

The indices will be positive if a match is found, zero otherwise.
A third, optional argument specifies where to start the search, its default value is 1 and can be negative.
A value of true as a fourth, optional argument plain turns off the pattern matching facilities.
]]
function string.find(s: string, pattern: string, init: facultative(isize), plain: facultative(boolean)): (isize, isize)
  ## if init.type.is_niltype then
  local init: isize = 1
  ## end
  ## if plain.type.is_niltype then
  local plain: boolean = false
  ## end
  local ms: PatternMatcher = PatternMatcher.create(s, pattern)
  local startpos: isize, endpos: isize = ms:match(init, plain)
  if endpos ~= -1 then
    return startpos+1, endpos
  else -- no match
    return 0, 0
  end
end

--[[
Returns an iterator function that, each time it is called, returns the whole match plus a span of captures.
A third, optional argument specifies where to start the search, its default value is 1 and can be negative.
]]
function string.gmatch(s: string, pattern: string, init: facultative(isize))
  ## if init.type.is_niltype then
  local init: isize = 1
  ## end
  local MAX_CAPTURES <comptime> = 8
  local GMatchState: type = @record{
    ms: PatternMatcher,
    init: isize,
    captures: [MAX_CAPTURES]string
  }
  local function gmatch_next(state: *GMatchState, it: string): (boolean, string, span(string))
    local ok: boolean, matched: string, captures: span(string)
    local s: isize, e: isize = state.ms:match(state.init, false)
    if e ~= -1 then -- no match
      ok = true
      state.init = e+2
      matched = string.copy((@string){data=&state.ms.source.data[s], size=(@usize)(e-s)})
      assert(state.ms.numcaptures <= MAX_CAPTURES, 'too many captures')
      for i:isize=0,<state.ms.numcaptures do
        state.captures[i] = string.copy(state.ms:get_capture(i))
      end
      captures = (@span(string)){data=&state.captures[0], size=(@usize)(state.ms.numcaptures)}
    end
    return ok, matched, captures
  end
  local state: GMatchState = {ms = PatternMatcher.create(s, pattern), init = init}
  return gmatch_next, state, (@string){}
end

-- Like `string.gmatch` but uses sub string views (see also `string.subview`).
function string.gmatchview(s: string, pattern: string, init: facultative(isize))
  ## if init.type.is_niltype then
  local init: isize = 1
  ## end
  local MAX_CAPTURES <comptime> = 8
  local GMatchState: type = @record{
    ms: PatternMatcher,
    init: isize,
    captures: [MAX_CAPTURES]string
  }
  local function gmatch_next(state: *GMatchState, it: string): (boolean, string, span(string))
    local ok: boolean, matched: string, captures: span(string)
    local s: isize, e: isize = state.ms:match(state.init, false)
    if e ~= -1 then -- no match
      ok = true
      state.init = e+2
      matched = (@string){data=&state.ms.source.data[s], size=(@usize)(e-s)}
      assert(state.ms.numcaptures <= MAX_CAPTURES, 'too many captures')
      for i:isize=0,<state.ms.numcaptures do
        state.captures[i] = state.ms:get_capture(i)
      end
      captures = (@span(string)){data=&state.captures[0], size=(@usize)(state.ms.numcaptures)}
    end
    return ok, matched, captures
  end
  local state: GMatchState = {ms = PatternMatcher.create(s, pattern), init = init}
  return gmatch_next, state, (@string){}
end

--[[
Returns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.
The default value for `sep` is the empty string (that is, no separator).
Returns the empty string if `n` is not positive.
]]
function string.rep(s: string, n: isize, sep: facultative(string)): string
  if unlikely(n <= 0) then return (@string){} end
  if unlikely(n == 1) then return string._forward(s) end
  local n: usize = (@usize)(n)
  ## if sep.type.is_niltype then
  if unlikely(s.size == 0) then return (@string){} end
  local ret: string = string._create(n * s.size)
  for i:usize=0,<n do
    memory.copy(&ret.data[i*s.size], &s.data[0], s.size)
  end
  ## else
  local sep: string = sep
  local partsize: usize = s.size + sep.size
  if unlikely(partsize <= 0) then return (@string){} end
  local ret: string = string._create(n * partsize - sep.size)
  for i:usize=0,<n do
    memory.copy(&ret.data[i*partsize], &s.data[0], s.size)
    if i ~= n-1 then
      memory.copy(&ret.data[i*partsize + s.size], &sep.data[0], sep.size)
    end
  end
  ## end
  return ret
end

-- Helper use by `string.match` and `string.matchv`.
local function string_match(s: string, pattern: string, init: isize): (boolean, sequence(string))
  local ms: PatternMatcher = PatternMatcher.create(s, pattern)
  local startpos: isize, endpos: isize = ms:match(init, false)
  local captures: sequence(string)
  if endpos ~= -1 then
    if ms.numcaptures > 0 then -- has captures
      captures:resize((@usize)(ms.numcaptures))
      for i:isize=0,<ms.numcaptures do
        captures[(@usize)(i+1)] = ms:get_capture(i)
      end
      return true, captures
    else -- nothing captured, then capture whole match
      captures[1] = ms.source:subview(startpos+1, endpos)
      return true, captures
    end
  else -- no match
    return false, captures
  end
end

--[[
Looks for the first match of pattern in the string.
If it finds one, then returns true plus a sequence with the captured values,
otherwise it returns false plus an empty sequence.
If pattern specifies no captures, then the whole match is captured.
A third, optional argument specifies where to start the search, its default value is 1 and can be negative.
]]
function string.match(s: string, pattern: string, init: facultative(isize)): (boolean, sequence(string))
  ## if init.type.is_niltype then
  local init: isize = 1
  ## end
  local ok: boolean, seq: sequence(string) = string_match(s, pattern, init)
  for i: isize = 0,<#seq do
    seq[i] = string.copy(seq[i])
  end
  return ok, seq
end

-- Like `string.match` but uses sub string views (see also `string.subview`).
function string.matchview(s: string, pattern: string, init: facultative(isize)): (boolean, sequence(string))
  ## if init.type.is_niltype then
  local init: isize = 1
  ## end
  return string_match(s, pattern, init)
end

-- Returns a string that is the string `s` reversed.
function string.reverse(s: string): string
  if unlikely(s.size == 0) then return s end
  local ret: string = string._create(s.size)
  for i:usize=0,<s.size do
    ret.data[i] = s.data[s.size - i - 1]
  end
  return ret
end

--[[
Receives a string and returns a copy of this string with all lowercase letters changed to uppercase.
All other characters are left unchanged.
The definition of what a lowercase letter is depends on the current locale.
]]
function string.upper(s: string): string
  if unlikely(s.size == 0) then return s end
  local ret: string = string._create(s.size)
  for i:usize=0,<s.size do
    ret.data[i] = (@byte)(toupper(s.data[i]))
  end
  return ret
end

--[[
Receives a string and returns a copy of this string with all uppercase letters changed to lowercase.
All other characters are left unchanged.
The definition of what an uppercase letter is depends on the current locale.
]]
function string.lower(s: string): string
  if unlikely(s.size == 0) then return s end
  local ret: string = string._create(s.size)
  for i:usize=0,<s.size do
    ret.data[i] = (@byte)(tolower(s.data[i]))
  end
  return ret
end

-- Receives zero or more integers and returns a string with length equal to the number of arguments,
-- in which each character has the internal numeric code equal to its corresponding argument.
-- Numeric codes are not necessarily portable across platforms.
function string.char(...: varargs): string
  local s: string = string._create(#[select('#', ...)]#)
  ## for i=1,select('#', ...) do
  s.data[#[i-1]#] = #[select(i, ...)]#
  ## end
  return s
end

--[[
Returns a formatted version of its variable number of arguments following the description
given in its first argument, which must be a string.
The format string follows the same rules as the ISO C function `sprintf`.
The only differences are that the conversion specifiers and modifiers `*, h, L, l` are not supported.
]]
function string.format(fmt: string, ...: varargs): string
  local sb: stringbuilder
  sb:write_format(fmt, ...)
  return sb:promote()
end

-- Receives a string and returns its length.
-- The empty string "" has length 0. Embedded zeros are counted.
function string.len(s: string): isize <inline>
  return (@isize)(s.size)
end

-- Concept to check if a value can possibly be a number.
local scalar_coercion_concept = #[concept(function(x)
  if x.type.is_stringy then
    return primtypes.string
  elseif x.type.is_integral then
    return primtypes.integer
  elseif x.type.is_float then
    return primtypes.number
  end
  return false, string.format("type '%s' is not convertible to a scalar", x.type)
end)]#

-- Concept to check if a value can possibly be a string.
local string_coercion_concept = #[concept(function(x)
  if x.type.is_stringy then
    return primtypes.string
  elseif x.type.is_integral then
    return primtypes.integer
  elseif x.type.is_float then
    return primtypes.number
  end
  return false, string.format("type '%s' is not convertible to a string", x.type)
end)]#

-- Concatenate two strings. Used by the concatenation operator (`..`).
function string.__concat(a: string_coercion_concept, b: string_coercion_concept): string
  ## if not a.type.is_string then
    local a: string = tostring(a)
    defer a:destroy() end
  ## end
  ## if not b.type.is_string then
    local b: string = tostring(b)
    defer b:destroy() end
  ## end
  if a.size == 0 then
    return string._forward(b)
  elseif b.size == 0 then
    return string._forward(a)
  end
  local s: string = string._create(a.size + b.size)
  memory.copy(&s.data[0], a.data, a.size)
  memory.copy(&s.data[a.size], b.data, b.size)
  return s
end

-- Return length of a string. Used by the length operator (`#`).
function string.__len(a: string): isize <inline>
  return (@isize)(a.size)
end

-- Compare two strings. Used by the equality operator (`==`).
function string.__eq(a: string, b: string): boolean
  return a.size == b.size and (a.data == b.data or a.size == 0 or memory.equals(a.data, b.data, a.size))
end

--[[
Compare if string `a` is less than string `b` in lexicographical order.
Used by the less than operator (`<`).
]]
function string.__lt(a: string, b: string): boolean
  if unlikely(a.size == 0 or b.size == 0) then
    return a.size < b.size
  else
    if a.size < b.size then
      return memory.compare(a.data, b.data, a.size) <= 0
    else
      return memory.compare(a.data, b.data, b.size) < 0
    end
  end
end

--[[
Compare if string `a` is less or equal than string `b` in lexicographical order.
Used by the less or equal than operator (`<=`).
]]
function string.__le(a: string, b: string): boolean
  if unlikely(a.size == 0 or b.size == 0) then
    return a.size <= b.size
  else
    if a.size <= b.size then
      return memory.compare(a.data, b.data, a.size) <= 0
    else
      return memory.compare(a.data, b.data, b.size) < 0
    end
  end
end

-- Implement numeric operators for string.

function string.__add(a: scalar_coercion_concept, b: scalar_coercion_concept): number
  return tonumber(a) + tonumber(b)
end

function string.__sub(a: scalar_coercion_concept, b: scalar_coercion_concept): number
  return tonumber(a) - tonumber(b)
end

function string.__mul(a: scalar_coercion_concept, b: scalar_coercion_concept): number
  return tonumber(a) * tonumber(b)
end

function string.__div(a: scalar_coercion_concept, b: scalar_coercion_concept): number
  return tonumber(a) / tonumber(b)
end

function string.__idiv(a: scalar_coercion_concept, b: scalar_coercion_concept): number
  return tonumber(a) // tonumber(b)
end

function string.__tdiv(a: scalar_coercion_concept, b: scalar_coercion_concept): number
  return tonumber(a) /// tonumber(b)
end

function string.__mod(a: scalar_coercion_concept, b: scalar_coercion_concept): number
  return tonumber(a) % tonumber(b)
end

function string.__tmod(a: scalar_coercion_concept, b: scalar_coercion_concept): number
  return tonumber(a) %%% tonumber(b)
end

function string.__pow(a: scalar_coercion_concept, b: scalar_coercion_concept): number
  return tonumber(a) ^ tonumber(b)
end

function string.__unm(a: scalar_coercion_concept): number
  return -tonumber(a)
end

function string.__band(a: scalar_coercion_concept, b: scalar_coercion_concept): integer
  return tointeger(a) & tointeger(b)
end

function string.__bor(a: scalar_coercion_concept, b: scalar_coercion_concept): integer
  return tointeger(a) | tointeger(b)
end

function string.__bxor(a: scalar_coercion_concept, b: scalar_coercion_concept): integer
  return tointeger(a) ~ tointeger(b)
end

function string.__shl(a: scalar_coercion_concept, b: scalar_coercion_concept): integer
  return tointeger(a) << tointeger(b)
end

function string.__shr(a: scalar_coercion_concept, b: scalar_coercion_concept): integer
  return tointeger(a) >> tointeger(b)
end

function string.__asr(a: scalar_coercion_concept, b: scalar_coercion_concept): integer
  return tointeger(a) >>> tointeger(b)
end

function string.__bnot(a: scalar_coercion_concept): integer
  return ~tointeger(a)
end

-- Convert a string to an integer in the desired base.
local function str2intbase(s: string, base: uinteger): integer
  assert(s.size > 0, "invalid number format")
  ## if base.type.is_niltype then
  local base: uinteger <const> = 10
  ## else
  assert(base >= 2 and base <= 36, "base out of range")
  ## end
  local pos: usize = 0
  while pos < s.size and isspace(s.data[pos]) ~= 0 do pos = pos + 1 end -- skip initial spaces
  assert(pos < s.size, "invalid number format")
  local neg: boolean = false
  if s.data[pos] == '-'_byte then -- negative sign
    pos = pos + 1
    neg = true
  elseif s.data[pos] == '+'_byte then -- skip positive sign
    pos = pos + 1
  end
  local n: uinteger = 0
  while pos < s.size do
    local digit: cint = s.data[pos]
    local x: cint
    if isdigit(digit) ~= 0 then -- is a digit [0-9]
      x = digit - '0'_byte
    elseif isalnum(digit) ~= 0 then -- is a alphanumeric [a-zA-Z]
      x = toupper(digit) - 'A'_byte + 10
    else -- else spaces or invalid character
      break
    end
    assert(x < (@cint)(base), "invalid number format")
    n = n * base + (@uinteger)(x)
    pos = pos + 1
  end
  while pos < s.size and isspace(s.data[pos]) ~= 0 do pos = pos + 1 end -- skip trailing spaces
  assert(pos == s.size, "invalid number format") -- fully parsed?
  if neg then -- negate
    n = -n
  end
  return (@integer)(n)
end

--[[
Convert a string to a `cstring` through a temporary buffer.
This is mainly used to ensure the string is zero terminated.

Returns `true` in case of success.
]]
global function tocstring(buf: *[0]cchar, buflen: usize, s: string): boolean
  if buf and buflen >= s.size + 1 then
    memory.copy(buf, &s.data[0], s.size)
    buf[s.size] = 0
    return true
  end
  return false
end

-- Convert a value to a string.
global function tostring(x: auto): string
  ##[[
  local xobjtype = x.type:implicit_deref_type()
  local xtype = x.type
  if xtype.is_enum then
    xtype = xtype.subtype
  end
  ]]
  ## if xtype.is_stringy then
    return string._forward(x)
  ## elseif xobjtype.is_record and xobjtype.metafields.__tostring then
    return x:__tostring()
  ## elseif xtype.is_scalar or xtype.is_function or xtype.is_pointer then
    ## if xtype.is_pointer then tyformat = '"0x%" PRIxPTR'
    local x: usize = (@usize)(x)
    if x == 0 then
      return string._forward('(null)')
    end
    ## elseif xtype.is_function then tyformat = '"function: 0x%" PRIxPTR'
    local x: usize = (@usize)((@pointer)(x))
    if x == 0 then
      return string._forward('function: (null)')
    end
    ##[[ else
      tyformat = require'nelua.cdefs'.types_printf_format[xtype.codename]
      static_assert(tyformat)
    end]]
    local tmpbuf: [48]byte <noinit> -- the output should not have more than 48 characters
    tmpbuf[47] = 0
    local fmt: cstring <cimport #[tyformat]#, nodecl, cinclude '<inttypes.h>'>
    local size: cint = snprintf(&tmpbuf, #tmpbuf-1, fmt, x)
    ## if xtype.is_float then
      -- add a least one decimal if needed
      if tmpbuf[strspn(&tmpbuf[0], '-0123456789'_cstring)] == 0 then -- only digits
        size = snprintf(&tmpbuf, #tmpbuf-1, "%.1f", x)
      end
    ## end
    assert(size >= 0 and size < #tmpbuf-1, "tostring format failed or truncated")
    return string.copy((@string){&tmpbuf[0], size})
  ## elseif xtype.is_boolean then
    if x == true then
      return string._forward('true')
    end
    return string._forward('false')
  ## elseif xtype.is_niltype then
    return string._forward('nil')
  ## elseif xtype.is_nilptr then
    return string._forward('(null)')
  ## elseif xtype.is_polyfunction then
    return string._forward('polyfunction')
  ## else static_error("tostring: cannot convert type '%s' to a string", xtype) end
end

-- Convert a value to a number.
global function tonumber(x: auto, base: facultative(integer))
  ## if not base.type.is_niltype then
    ## static_assert(x.type.is_stringy, "string expected, got something else")
    -- TODO: return nil in case of fail (like lua)
    return str2intbase(x, base)
  ## elseif x.type.is_integral then
    local n: integer = x
    return n
  ## elseif x.type.is_float then
    local n: number = x
    return n
  ## elseif x.type.is_stringy then
    local endptr: cstring
    local tmpbuf: [65]cchar
    assert(tocstring(&tmpbuf, #tmpbuf, x)) -- ensure it's zero terminated
    errno = 0
    local n: float64 = strtod(&tmpbuf, &endptr)
    local len: usize = (@usize)(endptr) - (@usize)(&tmpbuf)
    assert(len > 0 and len <= #x and errno == 0, 'failed to convert string to number')
    return (@number)(n)
  ## else static_error("unable to convert value of type '%s' to a number", x.type) end
end

-- Convert a value to an integer.
global function tointeger(x: auto, base: facultative(integer)): integer
  ## if not base.type.is_niltype then
    ## static_assert(x.type.is_stringy, "string expected, got something else")
    return str2intbase(x, base)
  ## elseif x.type.is_scalar then
    local n: integer = x
    return n
  ## elseif x.type.is_stringy then
    local endptr: cstring
    local tmpbuf: [65]cchar
    assert(tocstring(&tmpbuf, #tmpbuf, x)) -- ensure it's zero terminated
    errno = 0
    local i: clonglong = strtoll(&tmpbuf, &endptr, 10)
    local len: usize = (@usize)(endptr) - (@usize)(&tmpbuf)
    assert(len > 0 and len <= #x and errno == 0, 'failed to convert string to integer')
    return i
  ## else static_error("unable to convert value of type '%s' to an integer", x.type) end
end
