-- String type
--
-- Strings points to an immutable contiguous sequence of characters.
-- It manages the memory on its own by allocating when needed and
-- deallocating when unused.
--
-- The string type and its methods are defined here,
-- currently it depends on the garbage collector to allocate
-- strings, in the future this may be improved by using
-- reference counted strings.
--
-- If you don't want to trigger the garbage collector
-- then does not use this module. Try to use just stringview
-- type or create your own string module.

-- These modules are used to implement the string.
require 'memory'
require 'stringview'
require 'stringbuffer'

-- Currently strings requires the garbage collector
require 'allocators.gc'
local allocator = @gc_allocator

-- C imports.
local function strchr(s: cstring, c: cint): cstring <cimport,cinclude'<string.h>',nodecl> end
local function strcpy(dest: cstring, src: cstring): cstring <cimport,cinclude'<string.h>',nodecl> end
local function strlen(s: cstring): csize <cimport,cinclude'<string.h>',nodecl> end
local function isdigit(x: cint): cint <cimport,cinclude'<ctype.h>',nodecl> end
local function tolower(c: cint): cint <cimport,cinclude'<ctype.h>',nodecl> end
local function toupper(c: cint): cint <cimport,cinclude'<ctype.h>',nodecl> end
local function snprintf_1ci(s: cstring, maxlen: csize, format: cstring, x: cint): cint <cimport'snprintf',cinclude'<stdio.h>',nodecl> end
local function snprintf_1i(s: cstring, maxlen: csize, format: cstring, x: integer): cint <cimport'snprintf',cinclude'<stdio.h>',nodecl> end
local function snprintf_1p(s: cstring, maxlen: csize, format: cstring, x: pointer): cint <cimport'snprintf',cinclude'<stdio.h>',nodecl> end
local function snprintf_1n(s: cstring, maxlen: csize, format: cstring, x: number): cint <cimport'snprintf',cinclude'<stdio.h>',nodecl> end
local function snprintf_1cs(s: cstring, maxlen: csize, format: cstring, x: cstring): cint <cimport'snprintf',cinclude'<stdio.h>',nodecl> end

-- Define the string type.
global string <codename 'nlstring'> = @record{
  data: byte[0]*,
  size: usize
  --refs: usize*,
}

-- This sets some values to be used internally at compile time
-- to make the compiler known that this type represents a string.
##[[
local stringtype = symbols.string.value
stringtype.is_string = true
stringtype.is_stringy = true
stringtype.name = 'string'
]]

-- Allocate a new string to be filled. Used internally.
function string._create(size: usize): string
  local self: string
  check(size > 0, 'string._create: attempt to create an empty string')
  self.size = size
  self.data = (@byte[0]*)(allocator.alloc(size+1))
  check(self.data ~= nilptr, 'string._create: out of memory')
  self.data[size] = 0
  --self.refs = 1
  return self
end

-- Cleanup a string. Used internally.
function string:_reset() <inline>
  allocator.dealloc(self.data)
  $self = {}
end

function stringbuffer:promotestring(): string
  if unlikely(self.size == 0) then
    return (@string){}
  end
  local size: usize = self.size
  local data: span(byte) = allocator.spanrealloc(self.data, size + 1) -- shrink
  check(data.size > 0_u, 'stringbuffer.promotestring: out of memory')
  data[size] = 0 -- cstring line ending
  $self = {} -- destroy
  return (@string){data = data.data, size = size}
end

function stringview.__tostring(s: stringview): string
  if unlikely(s.size == 0) then return (@string){} end
  local ret: string = string._create(s.size)
  memory.copy(&ret.data[0], s.data, s.size)
  return ret
end

--[[
function string:__copy(o: string*) <inline>
  self = o
  if likely(self) then
    self.refs = self.refs + 1
  end
end

function string:__destroy() <inline>
  if unlikely(self.size == 0) then return end
  self.refs = self.refs - 1
  if self.refs == 0 then
    allocator.dealloc(self)
    self = nilptr
  end
end
]]

local empty_cstring: cstring <const> = ''
function string.__tocstring(s: string): cstring <inline,nosideeffect>
  if unlikely(s.size == 0) then return empty_cstring end
  return (@cstring)(&s.data[0])
end

function string.__tostringview(s: string): stringview <inline,nosideeffect>
  if unlikely(s.size == 0) then return (@stringview){} end
  return (@stringview){data = &s.data[0], size = s.size}
end

function string.__convert(s: #[overload_concept({stringview,cstring},true)]#): string
  ## if s.type.is_stringview then
    return (@string){size=s.size, data=s.data}
  ## elseif s.type.is_cstring then
    if unlikely(not s) then return (@string){} end
    local size: usize = strlen(s)
    if unlikely(size == 0) then return (@string){} end
    local self: string = string._create(size)
    memory.copy(&self.data[0], s, size)
    return self
  ## end
end

function string.sub(self: stringview, i: isize, j: #[optional_concept(isize)]#): string
  ## if j.type.is_niltype then
  local j: isize = -1
  ## end
  if unlikely(self.size == 0) then return self end
  if unlikely(i < 0) then i = (@isize)(self.size) + i + 1 end
  if unlikely(i <= 0) then i = 1 end
  if unlikely(j < 0) then j = (@isize)(self.size) + j + 1 end
  if unlikely(j > self.size) then j = (@isize)(self.size) end
  if unlikely(i == 1 and j == self.size) then return self end
  if unlikely(i > j) then return (@string){} end
  local size: usize = (@usize)(j - i + 1)
  if unlikely(size == 0) then return (@string){} end
  local s: string = string._create(size)
  memory.copy(&s.data[0], &self.data[i-1], size)
  return s
end

function string.rep(self: stringview, n: isize, sep: #[optional_concept(stringview)]#): string
  if unlikely(n <= 0) then return (@string){} end
  if unlikely(n == 1) then return self end
  local un: usize = (@usize)(n)
  ## if sep.type.is_niltype then
  if unlikely(self.size == 0) then return (@string){} end
  local s: string = string._create(un * self.size)
  for i:usize=0,<un do
    memory.copy(&s.data[i*self.size], &self.data[0], self.size)
  end
  ## else
  local sep: stringview = sep
  local partsize: usize = self.size + sep.size
  if unlikely(partsize <= 0) then return (@string){} end
  local s: string = string._create(un * partsize - sep.size)
  for i:usize=0,<un do
    memory.copy(&s.data[i*partsize], &self.data[0], self.size)
    if i ~= n-1 then
      memory.copy(&s.data[i*partsize + self.size], &sep.data[0], sep.size)
    end
  end
  ## end
  return s
end

function string.reverse(self: stringview): string
  if unlikely(self.size == 0) then return self end
  local s: string = string._create(self.size)
  for i:usize=0,<self.size do
    s.data[i] = self.data[self.size - i - 1]
  end
  return s
end

function string.upper(self: stringview): string
  if unlikely(self.size == 0) then return self end
  local s: string = string._create(self.size)
  for i:usize=0,<self.size do
    s.data[i] = (@byte)(toupper(self.data[i]))
  end
  return s
end

function string.lower(self: stringview): string
  if unlikely(self.size == 0) then return self end
  local s: string = string._create(self.size)
  for i:usize=0,<self.size do
    s.data[i] = (@byte)(tolower(self.data[i]))
  end
  return s
end

function string.char(c: byte): string
  --TODO: handle more arguments
  local s: string = string._create(1)
  s.data[0] = c
  return s
end

global function tostring(x: auto): string
  ## if x.type.is_arithmetic or x.type.is_function or x.type.is_pointer then
    local size: cint
    ##[[
    local tyformat
    if x.type.is_function then
      tyformat = '"function: %p"'
    else
      tyformat = require'nelua.cdefs'.types_printf_format[x.type.codename]
    end
    staticassert(tyformat)
    cinclude '<stdio.h>'
    cinclude '<inttypes.h>'
    cemit('size = snprintf(NULL, 0, '..tyformat..', x);')
    ]]
    if unlikely(size <= 0) then return (@string){} end
    local s: string = string._create((@usize)(size))
    local dest: cstring = (@cstring)(&s.data[0])
    local n: csize = (@csize)(size+1)
    ## cemit('snprintf(dest, n, '..tyformat..', x);')
    ## if x.type.is_float then
      -- add a least one decimal if needed
      local onlydigits: boolean = true
      for i:usize=0,<s.size do
        if not (isdigit(s.data[i]) or s.data[i] == #[string.byte'-']#) then
          onlydigits = false
          break
        end
      end
      if onlydigits then
        s = s..'.0'
      end
    ## end
    return s
  ## elseif x.type.is_boolean then
    if x == true then
      return 'true'
    end
    return 'false'
  ## elseif x.type.is_stringy then
    return x
  ## elseif x.type.is_niltype then
    return 'nil'
  ## elseif x.type.is_lazyfunction then
    return 'lazyfunction'
  ## elseif x.type.is_record and x.type:get_metafield('__tostring') then
    return x:__tostring()
  ## else staticerror("tostring: cannot convert type '%s' to a string", x.type) end
end

local MAX_FORMAT <comptime> = 32

local function scanformat(strfmt: byte[0]*, form: byte[MAX_FORMAT]*): usize
  local L_FMTFLAGS: stringview <const> = "-+ #0"
  local p: usize = 0
  while strfmt[p] ~= 0 and strchr(L_FMTFLAGS, strfmt[p]) ~= nilptr do
    p = p + 1  -- skip flags
  end
  if p >= (#L_FMTFLAGS + 1) // #@byte then
    error("string.format: invalid format (repeated flags)")
  end
  if isdigit(strfmt[p]) ~= 0 then p = p + 1 end  -- skip width
  if isdigit(strfmt[p]) ~= 0 then p = p + 1 end  -- (2 digits at most)
  if strfmt[p] == #[string.byte'.']# then
    p = p + 1
    if isdigit(strfmt[p]) ~= 0 then p = p + 1 end -- skip precision
    if isdigit(strfmt[p]) ~= 0 then p = p + 1 end -- (2 digits at most)
  end
  if isdigit(strfmt[p]) ~= 0 then
    error("string.format: invalid format (width or precision too long)")
  end
  form[0] = #[string.byte'%']#
  memory.copy(&form[1], &strfmt[p], (p + 1) * #@byte)
  form[p + 2] = 0
  return p
end

local function addlenmod(form: byte[MAX_FORMAT]*, lenmod: cstring, lenmodsize: csize)
  local l: csize = strlen(&form[0])
  local spec: byte = form[l - 1]
  strcpy(&form[l - 1], lenmod)
  form[l + lenmodsize - 1] = spec
  form[l + lenmodsize] = 0
end

function string.format(fmt: stringview, arg1: auto): string
  -- TODO: properly handle multiple arguments
  local L_ESC: byte <comptime> = #[string.byte'%']#
  local MAX_ITEM <comptime> = 120
  local pos: usize = 0
  local b: stringbuffer
  local argi: integer = 0
  while pos < fmt.size do
    local c: byte = fmt.data[pos]
    pos = pos + 1
    if c ~= L_ESC then
      b:addbyte(c)
    else
      c = fmt.data[pos]
      if c == L_ESC then -- %%
        b:addbyte(L_ESC)
        pos = pos + 1
      else -- format item
        local form: byte[MAX_FORMAT] -- to store the format ('%...')
        local maxitem: usize = MAX_ITEM
        local buff: cstring = (@cstring)(b:prepare(MAX_ITEM)) -- to put formatted item
        local nb: cint = 0 -- number of bytes in added item
        -- scan format
        pos = pos + scanformat(&fmt.data[pos], &form)
        c = fmt.data[pos]
        pos = pos + 1
        argi = argi + 1
        assert(argi == 1, 'string.format: format with multiple arguments not supported yet')
        ## if primtypes.cint:is_convertible_from(arg1.type) then
          if c == #[string.byte'c']# then
            local n: cint = (@cint)(arg1)
            nb = snprintf_1ci(buff, maxitem, &form[0], n)
            goto next
          end
        ## end if primtypes.integer:is_convertible_from(arg1.type) then
          if c == #[string.byte'd']# or
             c == #[string.byte'i']# or
             c == #[string.byte'o']# or
             c == #[string.byte'u']# or
             c == #[string.byte'x']# or
             c == #[string.byte'X']# then
            local lenmod: cstring <noinit>
            ## cemit('lenmod = PRIi' .. primtypes.integer.bitsize .. ';')
            addlenmod(&form, lenmod, strlen(lenmod) - 1)
            local n: integer = (@integer)(arg1)
            nb = snprintf_1i(buff, maxitem, &form[0], n)
            goto next
          end
        ## end if primtypes.number:is_convertible_from(arg1.type) then
          if c == #[string.byte'a']# or
             c == #[string.byte'A']# or
             c == #[string.byte'f']# or
             c == #[string.byte'e']# or
             c == #[string.byte'E']# or
             c == #[string.byte'g']# or
             c == #[string.byte'G']# then
            local n: number = (@number)(arg1)
            nb = snprintf_1n(buff, maxitem, &form[0], n)
            goto next
          end
        ## end if primtypes.pointer:is_convertible_from(arg1.type) then
          if c == #[string.byte'p']# then
            local p: pointer = (@pointer)(arg1)
            if p == nilptr then
              strcpy(buff, "(null)")
              nb = 6
            else
              nb = snprintf_1p(buff, maxitem, &form[0], p)
            end
            goto next
          end
        ## end if arg1.type.is_stringy then
          if c == #[string.byte's']# then
            local s: stringview = arg1
            maxitem = s.size + 1
            buff = (@cstring)(b:prepare(maxitem))
            nb = snprintf_1cs(buff, maxitem, &form[0], arg1)
            goto next
          end
        ## end
        error('string.format: invalid conversion for format argument')
::next::
        assert(nb >= 0 and nb < maxitem,
          'string.format: unexpect number of bytes written in sprintf')
        b:commit((@usize)(nb))
      end
    end
  end
  return b:promotestring()
end

-- Concept to check if a value can possibly be a string.
local string_coercion_concept = #[concept(function(x)
  if x.type.is_stringy then
    return primtypes.stringview
  elseif x.type.is_arithmetic then
    return true
  end
end)]#

function string.__concat(a: string_coercion_concept, b: string_coercion_concept): string
  ## if not a.type.is_stringview then
  local a: string = tostring(a)
  ## end
  ## if not b.type.is_stringview then
  local b: string = tostring(b)
  ## end
  if a.size == 0 then
    return b
  elseif b.size == 0 then
    return a
  end
  local s: string = string._create(a.size + b.size)
  memory.copy(&s.data[0], a.data, a.size)
  memory.copy(&s.data[a.size], b.data, b.size)
  return s
end

-- Import methods from stringview to string.
global string.__len: auto = stringview.__len
global string.__eq: auto = stringview.__eq
global string.__lt: auto = stringview.__lt
global string.__le: auto = stringview.__le
global string.__add: auto = stringview.__add
global string.__sub: auto = stringview.__sub
global string.__mul: auto = stringview.__mul
global string.__div: auto = stringview.__div
global string.__idiv: auto = stringview.__idiv
global string.__mod: auto = stringview.__mod
global string.__pow: auto = stringview.__pow
global string.__unm: auto = stringview.__unm
global string.__band: auto = stringview.__band
global string.__bor: auto = stringview.__bor
global string.__bxor: auto = stringview.__bxor
global string.__shl: auto = stringview.__shl
global string.__shr: auto = stringview.__shr
global string.__bnot: auto = stringview.__bnot
global string.len: auto = stringview.len
global string.byte: auto = stringview.byte
global string.find: auto = stringview.find

-- Export string methods to stringview.
global stringview.__concat: auto = string.__concat
global stringview.rep: auto = string.rep
global stringview.sub: auto = string.sub
global stringview.reverse: auto = string.reverse
global stringview.upper: auto = string.upper
global stringview.lower: auto = string.lower
global stringview.format: auto = string.format

-- TODO: implement functions bellow
-- string:match(pattern, init)
-- string:gmatch(pattern)
-- string:gsub(pattern, repl, n)
-- string.pack(fmt, v1, v2, ..)
-- string.unpack(fmt, s, pos)
-- string.packsize(fmt)
