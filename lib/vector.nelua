-- Vector type
--
-- This type is typically used as an efficient vector.
-- Its elements starts at index 0 and go up to length-1 (like C arrays).
-- At the moment this should not be passed as value, only as reference.
--
-- By default it uses the garbage collector unless explicitly told not to do so,
-- thus by default there is no need to manually reset the vector.

require 'memory'
require 'utility'

## local make_vector = generalize(function(T, allocator)
  ## staticassert(traits.is_type(T), "invalid type '%s'", T)
  ## local codename = 'nelua_vector_'..T.codename
  ## if allocator then
  local allocator: type = #[allocator]#
  ## codename = codename..'_'..allocator.nick
  ## else
  require 'allocators.gc'
  local allocator: type = @gc_allocator
  ## end

  local T = @#[T]#
  local VectorT <codename #[codename]#> = @record {
    size: usize,
    data: span(T)
  }

  ## VectorT.value.is_contiguous = true
  ## VectorT.value.is_vector = true
  ## VectorT.value.subtype = T

  function VectorT:_grow()
    local cap: usize = 1
    if likely(self.data.size ~= 0) then cap = self.data.size * 2 end
    self.data = allocator.spanrealloc0(self.data, cap)
  end

  -- Resets and removes all elements from the vector.
  function VectorT:clear()
    for i:usize=0,<self.size do
      self.data[i] = (@T)()
    end
    self.size = 0
  end

  -- Resets the vector to zeroed state, freeing all used resources.
  -- This is more useful to free resources when not using the garbage collector.
  function VectorT:reset()
    self:clear()
    allocator.spandealloc(self.data)
    self.data = (@span(T)){}
    self.size = 0
  end

  -- Reserve at least `n` elements in the vector storage.
  function VectorT:reserve(n: usize <autocast>)
    if likely(self.data.size >= n) then return end
    self.data = allocator.spanrealloc0(self.data, n)
  end

  -- Resizes the vector so that it contains `n` elements.
  -- When expanding new elements are zero initialized.
  -- When shrinking removed elements are destroyed.
  function VectorT:resize(n: usize <autocast>, v: T)
    if n <= self.size then return end
    self:reserve(n)
    for i=self.size,<n do
      self.data[i] = v
    end
    self.size = n
  end

  -- Adds a element `v` at the end of the vector.
  function VectorT:push(v: T)
    local newsize: usize = self.size + 1
    if unlikely(newsize > self.data.size) then
      self:_grow()
    end
    self.data[self.size] = move(&v)
    self.size = newsize
  end

  -- Removes the last element in the vector and returns its value.
  -- If the vector is empty, then throws a runtime error.
  function VectorT:pop(): T
    check(self.size > 0, 'vector.pop: length is 0')
    self.size = self.size - 1
    return move(&self.data[self.size])
  end

  -- Inserts element `v` at position `pos` in the vector.
  -- Elements with index greater or equal than `pos` are shifted up.
  -- If the `pos` is out of range, then throws a runtime error.
  function VectorT:insert(pos: usize <autocast>, v: T)
    check(pos <= self.size, 'vector.insert: position out of bounds')
    if unlikely(self.size + 1 >= self.data.size) then
      self:_grow()
    end
    if self.size > pos then
      memory.move(&self.data[pos + 1], &self.data[pos], (self.size - pos) * #T)
      memory.zero(&self.data[pos], #T)
    end
    self.data[pos] = move(&v)
    self.size = self.size + 1
  end

  -- Removes element at position `pos` in the vector and returns its value.
  -- Elements with index greater than `pos` are shifted down.
  -- If the `pos` is out of range, then throws a runtime error.
  function VectorT:remove(pos: usize <autocast>): T
    check(pos < self.size, 'vector.remove: position out of bounds')
    self.size = self.size - 1
    local ret: T = move(&self.data[pos])
    memory.move(&self.data[pos], &self.data[pos+1], (self.size - pos) * #T)
    memory.zero(&self.data[self.size], #T)
    return ret
  end

  -- Returns reference to element at index `pos`.
  -- If `pos` is greater of equal to vector size, then throws a runtime error.
  function VectorT:__atindex(i: usize <autocast>): T* <inline>
    check(i < self.size, 'vector.at: position out of bounds')
    return &self.data[i]
  end

  -- Returns the number of elements the vector can store before triggering a reallocation.
  function VectorT:capacity(): isize
    return (@isize)(self.data.size)
  end

  -- Returns the number of elements in the vector.
  function VectorT:__len(): isize
    return (@isize)(self.size)
  end

  -- Initializes vector elements from a fixed array.
  -- This allows to use vector initialization with braces.
  function VectorT.__convert(values: #[concept(function(x)
    if x.type:is_array_of(T) then return true end
  end)]#): VectorT <inline>
    local self: VectorT
    self:reserve(#values)
    self.size = #values
    for i:usize=0,<#values do
      self.data[i] = values[i]
    end
    return self
  end
  ##[[VectorT.value.choose_braces_type = function(node)
    return types.ArrayType(nil, T, #node[1])
  end]]

  ## return VectorT
## end)

global vector: type = #[make_vector]#
