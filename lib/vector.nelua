-- Vector type
--
-- This type is typically used as an efficient vector.
-- Its elements starts at index 0 and go up to length-1 (like C arrays).
-- At the moment this should not be passed as value, only as reference.
--
-- By default it uses the garbage collector unless explicitly told not to do so,
-- thus by default there is no need to manually reset the vector.

require 'memory'
require 'iterators'

## local make_generic_vector = generalize(function(T, Allocator)
  ## static_assert(traits.is_type(T), "invalid type '%s'", T)
  ## if not Allocator then
  require 'allocators.default'
  ## Allocator = DefaultAllocator
  ## end

  local Allocator: type = #[Allocator]#
  local T: type = @#[T]#
  local vectorT <nickname #[string.format('vector(%s)', T)]#> = @record {
    size: usize,
    data: span(T),
    allocator: Allocator
  }

  ##[[
  local vectorT = vectorT.value
  vectorT.is_contiguous = true
  vectorT.is_vector = true
  vectorT.subtype = T
  vectorT.choose_braces_type = function(nodes) return types.ArrayType(T, #nodes) end
  ]]

  function vectorT:_grow()
    local cap: usize = 1
    if likely(self.data.size ~= 0) then cap = self.data.size * 2 end
    self.data = self.allocator:spanrealloc0(self.data, cap)
    check(self.data.size == cap, 'vector._grow: out of memory')
  end

  -- Create a vector using a custom allocator instance.
  -- This is only to be used when not using the default allocator.
  function vectorT.make(allocator: Allocator): vectorT
    local v: vectorT
    v.allocator = allocator
    return v
  end

  -- Removes all elements from the vector.
  function vectorT:clear()
    for i:usize=0,<self.size do
      self.data[i] = (@T)()
    end
    self.size = 0
  end

  -- Resets the vector to zeroed state, freeing all used resources.
  -- This is more useful to free resources when not using the garbage collector.
  function vectorT:destroy()
    self:clear()
    self.allocator:spandealloc(self.data)
    $self = (@vectorT)()
  end

  -- Reserve at least `n` elements in the vector storage.
  function vectorT:reserve(n: usize)
    if likely(self.data.size >= n) then return end
    self.data = self.allocator:spanrealloc0(self.data, n)
    check(self.data.size == n, 'vector.reserve: out of memory')
  end

  -- Resizes the vector so that it contains `n` elements.
  -- When expanding new elements are zero initialized.
  -- When shrinking removed elements are destroyed.
  function vectorT:resize(n: usize)
    self:reserve(n)
    for i:usize=n,<self.size do
      self.data[i] = (@T)()
    end
    self.size = n
  end

  -- Adds a element `v` at the end of the vector.
  function vectorT:push(v: T)
    local newsize: usize = self.size + 1
    if unlikely(newsize > self.data.size) then
      self:_grow()
    end
    memory.swapval(&self.data[self.size], &v)
    self.size = newsize
  end

  -- Removes the last element in the vector and returns its value.
  -- If the vector is empty, then throws a runtime error.
  function vectorT:pop(): T
    check(self.size > 0, 'vector.pop: attempt to pop an empty vector')
    self.size = self.size - 1
    return memory.moveval(&self.data[self.size])
  end

  -- Inserts element `v` at position `pos` in the vector.
  -- Elements with index greater or equal than `pos` are shifted up.
  -- If the `pos` is out of range, then throws a runtime error.
  function vectorT:insert(pos: usize, v: T)
    check(pos <= self.size, 'vector.insert: position out of bounds')
    if unlikely(self.size + 1 >= self.data.size) then
      self:_grow()
    end
    if self.size > pos then
      memory.move(&self.data[pos + 1], &self.data[pos], (self.size - pos) * #T)
      memory.zero(&self.data[pos], #T)
    end
    memory.swapval(&self.data[pos], &v)
    self.size = self.size + 1
  end

  -- Removes element at position `pos` in the vector and returns its value.
  -- Elements with index greater than `pos` are shifted down.
  -- If the `pos` is out of range, then throws a runtime error.
  function vectorT:remove(pos: usize): T
    check(pos < self.size, 'vector.remove: position out of bounds')
    self.size = self.size - 1
    local ret: T = memory.moveval(&self.data[pos])
    if self.size > pos then
      memory.move(&self.data[pos], &self.data[pos+1], (self.size - pos) * #T)
      memory.zero(&self.data[self.size], #T)
    end
    return ret
  end

  -- Removes the first item from the vector whose value is given.
  -- The remaining elements are shifted.
  -- Ruturns true if the an item was removed and false otherwise.
  function vectorT:remove_value(v: T): boolean
    for i:usize=0,<self.size do
      if self.data[i] == v then
        self:remove(i)
        return true
      end
    end
    return false
  end

  -- Removes all elements from the vector where `pred` function returns true.
  -- The remaining elements are shifted.
  function vectorT:remove_if(pred: #[concept(function(x) return x.type.is_function end)]#)
    local j: usize = 0
    for i:usize=0,<self.size do
      if not pred(self.data[i]) then
        self.data[j] = memory.moveval(&self.data[i])
        j = j + 1
      end
    end
    self.size = j
  end

  -- Returns the number of elements the vector can store before triggering a reallocation.
  function vectorT:capacity(): isize <inline,nosideeffect>
    return (@isize)(self.data.size)
  end

  -- Returns reference to element at index `pos`.
  -- If `pos` is greater of equal to vector size, then throws a runtime error.
  function vectorT:__atindex(i: usize): *T <inline>
    check(i < self.size, 'vector.at: position out of bounds')
    return &self.data[i]
  end

  -- Returns the number of elements in the vector.
  function vectorT:__len(): isize <inline,nosideeffect>
    return (@isize)(self.size)
  end

  -- Initializes vector elements from a fixed array.
  -- This allows to use vector initialization with braces.
  function vectorT.__convert(values: #[concept(function(x)
    if x.type:is_array_of(T) then return true end
  end)]#): vectorT <inline>
    local self: vectorT
    self:reserve(#values)
    self.size = #values
    for i:usize=0,<#values do
      self.data[i] = values[i]
    end
    return self
  end

  ## return vectorT
## end)

global vector: type = #[make_generic_vector]#
