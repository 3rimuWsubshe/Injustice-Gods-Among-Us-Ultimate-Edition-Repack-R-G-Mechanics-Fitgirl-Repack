-- Sequence type
--
-- This type is typically used as a more efficient lua table that can hold only sequences.
-- Its elements starts at index 1 and go up to its length (like lua tables).
-- Internally it just contains a pointer, so it's passed by reference by default
-- (like lua tables again).
--
-- By default it uses the garbage collector unless explicitly told not to do so,
-- thus by default there is no need to manually reset the sequence.

require 'memory'
require 'iterators'

## local make_generic_sequence = generalize(function(T, Allocator)
  ## static_assert(traits.is_type(T), "invalid type '%s'", T)
  ## if not Allocator then
  require 'allocators.default'
  ## Allocator = DefaultAllocator
  ## end

  local Allocator: type = #[Allocator]#
  local T: type = @#[T]#
  local sequenceimplT <nickname #[string.format('sequenceimpl(%s)', T)]#> = @record {
    data: span(T),
    size: usize
  }

  local sequenceT <nickname #[string.format('sequence(%s)', T)]#> = @record{
    impl: *sequenceimplT,
    allocator: Allocator
  }

  ##[[
  local sequenceT = sequenceT.value
  sequenceT.is_contiguous = true
  sequenceT.is_sequence = true
  sequenceT.is_oneindexing = true -- used in 'ipairs'
  sequenceT.subtype = T
  sequenceT.choose_braces_type = function(nodes) return types.ArrayType(T, #nodes) end
  ]]

  function sequenceT:_grow() <noinline>
    local cap: usize = 2
    if likely(self.impl.data.size ~= 0) then cap = self.impl.data.size * 2 end
    self.impl.data = self.allocator:spanxrealloc0(self.impl.data, cap)
  end

  -- Initializes sequence internal implementation if needed.
  -- This is already implicitly called by other sequence functions when needed.
  function sequenceT:init()
    if likely(self.impl) then return end
    self.impl = (@*sequenceimplT)(self.allocator:xalloc0(#sequenceimplT))
  end

  -- Removes all elements from the sequence.
  function sequenceT:clear()
    if not self.impl then return end
    if self.impl.data.size ~= 0 then
      for i:usize=0,self.impl.size do
        self.impl.data[i] = (@T)()
      end
    end
    self.impl.size = 0
  end

  -- Resets the sequence to zero state, freeing all used resources.
  -- This is more useful to free resources when not using the garbage collector.
  function sequenceT:destroy()
    if not self.impl then return end
    self:clear()
    self.allocator:spandealloc(self.impl.data)
    self.impl.data = {}
    self.allocator:dealloc(self.impl)
    self.impl = nilptr
  end

  -- Reserve at least `n` elements on the sequence storage.
  function sequenceT:reserve(n: usize)
    self:init()
    local cap: usize = n + 1
    if self.impl.data.size >= cap then return end
    self.impl.data = self.allocator:spanxrealloc0(self.impl.data, cap)
  end

  -- Resizes the sequence so that it contains `n` elements.
  -- When expanding new elements are zero initialized.
  -- When shrinking removed elements are destroyed.
  function sequenceT:resize(n: usize)
    self:reserve(n)
    for i:usize=n+1,self.impl.size do
      self.impl.data[i] = (@T)()
    end
    self.impl.size = n
  end

  -- Returns a shallow copy of the sequence, allocating new space.
  function sequenceT:copy(): sequenceT
    local clone: sequenceT
    if self.impl then
      clone:init()
      clone.impl.data = self.allocator:spanxalloc(@T, self.impl.data.size)
      clone.impl.size = self.impl.size
      memory.spancopy(clone.impl.data, self.impl.data)
    end
    clone.allocator = self.allocator
    return clone
  end

  -- Adds a new element at the end of the sequence.
  function sequenceT:push(v: T) <inline>
    self:init()
    self.impl.size = self.impl.size + 1
    if unlikely(self.impl.size + 1 >= self.impl.data.size) then
      self:_grow()
    end
    self.impl.data[self.impl.size] = v
  end

  -- Removes the last element in the sequence and returns its value.
  -- If the sequence is empty, then throws a runtime error.
  function sequenceT:pop(): T <inline>
    check(self.impl and self.impl.size > 0, 'sequence.pop: length is 0')
    local ret: T = self.impl.data[self.impl.size]
    self.impl.size = self.impl.size - 1
    return ret
  end

  -- Inserts element `v` at position `pos` in the sequence.
  -- Elements with index greater or equal than `pos` are shifted up.
  -- If the `pos` is out of range, then throws a runtime error.
  function sequenceT:insert(pos: usize, v: T)
    self:init()
    check(pos > 0 and pos <= self.impl.size + 1, 'sequence.insert: position out of bounds')
    if unlikely(self.impl.size + 2 >= self.impl.data.size) then
      self:_grow()
    end
    self.impl.size = self.impl.size + 1
    if self.impl.size > pos then
      memory.move(&self.impl.data[pos + 1], &self.impl.data[pos], (self.impl.size - pos) * #T)
      memory.zero(&self.impl.data[pos], #T)
    end
    self.impl.data[pos] = v
  end

  -- Removes element at position `pos` in the sequence and returns its value.
  -- Elements with index greater than `pos` are shifted down.
  -- If the `pos` is out of range, then throws a runtime error.
  function sequenceT:remove(pos: usize): T
    check(self.impl and self.impl.size > 0, 'sequence.remove: position out of bounds')
    local ret: T = self.impl.data[pos]
    if self.impl.size > pos then
      memory.move(&self.impl.data[pos], &self.impl.data[pos+1], (self.impl.size - pos) * #T)
      memory.zero(&self.impl.data[self.impl.size], #T)
    end
    self.impl.size = self.impl.size - 1
    return ret
  end

  -- Removes the first item from the sequence whose value is given.
  -- The remaining elements are shifted.
  -- Ruturns true if the an item was removed and false otherwise.
  function sequenceT:remove_value(v: T): boolean
    if not self.impl then return false end
    for i:usize=1,self.impl.size do
      if self.impl.data[i] == v then
        self:remove(i)
        return true
      end
    end
    return false
  end

  -- Removes all elements from the sequence where `pred` function returns true.
  -- The remaining elements are shifted.
  function sequenceT:remove_if(pred: function(v: T): boolean)
    if not self.impl then return end
    local j: usize = 1
    for i:usize=1,self.impl.size do
      if not pred(self.impl.data[i]) then
        self.impl.data[j] = self.impl.data[i]
        j = j + 1
      end
    end
    self.impl.size = j - 1
  end

  -- Returns the number of elements the sequence can store before triggering a reallocation.
  function sequenceT:capacity(): isize <inline,nosideeffect>
    if unlikely(not self.impl or self.impl.data.size == 0) then return 0 end
    return (@isize)(self.impl.data.size) - 1
  end

  -- Returns reference to element at index `i`.
  -- If `i` is the sequence size plus 1, then a zeroed element is added and return its reference.
  -- If `i` is larger then the sequence size plus 1, then throws a runtime error.
  function sequenceT:__atindex(i: usize): *T <inline>
    self:init()
    if unlikely(i > self.impl.size) then
      check(i == self.impl.size + 1, 'sequence.__atindex: position out of bounds')
      self.impl.size = self.impl.size + 1
    end
    if unlikely(self.impl.size + 1 > self.impl.data.size) then
      self:_grow()
    end
    return &self.impl.data[i]
  end

  -- Returns the number of elements in the sequence. It never counts the element at 0.
  function sequenceT:__len(): isize <inline,nosideeffect>
    if unlikely(not self.impl) then return 0 end
    return (@isize)(self.impl.size)
  end

  -- Initializes sequence elements from a fixed array.
  -- This allows to use sequence initialization with braces.
  function sequenceT.__convert(values: #[concept(function(x)
    if x.type:is_array_of(T) then return true end
  end)]#): sequenceT <inline>
    local self: sequenceT
    self:reserve(#values)
    self.impl.size = #values
    for i:usize=1,#values do
      self.impl.data[i] = values[i-1]
    end
    return self
  end

  ## return sequenceT
## end)

global sequence = #[make_generic_sequence]#
