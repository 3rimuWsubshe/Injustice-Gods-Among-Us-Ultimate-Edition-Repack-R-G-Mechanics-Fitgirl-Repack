-- String Builder
--
-- This class is used to build dynamic sized strings, configurable with custom allocators.
-- Use it when you don't want to use the GC and want to manage your strings memory.
--
-- It is used by string class to compose formatted strings.

require 'span'
require 'memory'
require 'string'

-- C imports
local function isdigit(x: cint): cint <cimport,cinclude'<ctype.h>',nodecl,nosideeffect> end
local function snprintf(s: cstring, maxlen: csize, format: cstring, ...: cvarargs): cint <cimport'snprintf',cinclude'<stdio.h>',nodecl> end

-- format utilities
local MAX_FORMAT <comptime> = 32
local MAX_ITEM <comptime> = 120

local function scanformat(strfmt: *[0]byte, form: *[MAX_FORMAT]byte): usize
  local L_FMTFLAGS: string <comptime> = "-+ #0"
  local p: usize = 0
  while strfmt[p] ~= 0 and memory.scan(L_FMTFLAGS.data, strfmt[p], #L_FMTFLAGS) ~= nilptr do
    p = p + 1  -- skip flags
  end
  assert(p < L_FMTFLAGS.size + 1, "invalid format (repeated flags)")
  if isdigit(strfmt[p]) ~= 0 then p = p + 1 end  -- skip width
  if isdigit(strfmt[p]) ~= 0 then p = p + 1 end  -- (2 digits at most)
  if strfmt[p] == '.'_byte then
    p = p + 1
    if isdigit(strfmt[p]) ~= 0 then p = p + 1 end -- skip precision
    if isdigit(strfmt[p]) ~= 0 then p = p + 1 end -- (2 digits at most)
  end
  assert(isdigit(strfmt[p]) == 0, "invalid format (width or precision too long)")
  form[0] = '%'_byte
  memory.copy(&form[1], &strfmt[0], p + 1)
  form[p + 2] = 0
  return p
end

local function addlenmod(form: *[MAX_FORMAT]byte, lenmod: cstring, lenmodsize: csize): void
  local l: csize = #(@cstring)(&form[0])
  local spec: byte = form[l - 1]
  memory.copy(&form[l - 1], lenmod, lenmodsize)
  form[l + lenmodsize - 1] = spec
  form[l + lenmodsize] = 0
end

-- the string builder with custom allocators
## local make_generic_stringbuilder = generalize(function(Allocator)
  ## if not Allocator then
  require 'allocators.default'
  ## Allocator = DefaultAllocator
  ## end

  local Allocator: type = #[Allocator]#

  local INIT_CAPACITY <comptime> = 128

  local stringbuilderT: type = @record {
    data: span(byte),
    size: usize,
    allocator: Allocator
  }

  function stringbuilderT:destroy(): void
    self.allocator:spandealloc(self.data)
    $self = (@stringbuilderT)()
  end

  function stringbuilderT:clear(): void
    self.size = 0
  end

  function stringbuilderT:prepare(size: usize): *[0]byte
    -- allocate 1 additional byte to allow casting to cstring
    local needed: usize = self.size + size + 1
    local cap: usize = self.data.size
    if unlikely(needed > cap) then
      if unlikely(cap == 0) then
        cap = INIT_CAPACITY
      end
      repeat cap = cap * 2 until cap >= needed
      self.data = self.allocator:spanrealloc0(self.data, cap)
      if unlikely(self.data.size ~= cap) then
        -- reallocation failed, try to allocate the minimum
        self.data = self.allocator:spanrealloc0(self.data, needed)
        if self.data.size ~= needed then
          return nilptr
        end
      end
    end
    return (@*[0]byte)(&self.data[self.size])
  end

  function stringbuilderT:commit(size: usize): void
    local newsize: usize = self.size + size
    check(newsize <= self.data.size, 'not enough space in string buffer')
    self.size = newsize
  end

  function stringbuilderT:write_byte(c: byte): boolean
    local p: *[0]byte = self:prepare(1)
    if unlikely(p == nilptr) then return false end
    p[0] = c
    self.size = self.size + 1
    return true
  end

  function stringbuilderT:write_string(s: string): boolean
    local p: *[0]byte = self:prepare(s.size)
    if unlikely(p == nilptr) then return false end
    memory.copy(p, s.data, s.size)
    self.size = self.size + s.size
    return true
  end

  local function formatarg(self: *stringbuilderT, c: byte,
                           buff: cstring, maxitem: usize, form: *[MAX_FORMAT]byte, arg1: auto): (boolean, cint)
    local nb: cint = -1
    ## if primtypes.cint:is_convertible_from(arg1.type) then
      if c == 'c'_byte then
        local n: cint = (@cint)(arg1)
        nb = snprintf(buff, maxitem, &form[0], n)
        goto next
      end
    ## end if primtypes.integer:is_convertible_from(arg1.type) then
      if c == 'd'_byte or
         c == 'i'_byte or
         c == 'o'_byte or
         c == 'u'_byte or
         c == 'x'_byte or
         c == 'X'_byte then
        local lenmod: cstring <cimport #['PRIi' .. primtypes.integer.bitsize]#,nodecl,cinclude'<inttypes.h>'>
        addlenmod(form, lenmod, #lenmod - 1)
        local n: integer = (@integer)(arg1)
        nb = snprintf(buff, maxitem, &form[0], n)
        goto next
      end
    ## end if primtypes.number:is_convertible_from(arg1.type) then
      if c == 'a'_byte or
         c == 'A'_byte or
         c == 'f'_byte or
         c == 'e'_byte or
         c == 'E'_byte or
         c == 'g'_byte or
         c == 'G'_byte then
        local n: number = (@number)(arg1)
        nb = snprintf(buff, maxitem, &form[0], n)
        goto next
      end
    ## end if primtypes.pointer:is_convertible_from(arg1.type) then
      if c == 'p'_byte then
        local p: pointer = (@pointer)(arg1)
        if p == nilptr then
          memory.copy(buff, "(null)"_cstring, 7)
          nb = 6
        else
          nb = snprintf(buff, maxitem, &form[0], p)
        end
        goto next
      end
    ## end
    if c == 's'_byte then
      ## if arg1.type.is_stringy then
      local s: string = (@string)(arg1)
      ## else
      local s: string = tostring(arg1)
      ## end
      maxitem = s.size + 1
      buff = (@cstring)(self:prepare(maxitem))
      if buff then
        if form[1] == c and form[2] == 0 then -- just copy the string
          memory.copy(buff, s.data, s.size)
          nb = s.size
        else
          ## if arg1.type.is_string then
          -- the string may not be null terminated (in case of a string view)
          -- copy to force null termination
          -- TODO: this may be expansive, should we implement a custom snprintf later?
          s = string.copy(s)
          ## end
          nb = snprintf(buff, maxitem, &form[0], s.data)
          ## if arg1.type.is_string then
          s:destroy()
          ## end
        end
      end
      ## if not arg1.type.is_stringy then
      s:destroy()
      ## end
      if not buff then
        return false, 0
      end
      goto next
    end
    assert(false, 'invalid format for argument')
  ::next::
    assert(nb >= 0 and nb < (@isize)(maxitem), 'unexpected number of bytes written in sprintf')
    return true, nb
  end

  function stringbuilderT:write_format(fmt: string, ...: varargs): boolean
    local L_ESC: byte <comptime> = '%'_byte
    local pos: usize = 0
    local argi: int32 = 0
    while pos < fmt.size do
      local c: byte = fmt.data[pos]
      pos = pos + 1
      if c ~= L_ESC then
        if not self:write_byte(c) then return false end
      else
        c = fmt.data[pos]
        if c == L_ESC then -- %%
          if not self:write_byte(L_ESC) then return false end
          pos = pos + 1
        else -- format item
          local form: [MAX_FORMAT]byte -- to store the format ('%...')
          local maxitem: usize = MAX_ITEM
          local buff: cstring = (@cstring)(self:prepare(MAX_ITEM)) -- to put formatted item
          if not buff then
            return false
          end
          -- scan format
          pos = pos + scanformat(&fmt.data[pos], &form)
          c = fmt.data[pos]
          pos = pos + 1
          argi = argi + 1
          local ok: boolean
          local nb: cint = -1
          ## for i=1,select('#', ...) do
          if #[i]# == argi then
            ok, nb = formatarg(self, c, buff, maxitem, &form, #[select(i, ...)]#)
            goto next
          end
          ## end
          ::next::
          if not ok then
            return false
          end
          assert(nb >= 0, 'missing argument in format')
          self:commit((@usize)(nb))
        end
      end
    end
    return true
  end

  function stringbuilderT:view(): string
    if unlikely(self.size == 0) then return (@string){} end
    return (@string){data = &self.data[0], size = self.size}
  end

  function stringbuilderT:__tostring(): string
    local s: string = string._create(self.size)
    memory.copy(&s.data[0], &self.data[0], self.size)
    return s
  end

  ## return stringbuilderT
## end)

global stringbuilder: type = #[make_generic_stringbuilder()]#

-- This allows instantiating `stringbuilder` as generic too.
## stringbuilder.value.generic = types.GenericType(make_generic_stringbuilder)

-- Promote a `stringbuilder` to a `string`, forwarding its allocated memory and resetting it.
function stringbuilder:promote(): string
  if unlikely(self.size == 0) then
    return (@string){}
  end
  local size: usize = self.size
  local data: span(byte) = self.allocator:spanxrealloc(self.data, size + 1) -- shrink
  data[size] = 0 -- cstring line ending
  $self = {} -- destroy
  return (@string){data = data.data, size = size}
end

function stringbuilder.make(allocator: auto)
  return (@stringbuilder(#[allocator.type]#)){allocator = allocator}
end
