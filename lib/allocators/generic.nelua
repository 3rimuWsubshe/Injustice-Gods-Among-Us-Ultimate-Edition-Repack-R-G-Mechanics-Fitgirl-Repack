local function memset(s: pointer, c: cint, n: csize): pointer <cimport'memset',cinclude'<string.h>',nodecl> end
local function malloc(size: csize): pointer <cimport'malloc',cinclude'<stdlib.h>',nodecl> end
local function calloc(nmemb: csize, size: csize): pointer <cimport'calloc',cinclude'<stdlib.h>',nodecl> end
local function realloc(ptr: pointer, size: csize): pointer <cimport'realloc',cinclude'<stdlib.h>',nodecl> end
local function free(ptr: pointer): void <cimport'free',cinclude'<stdlib.h>',nodecl> end

global generic_allocator = @record{}

function generic_allocator.alloc(size: usize): pointer <inline>
  check(size > 0_u, 'generic_allocator.alloc: size cannot be zero')
  return malloc(size)
end

function generic_allocator.alloc0(size: usize): pointer <inline>
  check(size > 0_u, 'generic_allocator.alloc0: size must be greater than 0')
  return calloc(size, 1)
end

function generic_allocator.realloc(p: pointer, size: usize): pointer <inline>
  if unlikely(size == 0_u) then
    free(p)
    return nilptr
  end
  return realloc(p, size)
end

function generic_allocator.realloc0(p: pointer, newsize: usize, oldsize: usize): pointer <inline>
  if unlikely(newsize == 0) then
    free(p)
    return nilptr
  end
  p = realloc(p, newsize)
  if likely(newsize > oldsize and p ~= nilptr) then
    memset(&(@byte[0]*)(p)[oldsize], 0, newsize - oldsize)
  end
  return p
end

function generic_allocator.dealloc(p: pointer) <inline>
  free(p)
end

require 'allocators.interface'

## implement_allocator_interface(generic_allocator)
