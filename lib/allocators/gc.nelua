-- GC Allocator
-- This is an allocator that uses a tiny and simple mark and sweep garbage collector.
-- It is a conservative garbage collector, that is, it scan the stack/heap memory
-- marking pointers without references to be freed once the memory grow too much.
--
-- The implementation is based on https://github.com/orangeduck/tgc

require 'span'
require 'allocators.general'

##[[
if pragmas.nogc then
  static_error 'allocators.gc was required while GC is explicitly disabled'
end
pragmas.nochecks = true
cemitdecl[=[
#if defined(__has_feature)
#if __has_feature(address_sanitizer)
#define NELUA_GC_NO_SANITIZE __attribute__((no_sanitize_address))
#elif __has_feature(memory_sanitizer)
#define NELUA_GC_NO_SANITIZE __attribute__((no_sanitize_memory))
#endif
#elif defined(__SANITIZE_ADDRESS__)
#define NELUA_GC_NO_SANITIZE __attribute__((no_sanitize_address))
#endif
#ifndef NELUA_GC_NO_SANITIZE
#define NELUA_GC_NO_SANITIZE
#endif
]=]
]]

local jmp_buf <cimport,cinclude'<setjmp.h>',nodecl> = @record{dummy: usize}
local function setjmp(env: jmp_buf): void <cimport,cinclude'<setjmp.h>',nodecl> end
local function memcpy(dest: pointer, src: pointer, n: csize): pointer <cimport,cinclude'<string.h>',nodecl> end
local function memset(s: pointer, c: cint, n: csize): pointer <cimport,cinclude'<string.h>',nodecl> end

local allocator: auto = general_allocator

global GCFlags = @enum(usize) {
  MARK = 1, -- marked for collection, used internally
  ROOT = 2, -- should not never be freed
  LEAF = 4, -- contains no pointers to other allocations inside
  SIZED_FINALIZER = 8,  -- finalizer will have a size parameter
  NO_DEALLOC = 16, -- allocated by some external allocator, should not be automatically freed
}
local UINTPTR_MAX: usize <cimport'UINTPTR_MAX',cinclude'<stdint.h>',nodecl>

local FinalizerCallback = @function(p: pointer): void
local SizedFinalizerCallback = @function(p: pointer, size: usize): void

local GCItem = @record{
  ptr: pointer,
  flags: usize,
  size: usize,
  hash: usize,
  finalizer: pointer,
}

local GC = @record{
  bottom: pointer,
  stopped: boolean,
  minptr: usize, maxptr: usize,
  items: span(GCItem), frees: span(GCItem),
  loadfactor: number, sweepfactor: number,
  nitems: usize, nslots: usize, mitems: usize, nfrees: usize,
  membytes: usize,
}

function GCItem:finalize(): void
  if self.finalizer then
    if self.flags & GCFlags.SIZED_FINALIZER == 0 then
      local finalizer: FinalizerCallback = (@FinalizerCallback)(self.finalizer)
      finalizer(self.ptr)
    else
      local finalizer: SizedFinalizerCallback = (@SizedFinalizerCallback)(self.finalizer)
      finalizer(self.ptr, self.size)
    end
  end
end

global gc: GC

function GC:_hash(ptr: pointer): usize
  return (@usize)(ptr) >> 3
end

function GC:_probe(i: usize, h: usize): usize
  local v: isize = (@isize)(i) - ((@isize)(h) - 1_isize)
  if v < 0 then
    v = (@isize)(self.nslots) + v
  end
  return (@usize)(v)
end

function GC:_get_ptr(ptr: pointer): *GCItem
  if self.nslots == 0 then
    return nilptr
  end
  local i: usize = self:_hash(ptr) % self.nslots
  local j: usize = 0
  while true do
    local h: usize = self.items[i].hash
    if h == 0 or j > self:_probe(i, h) then
      return nilptr
    end
    if self.items[i].ptr == ptr then
      return &self.items[i]
    end
    i = (i + 1) % self.nslots
    j = j + 1
  end
  return nilptr
end

function GC:_add_ptr(ptr: pointer, size: usize, flags: usize, finalizer: pointer, rehash: boolean): void
  local i: usize = self:_hash(ptr) % self.nslots
  local item: GCItem = {
    ptr = ptr,
    flags = flags,
    size = size,
    hash = i+1,
    finalizer = finalizer
  }

  local j: usize = 0
  while true do
    local h: usize = self.items[i].hash
    if h == 0 then
      self.items[i] = item
      if not rehash and flags & GCFlags.ROOT == 0 then
        self.membytes = self.membytes + size
      end
      return
    end
    if self.items[i].ptr == item.ptr then
      return
    end
    local p: usize = self:_probe(i, h)
    if j >= p then
      self.items[i], item = item, self.items[i]
      j = p
    end
    i = (i+1) % self.nslots
    j = j + 1
  end
end

function GC:_remove_ptr(ptr: pointer): void
  if self.nitems == 0 then
    return
  end

  for i:usize=0,<self.nfrees do
    if self.frees[i].ptr == ptr then
      self.frees[i].ptr = nilptr
    end
  end

  local i: usize = self:_hash(ptr) % self.nslots
  local j: usize = 0
  while true do
    local item: *GCItem = &self.items[i]
    local h: usize = item.hash
    if h == 0 or j > self:_probe(i, h) then
      return
    end
    if item.ptr == ptr then
      if item.flags & GCFlags.ROOT == 0 then
        self.membytes = self.membytes - item.size
      end
      memset(item, 0, #GCItem)
      j = i
      while true do
        local nj: usize = (j+1) % self.nslots
        local nh: usize = self.items[nj].hash
        if nh ~= 0 and self:_probe(nj, nh) > 0 then
          memcpy(&self.items[j], &self.items[nj], #GCItem)
          memset(&self.items[nj], 0, #GCItem)
          j = nj
        else
          break
        end
      end
      self.nitems = self.nitems - 1
      return
    end
    i = (i+1) % self.nslots
    j = j + 1
  end
end

local GC_PRIMES_COUNT <comptime> = 24
local GC_primes: [GC_PRIMES_COUNT]usize <const> = {
  0,       1,       5,       11,
  23,      53,      101,     197,
  389,     683,     1259,    2417,
  4733,    9371,    18617,   37097,
  74093,   148073,  296099,  592019,
  1100009, 2200013, 4400021, 8800019
}

function GC:_ideal_size(size: usize): usize
  size = (@usize)((size+1) / self.loadfactor)
  for i:usize=0,<GC_PRIMES_COUNT do
    if GC_primes[i] >= size then
      return GC_primes[i]
    end
  end
  local last: usize = GC_primes[GC_PRIMES_COUNT-1]
  local i: usize = 0
  while true do
    if last * i >= size then
      return last * i
    end
    i = i + 1
  end
  return 0
end

function GC:_rehash(newsize: usize): boolean
  local olditems: span(GCItem) = self.items
  local oldsize: usize = self.nslots

  self.nslots = newsize
  self.items = allocator:spanalloc0(@GCItem, self.nslots)

  if self.items.size == 0 then
    self.nslots = oldsize
    self.items = olditems
    return false
  end

  for i:usize=0,<oldsize do
    local olditem: *GCItem = &olditems[i]
    if olditem.hash ~= 0 then
      self:_add_ptr(olditem.ptr, olditem.size, olditem.flags, olditem.finalizer, true)
    end
  end
  allocator:spandealloc(olditems)
  return true
end

function GC:_resize_more(): boolean
  local newsize: usize = self:_ideal_size(self.nitems)
  local oldsize: usize = self.nslots
  if newsize > oldsize then
    return self:_rehash(newsize)
  else
    return true
  end
end

function GC:_resize_less(): boolean
  local newsize: usize = self:_ideal_size(self.nitems)
  local oldsize: usize = self.nslots
  if newsize < oldsize then
    return self:_rehash(newsize)
  else
    return true
  end
end

function GC:_unmark_all(): void <noinline>
  for i:usize=0,<self.nslots do
    self.items[i].flags = self.items[i].flags & ~GCFlags.MARK
  end
end

function GC:_mark_ptr(ptr: pointer): void <noinline, cqualifier'NELUA_GC_NO_SANITIZE'>
  if (@usize)(ptr) < self.minptr or (@usize)(ptr) > self.maxptr then
    return
  end

  local i: usize = self:_hash(ptr) % self.nslots
  local j: usize = 0

  while true do
    local h: usize = self.items[i].hash
    if h == 0 or j > self:_probe(i, h) then
      return
    end
    if ptr == self.items[i].ptr then
      if self.items[i].flags & GCFlags.MARK ~= 0 then
        return
      end
      self.items[i].flags = self.items[i].flags | GCFlags.MARK
      if self.items[i].flags & GCFlags.LEAF ~= 0 then
        return
      end
      for k:usize=0,<(self.items[i].size // #@pointer) do
        self:_mark_ptr(((@*[0]pointer)(self.items[i].ptr))[k])
      end
      return
    end
    i = (i+1) % self.nslots
    j = j + 1
  end
end

function GC:_mark_stack(): void <cqualifier'NELUA_GC_NO_SANITIZE'>
  local stk: pointer <volatile>
  local bot: usize = (@usize)(self.bottom)
  local top: usize = (@usize)(&stk)
  if bot < top then
    bot, top = top, bot
  end
  for pi:usize=top,<=bot,#@pointer do
    self:_mark_ptr($(@*pointer)(pi))
  end
end

function GC:_mark(): void <noinline>
  if self.nitems == 0 then
    return
  end

  self:_unmark_all()

  for i:usize=0,<self.nslots do
    if self.items[i].hash == 0 or
       self.items[i].flags & GCFlags.MARK ~= 0 then
      continue
    end
    if self.items[i].flags & GCFlags.ROOT ~= 0 then
      self.items[i].flags = self.items[i].flags | GCFlags.MARK
      if self.items[i].flags & GCFlags.LEAF ~= 0 then
        continue
      end
      for k:usize=0,<self.items[i].size//(@usize)(#@pointer) do
        self:_mark_ptr(((@*[0]pointer)(self.items[i].ptr))[k])
      end
    end
  end

  -- dump registers into the stack
## if not ccinfo.is_wasm then
  local env: jmp_buf
  setjmp(env)
  local mark_stack: auto <volatile> = GC._mark_stack -- to avoid inline
  mark_stack(self)
## end
end

function GC:_sweep(): void <noinline>
  if self.nitems == 0 then
    return
  end

  self.nfrees = 0
  for j:usize=0,<self.nslots do
    if not (self.items[j].hash == 0 or
            self.items[j].flags & GCFlags.MARK ~= 0 or
            self.items[j].flags & GCFlags.ROOT ~= 0) then
      self.nfrees = self.nfrees + 1
    end
  end

  self.frees = allocator:spanrealloc(self.frees, self.nfrees)
  if self.frees.size ~= self.nfrees then
    return
  end

  local i: usize = 0
  local k: usize = 0
  while i < self.nslots do
    if self.items[i].hash == 0 or
       self.items[i].flags & GCFlags.MARK ~= 0 or
       self.items[i].flags & GCFlags.ROOT ~= 0 then
      i = i + 1
      continue
    end

    local item: *GCItem = &self.items[i]
    self.frees[k] = $item
    k = k + 1
    if item.flags & GCFlags.ROOT == 0 then
      self.membytes = self.membytes - item.size
    end
    memset(item, 0, #GCItem)

    local j: usize = i
    while true do
      local nj: usize = (j+1) % self.nslots
      local nh: usize = self.items[nj].hash
      if nh ~= 0 and self:_probe(nj, nh) > 0 then
        memcpy(&self.items[j], &self.items[nj], #GCItem)
        memset(&self.items[nj], 0, #GCItem)
        j = nj
      else
        break
      end
    end
    self.nitems = self.nitems - 1
  end

  self:_resize_less()

  self.mitems = self.nitems + (@usize)(self.nitems * self.sweepfactor) + 1

  for j:usize=0,<self.nfrees do
    if self.frees[j].ptr then
      self.frees[j]:finalize()
      if self.frees[j].flags & GCFlags.NO_DEALLOC == 0 then
        allocator:dealloc(self.frees[j].ptr)
      end
    end
  end

  allocator:spandealloc(self.frees)
  self.frees = {}
  self.nfrees = 0
end

function GC:_mark_statics(): void
  ## local emit_mark_statics = hygienize(function(staticsyms)
    ## for i=1,#staticsyms do
      ## local sym = staticsyms[i]
      gc:add(&#[sym]#, # #[sym.type]#, GCFlags.ROOT, nilptr)
    ## end
  ## end)

  ##[[
  after_analyze(function()
    local symbols = {}
    local function search_scope(scope)
      for i=1,#scope.symbols do
        local sym = scope.symbols[i]
        if sym:is_on_static_storage() and
           sym.type:has_pointer() and
           not sym.cimport and
           sym ~= gc then
          symbols[#symbols+1] = sym
        end
      end
    end
    search_scope(context.rootscope)
    for _,childscope in ipairs(context.rootscope.children) do
      search_scope(childscope)
    end
    emit_mark_statics(symbols)
  end)
  ]]
end

function GC:stop(): void
  self.stopped = true
end

function GC:restart(): void
## if not ccinfo.is_wasm then -- cannot run automatically on emscripten
  self.stopped = false
## end
end

function GC:init(stack: pointer): void
  $self = {}
  self.bottom = stack
  self.minptr = UINTPTR_MAX
  self.loadfactor = 0.9
  self.sweepfactor = 0.5
  self.stopped = true
  self:_mark_statics()
  self:restart()
end

function GC:terminate(): void
  self:_unmark_all()
  self:_sweep()
  allocator:spandealloc(self.items)
  allocator:spandealloc(self.frees)
  $self = {}
  self.stopped = true
end

function GC:isrunning(): boolean
  return not self.stopped
end

function GC:count(): number
  return self.membytes / 1024.0
end

function GC:collect(): void
  self:_mark()
  self:_sweep()
end

function GC:_add(ptr: pointer, size: usize, flags: usize, finalizer: pointer): boolean
  self.nitems = self.nitems + 1

  local uptr: usize = (@usize)(ptr)
  if uptr + size > self.maxptr then
    self.maxptr = uptr + size
  end
  if uptr < self.minptr then
    self.minptr = uptr
  end

  if self:_resize_more() then
    self:_add_ptr(ptr, size, flags, finalizer, false)
    if not self.stopped and self.nitems > self.mitems then
      self:collect()
    end
    return true
  else
    self.nitems = self.nitems - 1
    return false
  end
end

function GC:add(ptr: pointer, size: usize, flags: usize, finalizer: pointer): boolean
  return self:_add(ptr, size, flags | GCFlags.NO_DEALLOC, finalizer)
end

function GC:remove(ptr: pointer): void
  self:_remove_ptr(ptr)
  self:_resize_less()
  self.mitems = self.nitems + self.nitems // 2 + 1
end

function GC:_alloc(ptr: pointer, size: usize, flags: usize, finalizer: pointer): pointer
  if ptr then
    if not self:_add(ptr, size, flags, finalizer) then
      allocator:dealloc(ptr)
      ptr = nilptr
    end
  end
  return ptr
end

function GC:alloc_opt(size: usize, flags: usize, finalizer: pointer): pointer
  local ptr: pointer = allocator:alloc(size)
  return self:_alloc(ptr, size, flags, finalizer)
end

function GC:alloc0_opt(size: usize, flags: usize, finalizer: pointer): pointer
  local ptr: pointer = allocator:alloc0(size)
  return self:_alloc(ptr, size, flags, finalizer)
end

function GC:_realloc(qtr: pointer, ptr: pointer, size: usize): pointer
  if not qtr then
    self:remove(ptr)
    return nilptr
  end

  if not ptr then
    if not self:_add(qtr, size, 0, nilptr) then
      allocator:dealloc(qtr)
      qtr = nilptr
    end
    return qtr
  end

  local p: *GCItem = self:_get_ptr(ptr)
  if p then
    if qtr == ptr then
      p.size = size
    else
      local flags: usize = p.flags
      local finalizer: pointer = p.finalizer
      self:remove(ptr)
      self:_add(qtr, size, flags, finalizer)
    end
    return qtr
  end
  return nilptr
end

function GC:realloc(ptr: pointer, size: usize, oldsize: usize): pointer
  local qtr: pointer = allocator:realloc(ptr, size, oldsize)
  if not qtr then return nilptr end
  return self:_realloc(qtr, ptr, size)
end

function GC:realloc0(ptr: pointer, size: usize, oldsize: usize): pointer
  local qtr: pointer = allocator:realloc0(ptr, size, oldsize)
  if not qtr then return nilptr end
  return self:_realloc(qtr, ptr, size)
end

function GC:dealloc(ptr: pointer): void
  local p: *GCItem = self:_get_ptr(ptr)
  if p then
    p:finalize()
    allocator:dealloc(ptr)
    self:remove(ptr)
  end
end

## if not pragmas.nogcentry then
local function nelua_main(argc: cint, argv: *cstring): cint <cimport,nodecl> end

local function main(argc: cint, argv: *cstring): cint <entrypoint>
  gc:init(&argc)
  local inner_main: auto <volatile> = nelua_main -- at avoid inlining
  local ret: cint = inner_main(argc, argv)
  gc:terminate()
  return ret
end
## end

require 'allocators.interface'

global GCAllocator = @record{}

function GCAllocator:alloc(size: usize, flags: facultative(usize), finalizer: facultative(FinalizerCallback)): pointer <noinline>
  ## if flags.type.is_niltype then
  local flags: usize = 0
  ## end
  ## if finalizer.type.is_niltype then
  local finalizer: pointer = nilptr
  ## end
  return gc:alloc_opt(size, flags, finalizer)
end

function GCAllocator:alloc0(size: usize, flags: facultative(usize), finalizer: facultative(FinalizerCallback)): pointer <noinline>
  ## if flags.type.is_niltype then
  local flags: usize = 0
  ## end
  ## if finalizer.type.is_niltype then
  local finalizer: pointer = nilptr
  ## end
  return gc:alloc0_opt(size, flags, finalizer)
end

function GCAllocator:realloc(p: pointer, size: usize, oldsize: usize): pointer <noinline>
  return gc:realloc(p, size, oldsize)
end

function GCAllocator:realloc0(p: pointer, newsize: usize, oldsize: usize): pointer <noinline>
  return gc:realloc0(p, newsize, oldsize)
end

function GCAllocator:dealloc(p: pointer): void <noinline>
  gc:dealloc(p)
end

function GCAllocator:spannew(what: auto, size: usize) <noinline>
  local T: type = #[what.type.is_type and what.value or what.type]#
  local spn: span(T)

  if likely(size > 0) then
    ## if T.value.metafields.__gc then
    local function finalizer(data: *[0]T, size: usize)
      for i:usize=0,<size//#T do
        data[i]:__gc()
      end
    end
    local flags: usize = GCFlags.SIZED_FINALIZER
    ## else
    local finalizer: pointer = nilptr
    local flags: usize = 0
    ## end

    ## if not T.value:has_pointer() then
    flags = flags | GCFlags.LEAF -- skip GC scanning the allocated memory
    ## end

    ## if what.type.is_type then
    spn.data = (@*[0]T)(gc:alloc0_opt(size * #T, flags, (@pointer)(finalizer)))
    assert(spn.data ~= nilptr, 'out of memory')
    ## else
    spn.data = (@*[0]T)(gc:alloc_opt(size * #T, flags, (@pointer)(finalizer)))
    assert(spn.data ~= nilptr, 'out of memory')
    for i:usize=0,<size do
      memcpy(&spn.data[i], &what, #T)
    end
    ## end
    spn.size = size
  end
  return spn
end

function GCAllocator:new(what: auto) <noinline>
  local T: type = #[what.type.is_type and what.value or what.type]#

  ## if T.value.metafields.__gc then
  local finalizer: FinalizerCallback = (@FinalizerCallback)(T.__gc)
  ## else
  local finalizer: FinalizerCallback = nilptr
  ## end

  ## if T.value:has_pointer() then
  local flags: usize = 0
  ## else
  local flags: usize = GCFlags.LEAF -- skip GC scanning the allocated memory
  ## end

  local ptr: *T <noinit>
  ## if what.type.is_type then
  ptr = (@*T)(gc:alloc0_opt(#T, flags, (@pointer)(finalizer)))
  assert(ptr ~= nilptr, 'out of memory')
  ## else
  ptr = (@*T)(gc:alloc_opt(#T, flags, (@pointer)(finalizer)))
  assert(ptr ~= nilptr, 'out of memory')
  memcpy(ptr, &what, #T)
  ## end
  return ptr
end

## implement_allocator_interface(GCAllocator)

global gc_allocator: GCAllocator

global function collectgarbage(opt: facultative(string) <comptime>)
  ## if opt.type.is_niltype or opt.value == 'collect' then
    gc:collect()
  ## elseif opt.value == 'stop' then
    gc:stop()
  ## elseif opt.value == 'restart' then
    gc:restart()
  ## elseif opt.value == 'count' then
    return gc:count()
  ## elseif opt.value == 'isrunning' then
    return gc:isrunning()
  ## else static_error('invalid collect garbage argument %s', opt.value) end
end
