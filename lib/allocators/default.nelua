--[[
The default allocator  library provides the default allocator used by the standard libraries.

The default allocator is `GCAllocator` when GC is enabled,
otherwise `GeneralAllocator` (when using the pragma `nogc`).

When disabling the GC the user is responsible for manually deallocating
unused memory from the default allocator.

The default allocator can also be overridden by an allocator instance in case
the global `embed_default_allocator` is declared before this library is required.
]]

## if embed_default_allocator then -- embedded default allocator
  require 'allocators.allocator'
  local EmbeddedAllocator: type = @record{}
  local embedded_allocator: EmbeddedAllocator

  function EmbeddedAllocator:alloc(size: usize): pointer <inline>
    return embed_default_allocator:alloc(size)
  end

  function EmbeddedAllocator:alloc0(size: usize): pointer <inline>
    return embed_default_allocator:alloc0(size)
  end

  function EmbeddedAllocator:realloc(p: pointer, newsize: usize, oldsize: usize): pointer <inline>
    return embed_default_allocator:realloc(p, newsize, oldsize)
  end

  function EmbeddedAllocator:realloc0(p: pointer, newsize: usize, oldsize: usize): pointer <inline>
    return embed_default_allocator:realloc0(p, newsize, oldsize)
  end

  function EmbeddedAllocator:dealloc(p: pointer): void <inline>
    embed_default_allocator:dealloc(p)
  end

  function EmbeddedAllocator:new(what: auto, size: facultative(usize)): auto <inline>
    return embed_default_allocator:new(p, size)
  end

  function EmbeddedAllocator:delete(v: auto): void <inline>
    embed_default_allocator:delete(v)
  end

  ## implement_allocator_interface(EmbeddedAllocator)

  ## context.rootscope.symbols.default_allocator = embedded_allocator
  ## context.rootscope.symbols.DefaultAllocator = EmbeddedAllocator
## elseif not pragmas.nogc then -- GC enabled
  require 'allocators.gc'
  ## context.rootscope.symbols.default_allocator = gc_allocator
  ## context.rootscope.symbols.DefaultAllocator = GCAllocator
## else -- GC disabled
  require 'allocators.general'
  ## context.rootscope.symbols.default_allocator = general_allocator
  ## context.rootscope.symbols.DefaultAllocator = GeneralAllocator
## end

--[[
Shorthand for `default_allocator:new`.
For details see also `Allocator:new`.
]]
global function new(what: auto, size: facultative(usize)): auto
  return default_allocator:new(what, size)
end

--[[
Shorthand for `default_allocator:delete`.
For details see also `Allocator:delete`.
]]
global function delete(v: auto): void
  default_allocator:delete(v)
end
