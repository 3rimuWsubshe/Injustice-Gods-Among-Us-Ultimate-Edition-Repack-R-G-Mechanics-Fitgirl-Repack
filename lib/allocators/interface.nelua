## function implement_allocator_interface(allocator)
  local is_span = #[concept(function(x) return x.type.is_span end)]#
  local allocator = #[allocator]#

  function allocator.spanalloc(T: type, size: usize)
    local s: span(T)
    if likely(size > 0_u) then
      s.data = (@T[0]*)(allocator.alloc(size * #T))
      s.size = size
    end
    return s
  end

  function allocator.spanalloc0(T: type, size: usize)
    local s: span(T)
    if likely(size > 0_u) then
      s.data = (@T[0]*)(allocator.alloc0(size * #T))
      s.size = size
    end
    return s
  end

  function allocator.spanrealloc(s: is_span, size: usize)
    local T: type = #[s.type.subtype]#
    if unlikely(size == 0) then
      allocator.dealloc(s.data)
      s.data = nilptr
      s.size = 0
    else
      s.data = (@T[0]*)(allocator.realloc(s.data, size * #T))
      s.size = size
    end
    return s
  end

  function allocator.spanrealloc0(s: is_span, size: usize)
    local T: type = #[s.type.subtype]#
    if unlikely(size == 0) then
      allocator.dealloc(s.data)
      s.data = nilptr
      s.size = 0
    else
      s.data = (@T[0]*)(allocator.realloc0(s.data, size * #T, s.size * #T))
      s.size = size
    end
    return s
  end

  function allocator.spandealloc(s: is_span)
    allocator.dealloc(s.data)
  end

  function allocator.new(T: type, size: #[optional_concept(usize)]#)
    ## if not size.type.is_niltype then
      local spn: span(T) = allocator.spanalloc0(T, (@usize)(size))
      check(spn.size > 0_u, 'allocator.new: out of memory')
      return spn
    ## else
      local ptr: T* = (@T*)(allocator.alloc0(#T))
      check(ptr ~= nilptr, 'allocator.new: out of memory')
      return ptr
    ## end
  end

  function allocator.delete(s: #[concept(function(x)
    return x.type.is_pointer or x.type.is_span end
  )]#)
    ## if s.type.is_span then
      allocator.spandealloc(s)
    ## else -- pointer
      allocator.dealloc(s)
    ## end
  end
## end
