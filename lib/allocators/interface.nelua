## function implement_allocator_interface(allocator)
  local is_span = #[concept(function(x) return x.type:is_span() end)]#
  local allocator = #[allocator]#

  function allocator.spanalloc(T: type, size: usize)
    local s: span(T)
    if likely(size > 0_u) then
      s.data = (@T*)(allocator.alloc(size * #T))
      check(s.data, 'allocator.spanalloc: allocation fail')
      s.size = size
    end
    return s
  end

  function allocator.spanalloc0(T: type, size: usize)
    local s: span(T)
    if likely(size > 0_u) then
      s.data = (@T*)(allocator.alloc0(size * #T))
      check(s.data, 'allocator.spanalloc0: allocation fail')
      s.size = size
    end
    return s
  end

  function allocator.spanrealloc(s: is_span, size: usize)
    local T: type = #[s.type.subtype]#
    if unlikely(size == 0) then
      allocator.dealloc(s.data)
      s.data = nilptr
      s.size = 0
    else
      s.data = (@T*)(allocator.realloc(s.data, size * #T))
      check(s.data, 'allocator.spanrealloc: allocation fail')
      s.size = size
    end
    return s
  end

  function allocator.spanrealloc0(s: is_span, size: usize)
    local T: type = #[s.type.subtype]#
    if unlikely(size == 0) then
      allocator.dealloc(s.data)
      s.data = nilptr
      s.size = 0
    else
      s.data = (@T*)(allocator.realloc0(s.data, size * #T, s.size * #T))
      check(s.data, 'allocator.spanrealloc0: allocation fail')
      s.size = size
    end
    return s
  end

  function allocator.spandealloc(s: is_span)
    allocator.dealloc(s.data)
  end

  function allocator.new(T: type, size: auto)
    ## if not size.type:is_nil() then
      ## staticassert(size.type:is_integral(), 'allocator.new: size must be an integral type')
      ## if not size.type:is_unsigned() then
        check(size > 0, 'allocator.new: size must be greater than 0')
      ## end
      return allocator.spanalloc0(T, (@usize)(size))
    ## else
      return (@T*)(allocator.alloc0(#T))
    ## end
  end

  function allocator.delete(s: auto)
    ## staticassert(s.type:is_pointer() or s.type:is_span(), "allocator.delete: invalid type '%s'", s.type)
    ## if s.type:is_span() then
      allocator.spandealloc(s)
    ## else -- pointer
      allocator.dealloc(s)
    ## end
  end
## end
