-- Allocator Interface
--
-- This is an interface with additional functions that usually allocators usually should implement.

require 'span'

## function implement_allocator_interface(allocator)
  local function memcpy(dest: pointer, src: pointer, n: csize): pointer <cimport,cinclude'<string.h>',nodecl> end
  local function memset(s: pointer, c: cint, n: csize): pointer <cimport,cinclude'<string.h>',nodecl> end

  local is_span = #[concept(function(x) return x.type.is_span end)]#
  local allocator = #[allocator]#

  ## if not allocator.value:get_metafield('realloc') then
  -- naive implementation for realloc
  function allocator:realloc(p: pointer, newsize: usize, oldsize: usize): pointer
    if unlikely(p == nilptr) then
      return self:alloc(newsize)
    elseif unlikely(newsize == 0) then
      self:dealloc(p)
      return nilptr
    elseif unlikely(newsize == oldsize) then
      return p
    else
      local newp: pointer = self:alloc(newsize)
      if likely(p ~= nilptr) then
        if likely(newp ~= nilptr and oldsize ~= 0) then
          local copysize = oldsize
          if newsize < oldsize then
            copysize = newsize
          end
          memcpy(newp, p, copysize)
        end
        self:dealloc(p)
      end
      return newp
    end
  end
  ## end

  ## if not allocator.value:get_metafield('alloc0') then
  -- naive implementation for alloc0
  function allocator:alloc0(size: usize): pointer
    local p: pointer = self:alloc(size)
    if likely(p ~= nilptr and size ~= 0) then
      memset(p, 0, size)
    end
    return p
  end
  ## end

  ## if not allocator.value:get_metafield('realloc0') then
  -- naive implementation for realloc0
  function allocator:realloc0(p: pointer, newsize: usize, oldsize: usize): pointer
    p = self:realloc(p, newsize, oldsize)
    if likely(newsize > oldsize and p ~= nilptr) then
      -- zero the grown part
      memset(&(@byte[0]*)(p)[oldsize], 0, newsize - oldsize)
    end
    return p
  end
  ## end

  function allocator:spanalloc(T: type, size: usize)
    local s: span(T)
    if likely(size > 0) then
      s.data = (@T[0]*)(self:alloc(size * #T))
      s.size = size
    end
    return s
  end

  function allocator:spanalloc0(T: type, size: usize)
    local s: span(T)
    if likely(size > 0) then
      s.data = (@T[0]*)(self:alloc0(size * #T))
      s.size = size
    end
    return s
  end

  function allocator:spanrealloc(s: is_span, size: usize)
    local T: type = #[s.type.subtype]#
    local p: T[0]* = (@T[0]*)(self:realloc(s.data, size * #T, s.size))
    if unlikely(size > 0 and p == nilptr) then
      -- reallocation failed, return the original span
      return s
    end
    s.data = p
    s.size = size
    return s
  end

  function allocator:spanrealloc0(s: is_span, size: usize)
    local T: type = #[s.type.subtype]#
    local p: T[0]* = (@T[0]*)(self:realloc0(s.data, size * #T, s.size * #T))
    if unlikely(size > 0 and p == nilptr) then
      -- reallocation failed, return the original span
      return s
    end
    s.data = p
    s.size = size
    return s
  end

  function allocator:spandealloc(s: is_span)
    if unlikely(s.size == 0) then return end
    self:dealloc(s.data)
  end

  function allocator:spannew(what: auto, size: usize) <inline>
    ## if what.type.is_type then
      local T = what
      local spn: span(T) = self:spanalloc0(T, size)
      check(spn.size > 0, 'allocator.spannew: out of memory')
    ## else
      local T = #[what.type]#
      local spn: span(T) = self:spanalloc(T, size)
      check(spn.size > 0, 'allocator.spannew: out of memory')
      for i:usize=0,<size do
        memcpy(&spn[i], &what, #T)
      end
    ## end
    return spn
  end

  function allocator:new(what: auto) <inline>
    ## if what.type.is_type then
      local T = what
      local ptr: T* = (@T*)(self:alloc0(#T))
      check(ptr ~= nilptr, 'allocator.new: out of memory')
    ## else
      local T = #[what.type]#
      local ptr: T* = (@T*)(self:alloc(#T))
      check(ptr ~= nilptr, 'allocator.new: out of memory')
      memcpy(ptr, &what, #T)
    ## end
    return ptr
  end

  function allocator:delete(s: #[concept(function(x)
    return x.type.is_pointer or x.type.is_span end
  )]#) <inline>
    ## if s.type.is_span then
      self:spandealloc(s)
    ## else -- pointer
      self:dealloc(s)
    ## end
  end
## end
