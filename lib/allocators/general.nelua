-- General Allocator
--
-- The general allocator uses the system's general purpose allocator to allocate dynamic memory,
-- usually this an efficient allocator for the "general" case.
-- It uses the C malloc/calloc/realloc/free functions.

local function memset(s: pointer, c: cint, n: csize): pointer <cimport'memset',cinclude'<string.h>',nodecl> end
local function malloc(size: csize): pointer <cimport,cinclude'<stdlib.h>',nodecl> end
local function calloc(nmemb: csize, size: csize): pointer <cimport,cinclude'<stdlib.h>',nodecl> end
local function realloc(ptr: pointer, size: csize): pointer <cimport,cinclude'<stdlib.h>',nodecl> end
local function free(ptr: pointer): void <cimport,cinclude'<stdlib.h>',nodecl> end

global GeneralAllocator = @record{}

function GeneralAllocator:alloc(size: usize): pointer <inline>
  if unlikely(size == 0) then return nilptr end
  return malloc(size)
end

function GeneralAllocator:alloc0(size: usize): pointer <inline>
  if unlikely(size == 0) then return nilptr end
  return calloc(size, 1)
end

function GeneralAllocator:realloc(p: pointer, newsize: usize, oldsize: usize): pointer <inline>
  if unlikely(newsize == 0) then
    if likely(p ~= nilptr) then
      free(p)
    end
    return nilptr
  elseif unlikely(newsize == oldsize) then
    return p
  end
  return realloc(p, newsize)
end

function GeneralAllocator:dealloc(p: pointer): void <inline>
  if unlikely(p == nilptr) then return end
  free(p)
end

require 'allocators.interface'

## implement_allocator_interface(GeneralAllocator)

global general_allocator: GeneralAllocator
