## strict = true
## unitname = 'nelua'

require 'allocators.allocator_interface'

local function memset(s: pointer, c: cint, n: csize): pointer <cimport'memset',cinclude'<string.h>',nodecl> end
local function malloc(size: csize): pointer <cimport'malloc',cinclude'<stdlib.h>',nodecl> end
local function calloc(nmemb: csize, size: csize): pointer <cimport'calloc',cinclude'<stdlib.h>',nodecl> end
local function realloc(ptr: pointer, size: csize): pointer <cimport'realloc',cinclude'<stdlib.h>',nodecl> end
local function free(ptr: pointer): void <cimport'free',cinclude'<stdlib.h>',nodecl> end

global generic_allocator = @record{}

function generic_allocator.alloc(size: usize): pointer
  check(size > 0_u, 'generic_allocator.alloc: size cannot be zero')
  local p: pointer = malloc(size)
  check(p, 'generic_allocator.alloc: allocation fail')
  return p
end

function generic_allocator.alloc0(size: usize): pointer
  check(size > 0_u, 'generic_allocator.alloc0: size must be greater than 0')
  local p: pointer = calloc(size, 1)
  check(p, 'generic_allocator.alloc0: allocation fail')
  return p
end

function generic_allocator.realloc(p: pointer, size: usize): pointer
  check(size > 0_u, 'generic_allocator.realloc: size must be greater than 0')
  p = realloc(p, size)
  check(size == 0 or p, 'generic_allocator.realloc: allocation fail')
  return p
end

function generic_allocator.realloc0(p: pointer, newsize: usize, oldsize: usize): pointer
  check(newsize > 0_u, 'generic_allocator.realloc0: size must be greater than 0')
  p = realloc(p, newsize)
  check(newsize == 0_u or p, 'generic_allocator.realloc0: allocation fail')
  if likely(newsize > oldsize) then
    memset(&(@byte[0]*)(p)[oldsize], 0, newsize - oldsize)
  end
  return p
end

function generic_allocator.dealloc(p: pointer)
  free(p)
end

## implement_allocator_interface(generic_allocator)
