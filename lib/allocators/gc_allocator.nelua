## unitname = 'nelua'

require 'gc'
require 'allocators.allocator_interface'

global gc_allocator = @record{}

function gc_allocator.alloc(size: usize): pointer
  check(size > 0_u, 'gc_allocator.alloc: size cannot be zero')
  local p: pointer = gc:alloc(size)
  check(p, 'gc_allocator.alloc: allocation fail')
  return p
end

function gc_allocator.alloc0(size: usize): pointer
  check(size > 0_u, 'gc_allocator.alloc0: size must be greater than 0')
  local p: pointer = gc:alloc0(size)
  check(p, 'gc_allocator.alloc0: allocation fail')
  return p
end

function gc_allocator.realloc(p: pointer, size: usize): pointer
  check(size > 0_u, 'gc_allocator.realloc: size must be greater than 0')
  p = gc:realloc(p, size)
  check(size == 0 or p, 'gc_allocator.realloc: allocation fail')
  return p
end

function gc_allocator.realloc0(p: pointer, newsize: usize, oldsize: usize): pointer
  check(newsize > 0_u, 'gc_allocator.realloc0: size must be greater than 0')
  p = gc:realloc0(p, newsize, oldsize)
  check(newsize == 0_u or p, 'gc_allocator.realloc0: allocation fail')
  return p
end

function gc_allocator.dealloc(p: pointer)
  gc:dealloc(p)
end

## implement_allocator_interface(gc_allocator)
