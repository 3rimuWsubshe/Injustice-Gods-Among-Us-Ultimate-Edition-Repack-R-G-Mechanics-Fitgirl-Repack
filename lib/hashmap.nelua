-- Hash Map
--
-- Hash map is an associative container that contains key-value pairs with unique keys.
-- Search, insertion, and removal of elements have average constant-time complexity.
--
-- The hash map share similarities with Lua tables but should not be used like them,
-- main differences:
--  * There is no array part
--  * The length operator returns number of elements in the map
--  * Indexing automatically inserts a key-value, to avoid this use `get` or `has` methods
--  * Values cannot be nil or set to nil
--  * Can only use pairs() to iterate

require 'memory'
require 'hash'

local function ceil_idiv(x: usize, y: usize): usize <inline>
  return (x + y - 1) // y
end

-- Maximum load factor (number of elements per bucket) in percent.
-- The container automatically increases the number of buckets if the load factor exceeds this threshold.
local MAX_LOAD_FACTOR: usize <comptime> = 75
-- Grow rate in percent.
-- When the maximum load factor is reached the container capacity grows by this factor.
local GROW_RATE: usize <comptime> = 200
-- Initial capacity to reserve when inserting an element for the first time in a container.
local INIT_CAPACITY: usize <comptime> = 16
-- Constant used to test invalid index.
local INVALID_INDEX: usize <cimport'UINTPTR_MAX',cinclude'<stdint.h>',nodecl>

## local make_generic_hashmap = generalize(function(K, V, HashFunc, Allocator)
  ## static_assert(traits.is_type(K), "invalid type '%s'", K)
  ## static_assert(traits.is_type(V), "invalid type '%s'", V)
  ## if not Allocator then
  require 'allocators.default'
  ## Allocator = DefaultAllocator
  ## end

  local Allocator: type = #[Allocator]#
  local K: type = @#[K]#
  local V: type = @#[V]#

  local hashmap_nodeT: type <nickname #[string.format('hashmap_node(%s)',T)]#> = @record {
    key: K,
    value: V,
    next: usize
  }

  local hashmapT: type <nickname #[string.format('hashmap(%s, %s)',K,V)]#> = @record{
    buckets: span(usize),
    nodes: span(hashmap_nodeT),
    size: usize,
    allocator: Allocator
  }

  ##[[
  local hashmapT = hashmapT.value
  hashmapT.is_hashmap = true
  hashmapT.is_container = true
  ]]

  ## if HashFunc then
  local hash_func: auto <comptime> = #[HashFunc]#
  ## else
  local hash_func: auto = hash
  ## end

  -- Create a hash map using a custom allocator instance.
  -- This is only to be used when not using the default allocator.
  function hashmapT.make(allocator: Allocator): hashmapT
    local m: hashmapT
    m.allocator = allocator
    return m
  end

  -- Resets the container to a zeroed state, freeing all used resources.
  -- Complexity: O(1).
  function hashmapT:destroy(): void
    self.allocator:spandealloc(self.buckets)
    self.allocator:spandealloc(self.nodes)
    $self = (@hashmapT){}
  end

  -- Remove all elements from the container.
  -- Complexity: O(n).
  function hashmapT:clear(): void
    memory.spanset(self.buckets, INVALID_INDEX)
    memory.spanzero(self.nodes)
    self.size = 0
  end

  -- Used internally to find a value at a key returning it's node index.
  function hashmapT:_find(key: K): (usize, usize, usize)
    if unlikely(self.buckets.size == 0) then -- container is empty
      return INVALID_INDEX, INVALID_INDEX, INVALID_INDEX
    end
    local hash_index: usize = (@usize)(hash_func(key)) % self.buckets.size
    local node_index: usize = self.buckets[hash_index]
    local prev_node_index: usize = INVALID_INDEX
    -- iterate until the key is found
    while node_index ~= INVALID_INDEX do
      local node: *hashmap_nodeT = &self.nodes[node_index]
      if node.key == key then
        return node_index, prev_node_index, hash_index
      end
      prev_node_index = node_index
      node_index = node.next
    end
    return node_index, prev_node_index, hash_index
  end

  -- Sets the number of buckets to at least `count` and rehashes the container when needed.
  -- Complexity: Average case O(n).
  function hashmapT:rehash(count: usize): void <noinline>
    -- count should be at least (size * 100) / MAX_LOAD_FACTOR
    local min_count: usize = ceil_idiv(self.size * 100, MAX_LOAD_FACTOR)
    if count < min_count then
      count = min_count
    end

    -- reserve number of elements
    local nodes_count: usize = (count * MAX_LOAD_FACTOR) // 100
    if nodes_count > self.nodes.size then
      self.nodes = self.allocator:spanxrealloc0(self.nodes, nodes_count)
    end

    -- only rehash when needed
    if count <= self.buckets.size then
      return
    end

    -- reallocate new buckets
    self.buckets = self.allocator:spanxrealloc(self.buckets, count)

    -- reset buckets
    memory.spanset(self.buckets, INVALID_INDEX)
    for i:usize=0,<self.size do
      self.nodes[i].next = INVALID_INDEX
    end

    -- fill buckets again
    for i:usize=0,<self.size do
      local node_index: usize, prev_node_index: usize, hash_index: usize  = self:_find(self.nodes[i].key)
      if prev_node_index == INVALID_INDEX then
        self.buckets[hash_index] = i
      else
        self.nodes[prev_node_index].next = i
      end
      self.nodes[i].next = node_index
    end
  end

  -- Sets the number of buckets to the number needed to accommodate at least count elements
  -- without exceeding maximum load factor and rehashes the container when needed.
  -- Complexity: Average case O(n).
  function hashmapT:reserve(count: usize): void
    self:rehash(ceil_idiv(count * 100, MAX_LOAD_FACTOR))
  end

  -- Used internally to find or make a value at a key.
  function hashmapT:_find_or_make(key: K): usize
    if unlikely(self.nodes.size == 0) then
      -- empty container, initialize it
      self:reserve(INIT_CAPACITY)
    end
    local node_index: usize, prev_node_index: usize, hash_index: usize  = self:_find(key)
    if node_index ~= INVALID_INDEX then -- found a node
      return node_index
    else -- add a node
      check(self.size < self.nodes.size, 'not enough space to add a node')
      local node_index: usize = self.size
      self.nodes[node_index] = {key = key, next = INVALID_INDEX}
      self.size = self.size + 1

      -- link the new node
      if prev_node_index == INVALID_INDEX then
        self.buckets[hash_index] = node_index
      else
        self.nodes[prev_node_index].next = node_index
      end

      -- allocate more space if the container is full
      if unlikely(self.size >= (MAX_LOAD_FACTOR * self.buckets.size) // 100) then
        self:reserve((self.size * GROW_RATE) // 100)
      end

      return node_index
    end
  end

  -- Checks if there is an element with a key in the container.
  -- Complexity: Average case O(1).
  function hashmapT:has(key: K): boolean
    return self:_find(key) ~= INVALID_INDEX
  end

  -- Returns the value that is mapped to a key,
  -- performing an insertion if such key does not exist.
  -- Complexity: Average case O(1).
  function hashmapT:get(key: K): V
    return self.nodes[self:_find_or_make(key)].value
  end

  -- Returns a reference to the value that is mapped to a key,
  -- performing an insertion if such key does not exist.
  -- Complexity: Average case O(1).
  function hashmapT:get_ptr(key: K): *V
    return &self.nodes[self:_find_or_make(key)].value
  end

  -- Returns the value that is mapped to a key.
  -- If no such element exists, a runtime error is thrown on debug builds.
  -- Complexity: Average case O(1).
  function hashmapT:at(key: K): V
    local node_index: usize = self:_find(key)
    check(node_index ~= INVALID_INDEX, 'position out of bounds')
    return self.nodes[node_index].value
  end

  -- Returns a reference to the value that is mapped to a key.
  -- If no such element exists, a runtime error is thrown on debug builds.
  -- Complexity: Average case O(1).
  function hashmapT:at_ptr(key: K): *V
    local node_index: usize = self:_find(key)
    check(node_index ~= INVALID_INDEX, 'position out of bounds')
    return &self.nodes[node_index].value
  end

  -- Returns a reference to the value that is mapped to a key.
  -- If no such element exists, returns nilptr.
  -- Complexity: Average case O(1).
  function hashmapT:peek(key: K): *V
    local node_index: usize = self:_find(key)
    if node_index ~= INVALID_INDEX then
      return &self.nodes[node_index].value
    end
    return nilptr
  end

  -- Inserts an element or assigns to the current element if the key already exists.
  -- Complexity: Average case O(1).
  function hashmapT:set(key: K, value: V): void
    self.nodes[self:_find_or_make(key)].value = value
  end

  -- Removes an element with a key from the container (if it exists).
  -- Returns true if an element was removed.
  -- Complexity: Average case O(1).
  function hashmapT:remove(key: K): boolean
    local node_index: usize, prev_node_index: usize, hash_index: usize = self:_find(key)
    if node_index == INVALID_INDEX then return false end

    -- unlink the removed node
    local node: *hashmap_nodeT = &self.nodes[node_index]
    if prev_node_index == INVALID_INDEX then
      self.buckets[hash_index] = node.next
    else
      self.nodes[prev_node_index].next = node.next
    end

    -- move the last node into the removed node place
    local last_node_index: usize = self.size - 1
    local last_node: *hashmap_nodeT = &self.nodes[last_node_index]
    if node_index ~= last_node_index then
      $node = $last_node
      local unused_index: usize, last_prev_node_index: usize, last_hash_index: usize = self:_find(node.key)
      if last_prev_node_index == INVALID_INDEX then
        self.buckets[last_hash_index] = node_index
      else
        self.nodes[last_prev_node_index].next = node_index
      end
    end

    -- clean the last node
    $last_node = (@hashmap_nodeT)()
    self.size = self.size - 1
    return true
  end

  -- Returns the average number of elements per bucket.
  function hashmapT:load_factor(): number
    if unlikely(self.buckets.size == 0) then
      return 0
    else
      return self.size / self.buckets.size
    end
  end

  -- Returns the number of buckets in the container.
  function hashmapT:bucket_count(): usize
    return self.buckets.size
  end

  -- Checks whether the container is empty.
  function hashmapT:empty(): boolean
    return self.size == 0
  end

  -- Returns the number of elements the container can store before triggering a rehash.
  function hashmapT:capacity(): usize
    return self.nodes.size
  end

  -- Returns the number of elements in the container.
  function hashmapT:__len(): isize
    return (@isize)(self.size)
  end

  -- Same as `get_ptr`, this allows indexing the hash map type.
  -- Complexity: Average case O(1).
  function hashmapT:__atindex(key: K): *V
    return self:get_ptr(key)
  end

  -- Hashmap iterator
  local hashmap_iteratorT = @record {
    container: *hashmapT,
    index: usize
  }

  -- Advance the container iterator returning its key and value.
  -- NOTE: The input key is actually ignored.
  function hashmap_iteratorT:next(k: K): (boolean, K, V) <inline>
    if unlikely(self.index == INVALID_INDEX) then
      self.index = 0
    else
      self.index = self.index + 1
    end
    if unlikely(self.index >= self.container.size) then
      return false, (@K)(), (@V)()
    end
    local node: *hashmap_nodeT = &self.container.nodes[self.index]
    return true, node.key, node.value
  end

  -- Advance the container iterator returning its key and value by reference.
  -- NOTE: The input key is actually ignored.
  function hashmap_iteratorT:mnext(k: K): (boolean, K, *V) <inline>
    if unlikely(self.index == INVALID_INDEX) then
      self.index = 0
    else
      self.index = self.index + 1
    end
    if unlikely(self.index >= self.container.size) then
      return false, (@K)(), nilptr
    end
    local node: *hashmap_nodeT = &self.container.nodes[self.index]
    return true, node.key, &node.value
  end

  -- Allow using pairs() to iterate the container.
  function hashmapT:__pairs() <inline>
    return hashmap_iteratorT.next, (@hashmap_iteratorT){container=self,index=INVALID_INDEX}, (@K)()
  end

  -- Allow using mpairs() to iterate the container.
  function hashmapT:__mpairs() <inline>
    return hashmap_iteratorT.mnext, (@hashmap_iteratorT){container=self,index=INVALID_INDEX}, (@K)()
  end

  ## return hashmapT
## end)

global hashmap: type = #[make_generic_hashmap]#
