require 'stringbuilder'
require 'string'
require 'resourcepool'
require 'allocators.general'

--------------------------------------------------------------------------------
-- C imports

local FILE <cimport,nodecl,forwarddecl,cinclude'<stdio.h>'> = @record{}
local errno: cint <cimport,cinclude'<errno.h>',nodecl>
local stdin: *FILE <cimport,cinclude'<stdio.h>',nodecl>
local stdout: *FILE <cimport,cinclude'<stdio.h>',nodecl>
local stderr: *FILE <cimport,cinclude'<stdio.h>',nodecl>
local SEEK_SET: cint <const,cimport,cinclude'<stdio.h>',nodecl>
local SEEK_END: cint <const,cimport,cinclude'<stdio.h>',nodecl>
local SEEK_CUR: cint <const,cimport,cinclude'<stdio.h>',nodecl>
local _IOFBF: cint <const,cimport,cinclude'<stdio.h>',nodecl>
local _IOLBF: cint <const,cimport,cinclude'<stdio.h>',nodecl>
local _IONBF: cint <const,cimport,cinclude'<stdio.h>',nodecl>
local EOF: cint <const,cimport,cinclude'<stdio.h>',nodecl>
local function strerror(errnum: cint): cstring <cimport,cinclude'<string.h>',nodecl> end
local function strchr(s: cstring, c: cint): cstring <cimport,cinclude'<string.h>',nodecl> end
local function fopen(pathname: cstring, mode: cstring): *FILE <cimport,cinclude'<stdio.h>',nodecl> end
local function fclose(fp: *FILE): cint <cimport,cinclude'<stdio.h>',nodecl> end
local function fflush(fp: *FILE): cint <cimport,cinclude'<stdio.h>',nodecl> end
local function fread(ptr: pointer, size: csize, n: csize, fp: *FILE): csize <cimport,cinclude'<stdio.h>',nodecl> end
local function fwrite(ptr: pointer, size: csize, n: csize, fp: *FILE): csize <cimport,cinclude'<stdio.h>',nodecl> end
local function fseek(fp: *FILE, offset: clong, whence: cint): cint <cimport,cinclude'<stdio.h>',nodecl> end
local function ftell(fp: *FILE): clong <cimport,cinclude'<stdio.h>',nodecl> end
local function ferror(fp: *FILE): cint <cimport,cinclude'<stdio.h>',nodecl> end
local function setvbuf(fp: *FILE, buf: cstring, modes: cint, n: csize): cint <cimport,cinclude'<stdio.h>',nodecl> end
local function clearerr(fp: *FILE): void <cimport,cinclude'<stdio.h>',nodecl> end
local function getc(fp: *FILE): cint <cimport,cinclude'<stdio.h>',nodecl> end
local function atexit(func: function()): cint <cimport,cinclude'<stdlib.h>',nodecl> end

--------------------------------------------------------------------------------
-- filestream

local FStream = @record{
  fp: *FILE,
  closef: function(fp: *FILE): cint
}

global filestream = @record{
  id: uint64
}
## filestream.value.is_filestream = true

local function fileresult(success: boolean): (boolean, stringview, integer)
  if not success then
    return false, strerror(errno), errno
  end
  return true, '', 0
end

local pool: resourcepool(FStream, GeneralAllocator)

-- destroy the pool on exit
local function destroy_pool(): void pool:destroy() end
atexit(destroy_pool)

function filestream._from_fp(fp: *FILE, closef: function(fp: *FILE): cint): filestream
  local id: uint64, p: *FStream = pool:acquire()
  p.fp = fp
  p.closef = closef
  return filestream{id = id}
end

function filestream:_get_fp(): *FILE
  local p: *FStream = pool:get(self.id)
  if p then return p.fp end
  return nilptr
end

-- Check weather mode matches '[rwa]%+?b?'
local function checkmode(mode: stringview): boolean
  if #mode == 0 then return false end
  if strchr('rwa', mode.data[0]) == nilptr then return false end
  local pos: usize = 1
  if mode.data[pos] == '+'_b then pos = pos + 1 end
  if mode.data[pos] == 'b'_b then pos = pos + 1 end
  return mode.data[pos] == 0
end

function filestream.open(filename: stringview, mode: facultative(stringview)) : (filestream, stringview, integer)
  ## if mode.type.is_niltype then
  local mode: stringview = "r"
  ## else
  assert(checkmode(mode), 'invalid mode')
  ## end
  local fp: *FILE = fopen(filename, mode)
  if not fp then
    return filestream{}, strerror(errno), errno
  end
  return filestream._from_fp(fp, fclose), '', 0
end

function filestream:flush(): (boolean, stringview, integer)
  local fp: *FILE = self:_get_fp()
  assert(fp ~= nilptr, 'attempt to use a closed file')
  return fileresult(fflush(fp) == 0)
end

function filestream:close(): (boolean, stringview, integer)
  local p: FStream = $pool:get(self.id)
  assert(p.fp ~= nilptr, 'attempt to use a closed file')
  if p.fp == stdout or p.fp == stderr or p.fp == stdin then
    return false, 'cannot close standard file', -1
  end
  errno = 0 -- clear errno
  local res: cint = p.closef(p.fp)
  pool:release(self.id)
  return fileresult(res == 0)
end

function filestream:seek(whence: facultative(stringview),
                         offset: facultative(integer)): (integer, stringview, integer)
  local fp: *FILE = self:_get_fp()
  assert(fp ~= nilptr, 'attempt to use a closed file')
  ## if whence.type.is_niltype then
    local len: integer = ftell(fp)
    return len, '', 0
  ## else
    ## if offset.type.is_niltype then
    local offset: integer = 0
    ## end
    local op: cint
    if whence == 'set' then op = SEEK_SET
    elseif whence == 'end' then op = SEEK_END
    elseif whence == 'cur' then op = SEEK_CUR
    else error("invalid whence") end
    local len: integer, errmsg: stringview, status: integer
    if fseek(fp, (@clong)(offset), op) == 0 then
      len = ftell(fp)
    else
      len = -1
      local success: boolean
      success, errmsg, status = fileresult(false)
    end
    return len, errmsg, status
  ## end
end

function filestream:setvbuf(mode: stringview, size: facultative(integer))
  ## if size.type.is_niltype then
  local size: csize = 1024
  ## end
  local fp: *FILE = self:_get_fp()
  assert(fp ~= nilptr, 'attempt to use a closed file')
  local op: cint
  if mode == 'no' then op = _IONBF
  elseif mode == 'full' then op = _IOFBF
  elseif mode == 'line' then op = _IOLBF
  else error('invalid mode') end
  return fileresult(setvbuf(fp, nilptr, op, size) == 0)
end

local READ_CHUNK_SIZE <comptime> = 1024

local function readline(sb: *stringbuilder, fp: *FILE, chop: boolean): boolean
  -- TODO: lock file on POSIX?
  local NL: byte <comptime> = '\n'_byte
  local c: cint
  repeat
    local nr: uint32 = 0
    local buff: *[0]byte = sb:prepare(READ_CHUNK_SIZE) -- preallocate buffer space
    while nr < READ_CHUNK_SIZE do -- read up to buffer limit
      c = getc(fp)
      if c == EOF or c == NL then -- end of line
        break
      end
      buff[nr] = (@byte)(c)
      nr = nr + 1
    end
    sb:commit(nr)
  until c == EOF or c == NL -- until end of line
  if not chop and c == NL then -- want a newline and have one?
    sb:write_byte((@byte)(c)) -- add ending newline to result
  end
  -- return ok if read something (either a newline or something else)
  return (c == NL or sb.size > 0)
end

local function readchars(sb: *stringbuilder, fp: *FILE, n: usize): boolean
  local p: pointer = sb:prepare(n)
  local nr: csize = fread(p, 1, n, fp)
  sb:commit(nr)
  return nr > 0
end

local function readall(sb: *stringbuilder, fp: *FILE): boolean
  repeat -- read in chunks
    local p: pointer = sb:prepare(READ_CHUNK_SIZE)
    local nr: csize = fread(p, 1, READ_CHUNK_SIZE, fp)
    sb:commit(nr)
  until nr < READ_CHUNK_SIZE
  return true
end

function filestream:read(fmt: overload(integer,stringview,niltype)): (string, stringview, integer)
  --TODO: multiple arguments
  local fp: *FILE = self:_get_fp()
  assert(fp ~= nilptr, 'attempt to use a closed file')
  local sb: stringbuilder
  local success: boolean
  clearerr(fp)
  ## if fmt.type.is_niltype then
    success = readline(&sb, fp, true)
  ## elseif fmt.type.is_arithmetic then
    success = readchars(&sb, fp, fmt)
  ## elseif fmt.type.is_stringview then
    local c: byte = fmt.data[0]
    if c == '*'_byte then -- skip optional '*' (for compatibility)
      c = fmt.data[1]
    end
    -- TODO: handle 'n' to read number
    if c == 'l'_byte then -- line
      success = readline(&sb, fp, true)
    elseif c == 'L'_byte then -- line with end-of-line
      success = readline(&sb, fp, false)
    elseif c == 'a'_byte then -- entire file
      success = readall(&sb, fp)
    else
      error('invalid format')
    end
  ## end
  local errmsg: stringview
  local status: integer = 0
  if ferror(fp) ~= 0 then
    success, errmsg, status = fileresult(false)
  end
  local s: string
  if success then
    s = sb:promotestring()
  else
    if #errmsg == 0 then
      -- should be eof
      errmsg = 'eof'
      status = EOF
    end
    sb:destroy()
  end
  return s, errmsg, status
end

function filestream:write(s: stringview): (boolean, stringview, integer)
  --TODO: multiple arguments
  --TODO: return file itself
  local fp: *FILE = self:_get_fp()
  assert(fp ~= nilptr, 'attempt to use a closed file')
  local len: csize = s.size
  if fwrite(s.data, 1, len, fp) == len then
    return true, '', 0
  end
  return fileresult(false)
end

function filestream:writef(fmt: stringview, arg1: auto): (boolean, stringview, integer)
  local sb: stringbuilder
  if not sb:write_format(fmt, arg1) then
    return false, 'not enough memory', 0
  end
  local ok: boolean, err: stringview, len: integer = self:write(tostringview(sb))
  sb:destroy()
  return ok, err, len
end

function filestream:lines(fmt: overload(integer,stringview,niltype))
  ## if fmt.type.is_niltype then
  local fmt: stringview = 'l'
  ## end
  local LinesState = @record {
    file: filestream,
    fmt: #[fmt.type]#
  }
  local function lines_next(state: LinesState, prevstr: string): (boolean, string)
    local str: string, errmsg: stringview, status: integer = state.file:read(state.fmt)
    return status == 0, str
  end
  return lines_next, (@LinesState){file=$self,fmt=fmt}, (@string){}
end

function filestream:isopen(): boolean
  return pool:get(self.id) ~= nilptr
end

function filestream:__tostring(): string
  local fp: *FILE = self:_get_fp()
  if not fp then
    return 'file (closed)'
  else
    return string.format('file (%p)', fp)
  end
end
