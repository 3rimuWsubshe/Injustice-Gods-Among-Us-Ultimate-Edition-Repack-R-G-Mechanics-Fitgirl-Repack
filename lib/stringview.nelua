-- String view methods
--
-- String views points to an immutable contiguous sequence of characters.
-- Internally it just holds a pointer and its size. It never manage its
-- memory.
--
-- The stringview type is defined by the compiler, however it does not have
-- methods implemented, this file implements basic methods for it with
-- that does not require any allocation. More methods for the stringview
-- that triggers allocations are implemented in the string module.

require 'memory'
require 'span'
require 'patternmatcher'

-- C imports
local errno: cint <cimport,cinclude'<errno.h>',nodecl>
local function strtoll(str: cstring, endptr: *cstring, base: cint): clonglong <cimport,cinclude'<stdlib.h>',nodecl> end
local function strtod(str: cstring, endptr: *cstring): float64 <cimport,cinclude'<stdlib.h>',nodecl> end
local function strspn(s: cstring, accept: cstring): csize <cimport,cinclude'<string.h>',nodecl> end
local function isdigit(x: cint): cint <cimport,cinclude'<ctype.h>',nodecl> end
local function isalnum(x: cint): cint <cimport,cinclude'<ctype.h>',nodecl> end
local function toupper(c: cint): cint <cimport,cinclude'<ctype.h>',nodecl> end

-- Return length of a string.
function stringview.__len(a: stringview): isize <inline,nosideeffect>
  return (@isize)(a.size)
end

-- Compare two string.
function stringview.__eq(a: stringview, b: stringview): boolean <nosideeffect>
  return a.size == b.size and (a.size == 0 or memory.equals(a.data, b.data, a.size))
end

-- Compare if string `a` is less than string `b` in lexicographical order.
function stringview.__lt(a: stringview, b: stringview): boolean <nosideeffect>
  if unlikely(a.size == 0 or b.size == 0) then
    return a.size < b.size
  else
    if a.size < b.size then
      return memory.compare(a.data, b.data, a.size) <= 0
    else
      return memory.compare(a.data, b.data, b.size) < 0
    end
  end
end

-- Compare if string `a` is less or equal than string `b` in lexicographical order.
function stringview.__le(a: stringview, b: stringview): boolean <nosideeffect>
  if unlikely(a.size == 0 or b.size == 0) then
    return a.size <= b.size
  else
    if a.size <= b.size then
      return memory.compare(a.data, b.data, a.size) <= 0
    else
      return memory.compare(a.data, b.data, b.size) < 0
    end
  end
end

-- Return length of a string.
function stringview.len(self: stringview): isize <inline,nosideeffect>
  return (@isize)(self.size)
end

-- Returns the internal numeric codes of the character at position `i`.
function stringview.byte(self: stringview, i: facultative(isize)): byte <nosideeffect>
  -- TODO: j argument and multiple returns
  ## if i.type.is_niltype then
  local i: isize = 1
  ## end
  if unlikely(self.size == 0) then return 0 end
  if unlikely(i < 0) then i = self.size + i + 1 end
  --TODO: return nil instead on failure
  check(i >= 1 and (@usize)(i) <= self.size, 'stringview.byte: index out of range')
  return (@byte)(self.data[i-1])
end

-- Return a sub string view from this string view.
-- NOTE: Use with caution, when using the GC the view will not hold reference
-- of string allocated at runtime and the data may be collected. To be safe use string.sub
-- instead unless you want to optimize allocations and you know what you are doing.
function stringview.subview(self: stringview, i: isize, j: facultative(isize)): stringview
  ## if j.type.is_niltype then
  local j: isize = -1
  ## end
  local size: isize = (@isize)(self.size)
  if unlikely(size == 0) then return self end
  if unlikely(i < 0) then i = size + i + 1 end
  if unlikely(i <= 0) then i = 1 end
  if unlikely(j < 0) then j = size + j + 1 end
  if unlikely(j > size) then j = size end
  if unlikely(i == 1 and j == size) then return self end
  if unlikely(i > j) then return (@stringview){} end
  local subsize: usize = (@usize)(j - i + 1)
  if unlikely(subsize == 0) then return (@stringview){} end
  return (@stringview){data=&self.data[i-1], size=subsize}
end

-- Looks for the first match of pattern in the string.
-- Returns the indices of where this occurrence starts and ends.
-- The indices will be positive if a match is found, zero otherwise.
-- A third, optional argument specifies where to start the search, its default value is 1 and can be negative.
-- A value of true as a fourth, optional argument plain turns off the pattern matching facilities.
function stringview.find(self: stringview, pattern: stringview, init: facultative(isize), plain: facultative(boolean)): (isize, isize)
  ## if init.type.is_niltype then
  local init: isize = 1
  ## end
  ## if plain.type.is_niltype then
  local plain: boolean = false
  ## end
  local ms: PatternMatcher = PatternMatcher.create(self, pattern)
  local s: isize, e: isize = ms:match(init, plain)
  if e ~= -1 then
    return s+1, e
  else -- no match
    return 0, 0
  end
end

-- Returns an iterator function that, each time it is called, returns the whole match plus a span of captures.
-- A third, optional argument specifies where to start the search, its default value is 1 and can be negative.
function stringview.gmatch(s: stringview, pattern: stringview, init: facultative(isize))
  ## if init.type.is_niltype then
  local init: isize = 1
  ## end
  local MAX_CAPTURES <comptime> = 8
  local GMatchState: type = @record{
    ms: PatternMatcher,
    init: isize,
    captures: [MAX_CAPTURES]stringview
  }
  local function gmatch_next(state: *GMatchState, it: stringview): (boolean, stringview, span(stringview))
    local ok: boolean, matched: stringview, captures: span(stringview)
    local s: isize, e: isize = state.ms:match(state.init, false)
    if e ~= -1 then -- no match
      ok = true
      state.init = e+1
      matched = (@stringview){data=&state.ms.source.data[s], size=e-s}
      assert(state.ms.numcaptures <= MAX_CAPTURES, 'too many captures')
      for i:isize=0,<state.ms.numcaptures do
        state.captures[i] = state.ms:get_capture(i)
      end
      captures = (@span(stringview)){data=&state.captures[0], size=state.ms.numcaptures}
    end
    return ok, matched, captures
  end
  local state: GMatchState = {ms = PatternMatcher.create(s, pattern), init = init}
  return gmatch_next, state, (@stringview){}
end

-- Convert a type to a string view.
global function tostringview(x: auto): stringview
  ## if x.type.is_stringview then
    return x
  ## elseif (x.type.is_pointer and x.type.subtype.is_record and x.type.subtype.metafields.__tostringview) or
  ##        (x.type.is_record and x.type.metafields.__tostringview) then
    return x:__tostringview()
  ## else static_error("tostringview: cannot convert type '%s' to a string", x.type) end
end

-- Convert a string to an integer in the desired base.
local function str2intbase(s: stringview, base: uinteger): integer
  assert(s.size > 0, "str2intbase: invalid number format")
  ## if base.type.is_niltype then
  local base: uinteger <const> = 10
  ## else
  check(base >= 2 and base <= 36, "str2intbase: base out of range")
  ## end
  local SPACECHARS: cstring <const> = " \f\n\r\t\v"
  local pos: usize = strspn(s, SPACECHARS) -- skip initial spaces
  local neg: boolean = false
  if s.data[pos] == '-'_byte then -- negative sign
    pos = pos + 1
    neg = true
  elseif s.data[pos] == '+'_byte then -- skip positive sign
    pos = pos + 1
  end
  local n: uinteger = 0
  repeat
    local digit: cint = s.data[pos]
    local x: cint
    if isdigit(digit) ~= 0 then -- is a digit [0-9]
      x = digit - '0'_byte
    elseif isalnum(digit) ~= 0 then -- is a alphanumeric [a-zA-Z]
      x = toupper(digit) - 'A'_byte + 10
    else -- else spaces or invalid character
      break
    end
    assert(x < (@cint)(base), "str2intbase: invalid number format")
    n = n * base + (@uinteger)(x)
    pos = pos + 1
  until pos >= s.size
  pos = pos + strspn(&s.data[pos], SPACECHARS) -- skip trailing spaces
  check(pos == s.size, "str2intbase: invalid number format") -- fully parsed?
  if neg then -- negate
    n = -n
  end
  return (@integer)(n)
end

-- Convert a value to a number.
global function tonumber(x: auto, base: facultative(integer))
  -- TODO: return nil in case of fail (like lua)
  ## if not base.type.is_niltype then
    ## static_assert(x.type.is_stringy, "string expected, got something else")
    return str2intbase(x, base)
  ## elseif x.type.is_integral then
    local n: integer = x
    return n
  ## elseif x.type.is_float then
    local n: number = x
    return n
  ## elseif x.type.is_stringy then
    local x: cstring = x
    local endptr: cstring
    errno = 0
    local n: float64 = strtod(x, &endptr)
    check(endptr ~= x and errno == 0, 'tonumber: failed to convert string to number')
    return (@number)(n)
  ## else static_error("unable to convert value of type '%s' to a number", x.type) end
end

-- Convert a value to an integer.
global function tointeger(x: auto, base: facultative(integer)): integer
  ## if not base.type.is_niltype then
    ## static_assert(x.type.is_stringy, "string expected, got something else")
    return str2intbase(x, base)
  ## elseif x.type.is_arithmetic then
    local n: integer = x
    return n
  ## elseif x.type.is_stringy then
    local x: cstring = x
    local endptr: cstring
    errno = 0
    local i: clonglong = strtoll(x, &endptr, 10)
    check(endptr ~= x and errno == 0, 'tointeger: failed to convert string to integer')
    return i
  ## else static_error("unable to convert value of type '%s' to an integer", x.type) end
end

-- Concept to check if a value can possibly be a number.
local arithmetic_coercion_concept = #[concept(function(x)
  if x.type.is_stringy then
    return primtypes.stringview
  elseif x.type.is_integral then
    return primtypes.integer
  elseif x.type.is_float then
    return primtypes.number
  end
end)]#

-- Implement numeric operators for string view.
function stringview.__add(a: arithmetic_coercion_concept, b: arithmetic_coercion_concept): number
  return tonumber(a) + tonumber(b)
end
function stringview.__sub(a: arithmetic_coercion_concept, b: arithmetic_coercion_concept): number
  return tonumber(a) - tonumber(b)
end
function stringview.__mul(a: arithmetic_coercion_concept, b: arithmetic_coercion_concept): number
  return tonumber(a) * tonumber(b)
end
function stringview.__div(a: arithmetic_coercion_concept, b: arithmetic_coercion_concept): number
  return tonumber(a) / tonumber(b)
end
function stringview.__idiv(a: arithmetic_coercion_concept, b: arithmetic_coercion_concept): number
  return tonumber(a) // tonumber(b)
end
function stringview.__tdiv(a: arithmetic_coercion_concept, b: arithmetic_coercion_concept): number
  return tonumber(a) /// tonumber(b)
end
function stringview.__mod(a: arithmetic_coercion_concept, b: arithmetic_coercion_concept): number
  return tonumber(a) % tonumber(b)
end
function stringview.__tmod(a: arithmetic_coercion_concept, b: arithmetic_coercion_concept): number
  return tonumber(a) %%% tonumber(b)
end
function stringview.__pow(a: arithmetic_coercion_concept, b: arithmetic_coercion_concept): number
  return tonumber(a) ^ tonumber(b)
end
function stringview.__unm(a: arithmetic_coercion_concept): number
  return -tonumber(a)
end
function stringview.__band(a: arithmetic_coercion_concept, b: arithmetic_coercion_concept): integer
  return tointeger(a) & tointeger(b)
end
function stringview.__bor(a: arithmetic_coercion_concept, b: arithmetic_coercion_concept): integer
  return tointeger(a) | tointeger(b)
end
function stringview.__bxor(a: arithmetic_coercion_concept, b: arithmetic_coercion_concept): integer
  return tointeger(a) ~ tointeger(b)
end
function stringview.__shl(a: arithmetic_coercion_concept, b: arithmetic_coercion_concept): integer
  return tointeger(a) << tointeger(b)
end
function stringview.__shr(a: arithmetic_coercion_concept, b: arithmetic_coercion_concept): integer
  return tointeger(a) >> tointeger(b)
end
function stringview.__asr(a: arithmetic_coercion_concept, b: arithmetic_coercion_concept): integer
  return tointeger(a) >>> tointeger(b)
end
function stringview.__bnot(a: arithmetic_coercion_concept): integer
  return ~tointeger(a)
end
