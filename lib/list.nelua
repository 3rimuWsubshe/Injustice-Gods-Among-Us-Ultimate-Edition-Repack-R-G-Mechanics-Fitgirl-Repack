-- List type
--
-- This type implements a double linked list.
-- Supports constant time insertion and removal of elements from anywhere in the container.
-- Fast random access is not supported.
--
-- By default it uses the garbage collector unless explicitly told not to do so,
-- thus by default there is no need to manually destroy the list.

## local make_generic_list_node = generalize(function(T)
  local T: type = @#[T]#
  local listnodeT: type <nickname #[string.format('listnode(%s)',T)]#> = @record {
    prev: *listnodeT,
    next: *listnodeT,
    value: T
  }
  ## return listnodeT
## end)

global list_node: type = #[make_generic_list_node]#

## local make_generic_list = generalize(function(T, Allocator)
  ## static_assert(traits.is_type(T), "invalid type '%s'", T)
  ## if not Allocator then
  require 'allocators.default'
  ## Allocator = DefaultAllocator
  ## end

  local Allocator: type = #[Allocator]#
  local T: type = @#[T]#
  local listnodeT: type = @list_node(T)

  local listT <nickname #[string.format('list(%s)',T)]#> = @record{
    head: *listnodeT, -- list begin
    tail: *listnodeT, -- list end
    allocator: Allocator
  }

  ##[[
  local listT = listT.value
  listT.is_list = true
  listT.is_container = true
  listT.subtype = T
  ]]

  function listT:_new_node(prev: *listnodeT, next: *listnodeT, value: T): *listnodeT <inline>
    local node: *listnodeT = self.allocator:new(@listnodeT)
    node.prev = prev
    node.next = next
    node.value = value
    return node
  end

  -- Create a list using a custom allocator instance.
  -- This is only to be used when not using the default allocator.
  function listT.make(allocator: Allocator): listT
    local l: listT
    l.allocator = allocator
    return l
  end

  -- Remove all elements from the list.
  -- O(n) complexity.
  function listT:clear()
    local it: *listnodeT = self.head
    while it do
      local next: *listnodeT = it.next
      self.allocator:delete(it)
      it = next
    end
    self.head = nilptr
    self.tail = nilptr
  end

  -- Resets the list to zeroed state, freeing all used resources.
  -- This is more useful to free resources when not using the garbage collector.
  function listT:destroy()
    self:clear()
    $self = (@listT)()
  end

  -- Insert an element at beginning of the list.
  -- O(1) complexity.
  function listT:prepend(value: T)
    local node: *listnodeT = self:_new_node(nilptr, self.head, value)
    if likely(self.head) then
      self.head.prev = node
    end
    if unlikely(not self.tail) then
      self.tail = node
    end
    self.head = node
  end

  -- Add an element at the end of the list.
  -- O(1) complexity.
  function listT:append(value: T)
    local node: *listnodeT = self:_new_node(self.tail, nilptr, value)
    if likely(self.tail) then
      self.tail.next = node
    end
    if unlikely(not self.head) then
      self.head = node
    end
    self.tail = node
  end

  -- Find an element in the list, returning it's node reference when found.
  -- O(n) complexity.
  function listT:find(value: T): *listnodeT
    local it: *listnodeT = self.head
    while it do
      if it.value == value then
        return it
      end
      it = it.next
    end
    return nilptr
  end

  -- Erase an element where from the list.
  -- O(1) complexity.
  function listT:erase(node: *listnodeT): *listnodeT
    check(node ~= nilptr, 'listT.erase: attempt to erase a nilptr node')
    if node == self.head then
      self.head = node.next
    end
    if node == self.tail then
      self.tail = node.prev
    end
    if node.prev then
      node.prev.next = node.next
    end
    if node.next then
      node.next.prev = node.prev
    end
    local next: *listnodeT = node.next
    self.allocator:delete(node)
    return next
  end

  -- Remove first element from the list.
  -- O(1) complexity.
  function listT:remove_first()
    check(self.head ~= nilptr, 'list.remove_first: list is empty')
    local node: *listnodeT = self.head
    self.head = node.next
    if likely(self.head) then
      self.head.prev = nilptr
    end
    if unlikely(self.tail == node) then
      self.tail = nilptr
    end
    self.allocator:delete(node)
  end

  -- Remove last element from the list.
  -- O(1) complexity.
  function listT:remove_last()
    check(self.tail ~= nilptr, 'list.remove_first: list is empty')
    local node: *listnodeT = self.tail
    self.tail = node.prev
    if likely(self.tail) then
      self.tail.next = nilptr
    end
    if unlikely(self.head == node) then
      self.head = nilptr
    end
    self.allocator:delete(node)
  end

  -- Test whether the list is empty.
  function listT:empty(): boolean
    return self.head == nilptr
  end

  -- Returns the number of elements in the list.
  -- O(n) complexity.
  function listT:__len(): isize
    local count: isize = 0
    local it: *listnodeT = self.head
    while it do
      count = count + 1
      it = it.next
    end
    return count
  end

  -- Returns the next node of the list and its element.
  -- Used with pairs() iterator.
  function listT:__next(node: *listnodeT): (boolean, *listnodeT, T) <inline>
    local nextnode: *listnodeT
    if unlikely(node == nilptr) then
      nextnode = self.head
    else
      nextnode = node.next
    end
    if unlikely(nextnode == nilptr) then
      return false, nilptr, T()
    end
    return true, nextnode, nextnode.value
  end

  -- Returns the next node of the list and its element by reference.
  -- Used with pairs() iterator.
  function listT:__mnext(node: *listnodeT): (boolean, *listnodeT, *T) <inline>
    local nextnode: *listnodeT
    if unlikely(node == nilptr) then
      nextnode = self.head
    else
      nextnode = node.next
    end
    if unlikely(nextnode == nilptr) then
      return false, nilptr, nilptr
    end
    return true, nextnode, &nextnode.value
  end

  -- Allow using pairs() iterator with the list.
  function listT:__pairs() <inline>
    return listT.__next, self, nilptr
  end

  -- Allow using pairs() iterator with the list.
  function listT:__mpairs() <inline>
    return listT.__mnext, self, nilptr
  end

  ## return listT
## end)

global list: type = #[make_generic_list]#
