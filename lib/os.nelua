require 'string'

--------------------------------------------------------------------------------
-- C imports

## cinclude '<unistd.h>'
## cinclude '<time.h>'
## cinclude '<stdlib.h>'
## cinclude '<stdio.h>'
## cinclude '<string.h>'
## cinclude '<locale.h>'
## cinclude '<errno.h>'

local CLOCKS_PER_SEC: clong <cimport,nodecl>
local LC_ALL: cint <cimport,nodecl>
local LC_COLLATE: cint <cimport,nodecl>
local LC_CTYPE: cint <cimport,nodecl>
local LC_MONETARY: cint <cimport,nodecl>
local LC_NUMERIC: cint <cimport,nodecl>
local LC_TIME: cint <cimport,nodecl>
local EXIT_SUCCESS: cint <cimport,nodecl>
local EXIT_FAILURE: cint <cimport,nodecl>
local errno: cint <cimport,nodecl>
local function clock(): clong <cimport,nodecl> end
local function getenv(name: cstring): cstring <cimport,nodecl> end
local function exit(status: cint) <cimport,nodecl> end
local function mkstemp(s: cstring): cint <cimport,nodecl> end
local function close(fd: cint): cint <cimport,nodecl> end
local function strncpy(dest: cstring, src: cstring, n: usize): cstring <cimport,nodecl> end
local function system(command: cstring): cint <cimport,nodecl> end
local function strerror(errnum: cint): cstring <cimport,nodecl> end
local function rename(old: cstring, new: cstring): cint <cimport,nodecl> end
local function remove(pathname: cstring): cint <cimport,nodecl> end
local function setlocale(category: cint, locale: cstring): cstring <cimport,nodecl> end
local function ctime(tloc: pointer): clong <cimport'time',nodecl> end

--------------------------------------------------------------------------------
-- os module

global os = @record{}

local function fileresult(status: cint): (boolean, string, integer)
  if status == -1 then
    return false, strerror(errno), errno
  else
    return true, '', 0
  end
end

function os.clock(): number
  return clock() / CLOCKS_PER_SEC
end

function os.date(): string
  --TODO: implement os date
  return 'NIY (not implemented yet)'
end

function os.difftime(t1: integer, t2: integer): integer
  return t2 - t1
end

function os.execute(command: string): (boolean, string, integer)
  local status = system(command)
  if status == -1 then
    return fileresult(status)
  end
  return true,'exit',status
end

function os.execute_check(): boolean
  local status = system(nilptr)
  return status ~= 0
end

function os.exit(code: integer)
  exit(code)
end

function os.exit_boolean(code: boolean)
  local ecode
  if code then
    ecode = EXIT_SUCCESS
  else
    ecode = EXIT_FAILURE
  end
  exit(ecode)
end

function os.exit_default()
  exit(EXIT_SUCCESS)
end

function os.getenv(varname: string): string
  local s = getenv(varname)
  if s then
    return s
  else
    return ''
  end
end

function os.remove(filename: string): (boolean, string, integer)
  return fileresult(remove(filename))
end

function os.rename(oldname: string, newname: string): (boolean, string, integer)
  return fileresult(rename(oldname, newname))
end

function os.setlocale(locale: string, category: string): string
  local cat
  if category == 'all' then cat = LC_ALL
  elseif category == 'collate' then cat = LC_COLLATE
  elseif category == 'ctype' then cat = LC_CTYPE
  elseif category == 'monetary' then cat = LC_MONETARY
  elseif category == 'numeric' then cat = LC_NUMERIC
  elseif category == 'time' then cat = LC_TIME
  else
    --TODO: string format with option name
    error "invalid option '%s'"
  end
  local s = setlocale(cat, locale)
  if s then
    return s
  else
    return ''
  end
end

function os.setlocale_default(locale: string): string
  return os.setlocale(locale, 'all')
end

function os.time_default(): integer
  --TODO: optional table argument
  local t = ctime(nilptr)
  if t == -1 then
    error 'time result cannot be represented in this installation'
  end
  return t
end

function os.tmpname(): string
  --TODO: windows implementation without POSIX
  local TMPBUFSIZE <comptime> = 32
  local buf: cchar[TMPBUFSIZE]
  strncpy(&buf[0], "/tmp/lua_XXXXXX", TMPBUFSIZE)
  local fd = mkstemp(&buf[0])
  if fd == -1 then
    error "unable to generate a unique filename"
  end
  close(fd)
  return &buf[0]
end
