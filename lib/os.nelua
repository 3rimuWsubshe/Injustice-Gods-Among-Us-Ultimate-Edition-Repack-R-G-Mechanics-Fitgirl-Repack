require 'string'

--------------------------------------------------------------------------------
-- C imports

##[[
cemit([==[
typedef struct tm tm_t;
]==],'declaration')
]]

local clock_t <cimport,nodecl> = #[types.IntegralType('clock_t', primtypes.clong.size)]#
local time_t <cimport,nodecl> = #[types.IntegralType('time_t', primtypes.clong.size)]#

local tm <cimport'tm_t',nodecl> = @record {
  tm_year: cint,
  tm_mon: cint,
  tm_mday: cint,
  tm_hour: cint,
  tm_min: cint,
  tm_sec: cint,
  tm_isdst: cint
}
local CLOCKS_PER_SEC: clock_t <cimport,cinclude'<time.h>',nodecl>
local LC_ALL: cint <cimport,cinclude'<locale.h>',nodecl>
local LC_COLLATE: cint <cimport,cinclude'<locale.h>',nodecl>
local LC_CTYPE: cint <cimport,cinclude'<locale.h>',nodecl>
local LC_MONETARY: cint <cimport,cinclude'<locale.h>',nodecl>
local LC_NUMERIC: cint <cimport,cinclude'<locale.h>',nodecl>
local LC_TIME: cint <cimport,cinclude'<locale.h>',nodecl>
local EXIT_SUCCESS: cint <cimport,cinclude'<stdlib.h>',nodecl>
local EXIT_FAILURE: cint <cimport,cinclude'<stdlib.h>',nodecl>
local errno: cint <cimport,cinclude'<errno.h>',nodecl>
local function clock(): clock_t <cimport,cinclude'<time.h>',nodecl> end
local function getenv(name: cstring): cstring <cimport,cinclude'<stdlib.h>',nodecl> end
local function exit(status: cint) <cimport,cinclude'<stdlib.h>',nodecl> end
local function mkstemp(s: cstring): cint <cimport,cinclude'<stdlib.h>',nodecl> end
local function close(fd: cint): cint <cimport,cinclude'<unistd.h>',nodecl> end
local function strncpy(dest: cstring, src: cstring, n: usize): cstring <cimport,cinclude'<string.h>',nodecl> end
local function system(command: cstring): cint <cimport,cinclude'<stdlib.h>',nodecl> end
local function strerror(errnum: cint): cstring <cimport,cinclude'<string.h>',nodecl> end
local function rename(old: cstring, new: cstring): cint <cimport,cinclude'<stdio.h>',nodecl> end
local function remove(pathname: cstring): cint <cimport,cinclude'<stdio.h>',nodecl> end
local function setlocale(category: cint, locale: cstring): cstring <cimport,cinclude'<locale.h>',nodecl> end
local function time(tloc: pointer): time_t <cimport,cinclude'<time.h>',nodecl> end
local function mktime(tp: tm*): time_t <cimport,cinclude'<time.h>',nodecl> end
local function localtime(timer: time_t*): tm* <cimport,cinclude'<time.h>',nodecl> end
local function strftime(s: cstring, maxsize: csize, format: cstring, tp: tm*): csize <cimport,cinclude'<time.h>',nodecl> end

--------------------------------------------------------------------------------
-- os module

global os = @record{}

function os.clock(): number
  return clock() / CLOCKS_PER_SEC
end

function os.date(): string
  --TODO: all the other options from Lua
  local t: time_t = time(nilptr);
  local ts: tm = localtime(&t)
  local buf: cchar[250]
  local size: csize = strftime(&buf[0], 250, "%c", &ts)
  return &buf[0]
end

function os.difftime(t1: integer, t2: integer): integer
  return t2 - t1
end

function os.execute(command: #[overload_concept{stringview, boolean}]#)
  ## if command.type.is_stringview then
    errno = 0
    local status: integer = system(command)
    if status ~= 0 and errno ~= 0 then -- error with an errno?
      return false, (@stringview)(strerror(errno)), errno
    end
    --TODO: translate status codes for POSIX system
    return status == 0, 'exit', status
  ## else
    local status: cint = system(nilptr)
    return status ~= 0
  ## end
end

function os.exit(code: #[overload_concept{integer,boolean,niltype}]#)
  ## if code.type.is_arithmetic then
    exit(code)
  ## elseif code.type.is_boolean then
    local status: cint = EXIT_FAILURE
    if code then
      status = EXIT_SUCCESS
    end
    exit(status)
  ## else
    exit(EXIT_SUCCESS)
  ## end
end

function os.getenv(varname: stringview): string
  local s: cstring = getenv(varname)
  if s then
    return s
  else
    return ''
  end
end

function os.remove(filename: stringview): (boolean, stringview, integer)
  if remove(filename) == -1 then
    return false, strerror(errno), errno
  end
  return true, '', 0
end

function os.rename(oldname: stringview, newname: stringview): (boolean, stringview, integer)
  if rename(oldname, newname) == -1 then
    return false, strerror(errno), errno
  end
  return true, '', 0
end

function os.setlocale(locale: stringview, category: #[optional_concept(stringview)]#): string
  ## if category.type.is_niltype then
    return os.setlocale(locale, 'all')
  ## else
    local cat: cint
    if category == 'all' then cat = LC_ALL
    elseif category == 'collate' then cat = LC_COLLATE
    elseif category == 'ctype' then cat = LC_CTYPE
    elseif category == 'monetary' then cat = LC_MONETARY
    elseif category == 'numeric' then cat = LC_NUMERIC
    elseif category == 'time' then cat = LC_TIME
    else
      error("os.setlocale: invalid category")
    end
    local s: cstring = setlocale(cat, locale)
    if s then
      return s
    else
      return ''
    end
  ## end
end

global os_time_desc = @record {
  year: integer, month: integer, day: integer,
  hour: integer, min: integer, sec: integer,
  isdst: boolean
}

function os.time(desc: #[optional_concept(os_time_desc)]#): integer
  local t: time_t
  ## if desc.type.is_niltype then
    t = time(nilptr)
    if t == -1 then
      error 'os.time: time result cannot be represented in this installation'
    end
  ## else
    --TODO: change desc to table and update fields with normalize values
    --TODO: make default hour 12
    local ts: tm
    ts.tm_year = desc.year - 1900
    ts.tm_mon = desc.month - 1
    ts.tm_mday = desc.day
    ts.tm_hour = desc.hour
    ts.tm_min = desc.min
    ts.tm_sec = desc.sec
    if desc.isdst then
      ts.tm_isdst = 1
    end
    t = mktime(&ts)
  ## end
  return t
end

function os.tmpname(): string
  --TODO: windows implementation without POSIX
  local TMPBUFSIZE <comptime> = 32
  local buf: cchar[TMPBUFSIZE]
  strncpy(&buf[0], "/tmp/lua_XXXXXX", TMPBUFSIZE)
  local fd: cint = mkstemp(&buf[0])
  if fd == -1 then
    error "os.tmpname: unable to generate a unique filename"
  end
  close(fd)
  return &buf[0]
end
