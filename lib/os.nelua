--[[
The os library provides some operating system facilities.

Some `os` functions behavior may vary across different operating systems,
or may not be supported.
]]

require 'string'

-- Locale C imports.

local LC_ALL: cint <cimport,cinclude'<locale.h>',nodecl>
local LC_COLLATE: cint <cimport,cinclude'<locale.h>',nodecl>
local LC_CTYPE: cint <cimport,cinclude'<locale.h>',nodecl>
local LC_MONETARY: cint <cimport,cinclude'<locale.h>',nodecl>
local LC_NUMERIC: cint <cimport,cinclude'<locale.h>',nodecl>
local LC_TIME: cint <cimport,cinclude'<locale.h>',nodecl>
local function setlocale(category: cint, locale: cstring): cstring <cimport,cinclude'<locale.h>',nodecl> end

local EXIT_SUCCESS: cint <cimport,cinclude'<stdlib.h>',nodecl>
local EXIT_FAILURE: cint <cimport,cinclude'<stdlib.h>',nodecl>
local function getenv(name: cstring): cstring <cimport,cinclude'<stdlib.h>',nodecl> end
local function exit(status: cint): void <cimport,cinclude'<stdlib.h>',nodecl> end
local function remove(pathname: cstring): cint <cimport,cinclude'<stdio.h>',nodecl> end

local clock_t <cimport,cinclude'<time.h>',nodecl> = #[types.IntegralType('clock_t', primtypes.clong.size, false, primtypes.clong.align)]#
local time_t <cimport,cinclude'<time.h>',nodecl> = #[types.IntegralType('time_t', primtypes.clong.size, false, primtypes.clong.align)]#
local tm: type <cimport'tm',cinclude'<time.h>',nodecl,ctypedef> = @record{
  tm_year: cint,
  tm_mon: cint,
  tm_mday: cint,
  tm_hour: cint,
  tm_min: cint,
  tm_sec: cint,
  tm_isdst: cint
}
local CLOCKS_PER_SEC: clock_t <cimport,cinclude'<time.h>',nodecl>
local function clock(): clock_t <cimport,cinclude'<time.h>',nodecl> end
local function time(tloc: *time_t): time_t <cimport,cinclude'<time.h>',nodecl> end
local function mktime(tp: *tm): time_t <cimport,cinclude'<time.h>',nodecl> end
local function localtime(timer: *time_t): *tm <cimport,cinclude'<time.h>',nodecl> end
local function strftime(s: cstring, maxsize: csize, format: cstring, tp: *tm): csize <cimport,cinclude'<time.h>',nodecl> end

local errno: cint <cimport,cinclude'<errno.h>',nodecl>
local function strerror(errnum: cint): cstring <cimport,cinclude'<string.h>',nodecl> end

-- Namespace for OS module.
global os: type = @record{}

--[[
Returns an approximation of the amount in seconds of CPU time used by the program,
as returned by the underlying ISO C function `clock`.
]]
function os.clock(): number
  return clock() / CLOCKS_PER_SEC
end

-- Returns a human-readable date and time representation using the current locale.
function os.date(): string
  local t: time_t = time(nilptr)
  local buf: [250]cchar
  --TODO: all the other options from Lua
  local size: csize = strftime(&buf[0], 250, "%c", localtime(&t))
  return string.copy(&buf[0])
end

--[[
Returns the difference, in seconds, from time `t1` to time `t2`
(where the times are values returned by `os.time`).

In POSIX, Windows, and some other systems, this value is exactly `t2 - t1`.
]]
function os.difftime(t1: integer, t2: integer): integer
  return t2 - t1
end

--[[
Passes command to be executed by an operating system shell.

Its first result is `true` if the command terminated successfully, or `false` otherwise.
After this first result the function returns a string plus a number, as follows:

 * `"exit"`: the command terminated normally; the following number is the exit status of the command.
 * `"unsupported"`: executing command is not supported in the system.

When called without a command, `os.execute` returns a boolean that is `true` if a shell is available.

This function is equivalent to the ISO C function `system`.
This function is system dependent and is not available on all platforms.
]]
function os.execute(command: facultative(string)): (boolean, string, integer)
  ## if ccinfo.is_wasm then
    return false, 'unsupported', 1
  ## else
    local function system(command: cstring): cint <cimport,cinclude'<stdlib.h>',nodecl> end
    ## if command.type.is_string then
      errno = 0
      local status: integer = system(command)
      if status ~= 0 and errno ~= 0 then -- error with an errno?
        return false, (@string)(strerror(errno)), errno
      end
      --TODO: translate status codes for POSIX system
      return status == 0, 'exit', status
    ## else
      local status: cint = system(nilptr)
      return status ~= 0, 'unsupported', 1
    ## end
  ## end
end

--[[
Calls the ISO C function `exit` to terminate the host program.

If `code` is `true`, the returned status is `EXIT_SUCCESS`.
If `code` is `false`, the returned status is `EXIT_FAILURE`.
If `code` is a number, the returned status is this number.
The default value for code is `true`.
]]
function os.exit(code: overload(integer,boolean,niltype)): void <noreturn>
  ## if code.type.is_integral then
    exit(code)
  ## elseif code.type.is_boolean then
    local status: cint = EXIT_FAILURE
    if code then
      status = EXIT_SUCCESS
    end
    exit(status)
  ## else
    exit(EXIT_SUCCESS)
  ## end
end

--[[
Returns the value of the process environment variable `varname`.
In case the variable is not defined, an empty string is returned.
]]
function os.getenv(varname: string): string
  local s: cstring = getenv(varname)
  if s then
    return string.copy(s)
  else
    return (@string){}
  end
end

--[[
Deletes the file (or empty directory, on POSIX systems) with the given name.

Returns `true` on success, otherwise `false` plus an error message and a system-dependent error code.
]]
function os.remove(filename: string): (boolean, string, integer)
  ## if ccinfo.is_wasm then
    return false, 'unsupported', 1
  ## else
    if remove(filename) == -1 then
      return false, strerror(errno), errno
    end
    return true, (@string){}, 0
  ## end
end

--[[
Renames the file or directory named `oldname` to `newname`.

Returns `true` on success, otherwise `false` plus an error message and a system-dependent error code.
]]
function os.rename(oldname: string, newname: string): (boolean, string, integer)
  ## if ccinfo.is_wasm then
    return false, 'unsupported', 1
  ## else
    local function rename(old: cstring, new: cstring): cint <cimport,cinclude'<stdio.h>',nodecl> end
    if rename(oldname, newname) == -1 then
      return false, strerror(errno), errno
    end
    return true, (@string){}, 0
  ## end
end

--[[
Sets the current locale of the program.

`locale` is a system-dependent string specifying a locale.
`category` is an optional string describing which category to change:
`"all"`, `"collate"`, `"ctype"`, `"monetary"`, `"numeric"`, or `"time"`;
the default category is "all".

If locale is the empty string, the current locale is set to an implementation-defined native locale.
If locale is the string `"C"`, the current locale is set to the standard C locale.

The function returns the name of the new locale on success,
or an empty string if the request cannot be honored.
]]
function os.setlocale(locale: string, category: facultative(string)): string
  ## if category.type.is_niltype then
    return os.setlocale(locale, 'all')
  ## else
    local cat: cint
    if category == 'all' then cat = LC_ALL
    elseif category == 'collate' then cat = LC_COLLATE
    elseif category == 'ctype' then cat = LC_CTYPE
    elseif category == 'monetary' then cat = LC_MONETARY
    elseif category == 'numeric' then cat = LC_NUMERIC
    elseif category == 'time' then cat = LC_TIME
    else
      error("invalid category")
    end
    local s: cstring = setlocale(cat, locale)
    if s then
      return string.copy(s)
    else
      return (@string){}
    end
  ## end
end

-- Time description, used by function `os.time`.
global os.timedesc: type = @record{
  year: integer, month: integer, day: integer,
  hour: integer, min: integer, sec: integer,
  isdst: boolean
}

--[[
Returns the current time when called without arguments,
or a time representing the local date and time specified by the given time description.

When the function is called, the values in these fields do not need to be inside their valid ranges.
For instance, if sec is -10, it means 10 seconds before the time specified by the other fields.
If hour is 1000, it means 1000 hours after the time specified by the other fields.

The returned value is a number, whose meaning depends on your system.
In POSIX, Windows, and some other systems,
this number counts the number of seconds since some given start time (the "epoch").
In other systems, the meaning is not specified,
and the number returned by time can be used only as an argument to `os.date` and `os.difftime`.

When called with a record `os.timedesc`, `os.time` also normalizes all the fields,
so that they represent the same time as before the call but with values inside their valid ranges.
]]
function os.time(desc: facultative(os.timedesc)): integer
  local t: time_t
  ## if desc.type.is_niltype then
    t = time(nilptr)
    assert(t > 0, 'time result cannot be represented in this installation')
  ## else
    --TODO: change desc to table and update fields with normalize values
    --TODO: make default hour 12
    local ts: tm
    ts.tm_year = desc.year - 1900
    ts.tm_mon = desc.month - 1
    ts.tm_mday = desc.day
    ts.tm_hour = desc.hour
    ts.tm_min = desc.min
    ts.tm_sec = desc.sec
    if desc.isdst then
      ts.tm_isdst = 1
    end
    t = mktime(&ts)
  ## end
  return t
end

--[[
Returns a string with a file name that can be used for a temporary file.

The file must be explicitly opened before its use and explicitly removed when no longer needed.
In POSIX systems, this function also creates a file with that name, to avoid security risks.
(Someone else might create the file with wrong permissions in the time between getting the name and creating the file.)
You still have to open the file to use it and to remove it (even if you do not use it).
When possible, you may prefer to use `io.tmpfile`, which automatically removes the file when the program ends.
]]
function os.tmpname(): string
  local buf: [260]cchar
  local bufcs: cstring = &buf[0]
  local success: boolean
##[==[
  -- C code is used so that the generated C is portable across platforms.
  cinclude '<stddef.h>' -- for NULL
  cinclude '<string.h>' -- for strncpy/strncat
  cinclude '<stdlib.h>' -- for getenv
  cinclude '<stdio.h>' -- for tmpnam
  cinclude '<stdbool.h>' -- for true/false
  cinclude [[
/* Include POSIX APIs. */
#if !defined(_WIN32) && (defined(__unix__) || defined(__unix) || (defined(__APPLE__) && defined(__MACH__)))
  #include <unistd.h>
#endif
]]
  cemit [[
#if _POSIX_VERSION >= 200112L
  char* tmpdir = getenv("TMPDIR");
  if(tmpdir != NULL) {
    strncpy(bufcs, tmpdir, 260);
    strncat(bufcs, "/nelua_XXXXXX", 260 - (strlen(tmpdir) + 1));
  } else {
    strncpy(bufcs, "/tmp/nelua_XXXXXX", 260);
  }
  int fd = mkstemp(bufcs);
  if(fd == -1) {
    success = false;
    close(fd);
  } else {
    success = true;
  }
#else
  success = tmpnam(bufcs) != NULL;
#endif
]]
]==]
  if success then
    return string.copy(bufcs)
  else
    return (@string){}
  end
end

--[[
Get time elapsed in seconds since its first call using a high resolution timer.
Returns a number greater than or equal to `0` on success, otherwise `-1`.

In the first successful call `0` is returned,
in subsequent calls the relative time in seconds since the first call is returned.
This is typically used to compute time differences with high precision.

The time resolution is unspecified and depends on the OS,
but typically has nanosecond precision on POSIX systems.

The operation may not be supported by all systems, or may fail in some systems,
in that case `-1` is returned.
]]
function os.now(): number
  local ok: boolean = false
  local ns: int64 = 0

##[==[
  cinclude '<time.h>' -- for timespec_get/TIME_UTC
  cinclude '<stdbool.h>' -- for bool
  cinclude '<stdint.h>' -- for int64_t
  cinclude [[
/* Include POSIX APIs. */
#if !defined(_WIN32) && (defined(__unix__) || defined(__unix) || (defined(__APPLE__) && defined(__MACH__)))
  #include <unistd.h>
#endif
]]
  cinclude [[
/* Include Windows APIs. */
#ifdef _WIN32
  #ifndef WIN32_LEAN_AND_MEAN
    #define WIN32_LEAN_AND_MEAN
  #endif
  #ifndef _WIN32_WINNT
    #define _WIN32_WINNT 0x600
  #endif
  #include <windows.h>
#endif
]]
  cemitdecl [[
/* Determine supported high resolution clock API. */
#if __STDC_VERSION__ >= 201112L && defined(TIME_UTC) && !defined(__ANDROID__)
  #define NELUA_HAVE_C11_TIMESPEC_GET
#elif defined(_POSIX_TIMERS) && defined(_POSIX_MONOTONIC_CLOCK)
  #define NELUA_HAVE_POSIX_MONOTONIC_CLOCK
#elif _POSIX_VERSION >= 200112L
  #include <sys/time.h>
  #define NELUA_HAVE_POSIX_GETTIMEOFDAY
#endif
]]
  cemit [[
#ifdef _WIN32
  static bool initialized = false;
  static LARGE_INTEGER freq;
  static LARGE_INTEGER start;
  if(!initialized) {
    initialized = true;
    ok = (QueryPerformanceFrequency(&freq) != 0) && (QueryPerformanceCounter(&start) != 0);
  } else {
    LARGE_INTEGER qpc;
    ok = QueryPerformanceCounter(&qpc) != 0;
    int64_t ticks = qpc.QuadPart - start.QuadPart;
    int64_t q = ticks / freq.QuadPart;
    int64_t r = ticks % freq.QuadPart;
    ns = (q * 1000000000) + ((r * 1000000000) / freq.QuadPart);
  }
#elif defined(NELUA_HAVE_C11_TIMESPEC_GET)
  static bool initialized = false;
  static struct timespec start = {0};
  errno = 0;
  if(!initialized) {
    initialized = true;
    ok = timespec_get(&start, TIME_UTC) == TIME_UTC;
  } else {
    struct timespec ts = {0};
    ok = timespec_get(&ts, TIME_UTC) == TIME_UTC;
    ns = (int64_t)(ts.tv_sec - start.tv_sec)*1000000000 + (int64_t)(ts.tv_nsec - start.tv_nsec);
  }
#elif defined(NELUA_HAVE_POSIX_MONOTONIC_CLOCK)
  static bool initialized = false;
  static struct timespec start = {0};
  errno = 0;
  if(!initialized) {
    initialized = true;
    ok = clock_gettime(CLOCK_MONOTONIC, &start) == 0;
  } else {
    struct timespec ts = {0};
    ok = clock_gettime(CLOCK_MONOTONIC, &ts) == 0;
    ns = (int64_t)(ts.tv_sec - start.tv_sec)*1000000000 + (int64_t)(ts.tv_nsec - start.tv_nsec);
  }
#elif defined(NELUA_HAVE_POSIX_GETTIMEOFDAY)
  static bool initialized = false;
  static struct timeval start = {0};
  errno = 0;
  if(!initialized) {
    initialized = true;
    ok = gettimeofday(&start, NULL) == 0;
  } else {
    struct timeval ts;
    ok = gettimeofday(&ts, NULL) == 0;
    ns = (int64_t)(ts.tv_sec - start.tv_sec)*1000000000 + (int64_t)(ts.tv_usec - start.tv_usec)*1000;
  }
#endif
]]
]==]
  if not ok then return -1.0 end
  return ns / 1000000000.0
end

--[[
Sleep the current OS thread for `secs` seconds.
Returns true on success, otherwise false.

The operation typically has at least millisecond precision,
the sleep time will be typically the requested one,
but can be a little lower or higher depending on the system.

The operation may not be supported by all systems, or may fail in some systems,
in that case false is returned.
]]
function os.sleep(secs: number): boolean
  local us: uint64 <nodce> = (@uint64)(secs * 1000000)
  local ok: boolean = false
##[==[
  -- C code is used so that the generated C is portable across platforms.
  cinclude '<time.h>' -- for nanosleep
  cinclude '<stdbool.h>' -- for true
  cinclude '<errno.h>' -- for errno
  cinclude [[
/* Include POSIX APIs. */
#if !defined(_WIN32) && (defined(__unix__) || defined(__unix) || (defined(__APPLE__) && defined(__MACH__)))
  #include <unistd.h>
#endif
]]
  cinclude [[
/* Include Windows APIs. */
#ifdef _WIN32
  #ifndef WIN32_LEAN_AND_MEAN
    #define WIN32_LEAN_AND_MEAN
  #endif
  #ifndef _WIN32_WINNT
    #define _WIN32_WINNT 0x600
  #endif
  #include <windows.h>
#endif
]]
  cemit [[
#ifdef _WIN32
  unsigned int ms = (us + 999) / 1000;
  if(ms > 0) {
    Sleep(ms);
  }
  ok = true;
#elif _POSIX_VERSION >= 200112L
  if(us > 0) {
    struct timespec ts;
    ts.tv_sec = us / 1000000;
    ts.tv_nsec = (us % 1000000) * 1000;
    int res;
    do {
      errno = 0;
      res = nanosleep(&ts, &ts);
    } while(res != 0 && errno == EINTR);
    ok = res == 0;
  }
#endif
]]
]==]
  return ok
end
