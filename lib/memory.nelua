## strict = true
## modname = 'nelua'
## nohashcodenames = true

## cinclude '<stdlib.h>'
## cinclude '<string.h>'

local function memcpy(dest: pointer, src: pointer, n: csize): pointer <cimport 'memcpy'> end
local function memmove(dest: pointer, src: pointer, n: csize): pointer <cimport 'memmove'> end
local function memset(s: pointer, c: cint, n: csize): pointer <cimport 'memset'> end

local function malloc(size: csize): pointer <cimport 'malloc'> end
local function calloc(nmemb: csize, size: csize): pointer <cimport 'calloc'> end
local function realloc(ptr: pointer, size: csize): pointer <cimport 'realloc'> end
local function free(ptr: pointer): void <cimport 'free'> end

global memory = @record{}

function memory.allocnoinit(size: usize): span(byte)
  assert(size > 0)
  local data = @byte*(malloc(size))
  assert(data)
  return @span(byte) { data, size }
end

function memory.alloc(size: usize): span(byte)
  assert(size > 0)
  local data = @byte*(calloc(1, size))
  assert(data)
  return @span(byte) { data, size }
end

function memory.reallocnoinit(s: span(byte)*, size: usize)
  assert(size > 0)
  s.data = @byte*(realloc(s.data, size))
  assert(s.data)
  s.size = size
end

function memory.realloc(s: span(byte)*, size: usize)
  assert(size > 0)
  s.data = @byte*(realloc(s.data, size))
  assert(s.data)
  if size > s.size then
    memset(&s[s.size], 0, size - s.size)
  end
  s.size = size
end

function memory.dealloc(s: span(byte)*)
  if s.size == 0 then
    return
  end
  free(s.data)
  s.data = nilptr
  s.size = 0
end

function memory.copy(dest: span(byte), src: span(byte))
  assert(dest.size >= src.size)
  memcpy(dest.data, src.data, src.size)
end

function memory.move(dest: span(byte), src: span(byte))
  assert(dest.size >= src.size)
  memcpy(dest.data, src.data, src.size)
end

function memory.set(dest: span(byte), x: byte)
  memset(dest.data, x, dest.size)
end
