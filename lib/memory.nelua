-- Memory utilities

--------------------------------------------------------------------------------
-- C imports
local function memcpy(dest: pointer, src: pointer, n: csize): pointer <cimport,cinclude'<string.h>',nodecl> end
local function memmove(dest: pointer, src: pointer, n: csize): pointer <cimport,cinclude'<string.h>',nodecl> end
local function memset(s: pointer, c: cint, n: csize): pointer <cimport,cinclude'<string.h>',nodecl> end
local function memcmp(s1: pointer, s2: pointer, n: csize): cint <cimport,cinclude'<string.h>',nodecl> end
local function memchr(s: pointer, c: cint, n: csize): pointer <cimport,cinclude'<string.h>',nodecl> end

--------------------------------------------------------------------------------
-- pointer functions

global memory = @record{}

function memory.copy(dest: pointer, src: pointer, size: usize): void <inline>
  check(dest and src, 'invalid pointer')
  memcpy(dest, src, size)
end

function memory.move(dest: pointer, src: pointer, size: usize): void <inline>
  check(dest and src, 'invalid pointer')
  memmove(dest, src, size)
end

function memory.set(dest: pointer, x: byte, size: usize): void <inline>
  check(dest, 'invalid pointer')
  memset(dest, x, size)
end

function memory.zero(dest: pointer, size: usize): void <inline>
  check(dest, 'invalid pointer')
  memset(dest, 0, size)
end

function memory.compare(a: pointer, b: pointer, size: usize): int32 <inline>
  check(a and b, 'invalid pointer')
  return memcmp(a, b, size)
end

function memory.equals(a: pointer, b: pointer, size: usize): boolean <inline>
  check(a and b, 'invalid pointer')
  return memcmp(a, b, size) == 0
end

function memory.scan(p: pointer, x: byte, size: usize): pointer <inline>
  check(p, 'invalid pointer')
  return memchr(p, x, size)
end

function memory.find(haystack: pointer, haystacksize: usize,
                     needle: pointer, needlesize: usize): pointer
  if unlikely(needlesize == 0 or haystack == needle) then return haystack
  elseif unlikely(needlesize > haystacksize) then return nilptr
  else
    check(haystack and needle, 'invalid pointer')
    if needlesize == 1 then
      return memchr(haystack, $(@*byte)(needle), haystacksize)
    end
    local haystackbegin: usize = (@usize)(haystack)
    for i:usize=haystackbegin,haystackbegin+(haystacksize-needlesize) do
      local p: pointer = (@pointer)(i)
      if memcmp(p, needle, needlesize) == 0 then
        return p
      end
    end
    return nilptr
  end
end

--------------------------------------------------------------------------------
-- span functions

require 'span'

local is_span = #[concept(function(x) return x.type.is_span end)]#

##[[
local function check_type_match(a, b)
  static_assert(a.type == b.type,
    "argument '%s' type '%s' differs from argument '%s' type '%s",
    a.name, b.name, a.type, b.type)
end
local function check_span_subtype_match(s, x)
  static_assert(s.type.subtype == x.type,
    "in argument '%s': type '%s' differs from argument '%s' type '%s",
    s.name, x.name, s.type.subtype, x.type)
end
]]

function memory.spancopy(dest: is_span, src: is_span): void <inline>
  local T: type = #[dest.type.subtype]#
  ## check_type_match(dest, src)
  check(dest.size == src.size, 'span sizes must be equal')
  if likely(src.size > 0) then
    memcpy(dest.data, src.data, src.size * #T)
  end
end

function memory.spanmove(dest: is_span, src: is_span): void <inline>
  local T: type = #[dest.type.subtype]#
  ## check_type_match(dest, src)
  check(dest.size == src.size, 'span sizes must be equal')
  if likely(src.size > 0) then
    memmove(dest.data, src.data, src.size * #T)
  end
end

function memory.spanset(dest: is_span, x: auto): void <inline>
  ## check_span_subtype_match(dest, x)
  local T: type = #[x.type]#
  ## if x.type.is_integral and x.bitsize == 8 then
    memset(dest.data, (@byte)(x), dest.size)
  ## else
    for i:usize=0,<dest.size do
      memcpy(&dest[i], &x, #T)
    end
  ## end
end

function memory.spanzero(dest: is_span): void <inline>
  local T: type = #[dest.type.subtype]#
  if likely(dest.size > 0) then
    memset(dest.data, 0, dest.size * #T)
  end
end

function memory.spancompare(a: is_span, b: is_span): int32
  ## check_type_match(a, b)
  local size: usize <noinit>
  if a.size < b.size then
    size = a.size
  else
    size = b.size
  end
  local ret: int32
  if likely(size > 0) then
    ret = memcmp(a.data, b.data, size)
  end
  if ret == 0 and a.size ~= b.size then
    if a.size < b.size then
      ret = -1
    else
      ret = 1
    end
  end
  return ret
end

function memory.spanequals(a: is_span, b: is_span): boolean <inline>
  ## check_type_match(a, b)
  local ret: boolean = a.size == b.size
  if ret and likely(a.size > 0) then
    ret = memcmp(a.data, b.data, a.size) == 0
  end
  return ret
end

function memory.spanfind(s: is_span, x: auto): isize
  ## check_span_subtype_match(s, x)
  local T: type = #[x.type]#
  for i:usize=0,<s.size do
    if memcmp(&s[i], &x, #T) == 0 then
      return (@isize)(i)
    end
  end
  return -1
end

function memory.spancontains(s: is_span, x: auto): boolean
  ## check_span_subtype_match(s, x)
  local T: type = #[x.type]#
  for i:usize=0,<s.size do
    if memcmp(&s[i], &x, #T) == 0 then
      return true
    end
  end
  return false
end
