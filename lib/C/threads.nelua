--[[
Library that imports symbols from the `<threads.h>` header according to C11 specifications.

For a complete documentation about the functions,
see [C11 threads documentation](https://en.cppreference.com/w/c/thread).
]]

require 'C.time'

##[[
if not (ccinfo.is_apple or ccinfo.is_windows) and
       (ccinfo.is_c11 or ccinfo.is_cpp11) and
       not ccinfo.stdc_no_threads then -- C11 threads is supported
  cinclude 'threads.h'
else -- implement C11 threads using POSIX threads
  cemitdecl(function(emitter) emitter:add(c11thread_code) end)
end
cflags '-pthread' -- all implementations we support is using pthread
]]

-- Types

global C.tss_dtor_t: type <cimport,nodecl> = @function(pointer): void
global C.thrd_start_t: type <cimport,nodecl> = @function(pointer): cint

global C.tss_t: type <cimport,cincomplete,nodecl> = @record{}
global C.thrd_t: type <cimport,cincomplete,nodecl> = @record{}
global C.once_flag: type <cimport,cincomplete,nodecl> = @record{}
global C.mtx_t: type <cimport,cincomplete,nodecl> = @record{}
global C.cnd_t: type <cimport,cincomplete,nodecl> = @record{}

-- Threads

function C.thrd_create(thr: *C.thrd_t, func: C.thrd_start_t, arg: pointer): cint <cimport,nodecl> end
function C.thrd_equal(lhs: C.thrd_t, rhs: C.thrd_t): cint <cimport,nodecl> end
function C.thrd_current(): C.thrd_t <cimport,nodecl> end
function C.thrd_sleep(time_point: *C.timespec, remaining: *C.timespec): cint <cimport,nodecl> end
function C.thrd_exit(res: cint) <cimport,nodecl> end
function C.thrd_detach(thr: C.thrd_t): cint <cimport,nodecl> end
function C.thrd_join(thr: C.thrd_t, res: *cint): cint <cimport,nodecl> end
function C.thrd_yield() <cimport,nodecl> end

-- Mutual exclusion

function C.mtx_init(mutex: *C.mtx_t, type: cint): cint <cimport,nodecl> end
function C.mtx_lock(mutex: *C.mtx_t): cint <cimport,nodecl> end
function C.mtx_timedlock(mutex: *C.mtx_t, time_point: *C.timespec): cint <cimport,nodecl> end
function C.mtx_trylock(mutex: *C.mtx_t): cint <cimport,nodecl> end
function C.mtx_unlock(mutex: *C.mtx_t): cint <cimport,nodecl> end
function C.mtx_destroy(mutex: *C.mtx_t): void <cimport,nodecl> end

-- Call once

function C.call_once(flag: *C.once_flag, func: function(): void) <cimport,nodecl> end

-- Condition variables

function C.cnd_init(cond: *C.cnd_t): cint <cimport,nodecl> end
function C.cnd_signal(cond: *C.cnd_t): cint <cimport,nodecl> end
function C.cnd_broadcast(cond: *C.cnd_t): cint <cimport,nodecl> end
function C.cnd_wait(cond: *C.cnd_t, mutex: *C.mtx_t): cint <cimport,nodecl> end
function C.cnd_timedwait(cond: *C.cnd_t, mutex: *C.mtx_t, time_point: *C.timespec): cint <cimport,nodecl> end
function C.cnd_destroy(COND: *C.cnd_t) <cimport,nodecl> end

-- Thread-local storage

function C.tss_create(tss_id: *C.tss_t, destructor: C.tss_dtor_t): cint <cimport,nodecl> end
function C.tss_get(tss_id: C.tss_t): pointer <cimport,nodecl> end
function C.tss_set(tss_id: C.tss_t, val: pointer): cint <cimport,nodecl> end
function C.tss_delete(tss_id: C.tss_t) <cimport,nodecl> end

-- Identifiers for thread states and errors.

global C.thrd_success: cint <const,cimport,nodecl>
global C.thrd_busy: cint <const,cimport,nodecl>
global C.thrd_error: cint <const,cimport,nodecl>
global C.thrd_nomem: cint <const,cimport,nodecl>
global C.thrd_timedout: cint <const,cimport,nodecl>

-- When passed to mtx_init, identifies the type of a mutex to create.

global C.mtx_plain: cint <const,cimport,nodecl>
global C.mtx_recursive: cint <const,cimport,nodecl>
global C.mtx_timed: cint <const,cimport,nodecl>

global C.ONCE_FLAG_INIT: C.once_flag <const,cimport,nodecl>
global C.TSS_DTOR_ITERATIONS: cint <const,cimport,nodecl>

-- Fallback implementation for C11 threads using POSIX threads.
##[[ c11thread_code = [==[
#ifndef _THREADS_H
#define _THREADS_H
#include <time.h>
#include <errno.h>
#include <pthread.h>
#include <sched.h>
#ifdef __APPLE__
  #define C11THREADS_NO_TIMED_MUTEX
#endif
#ifdef C11THREADS_NO_TIMED_MUTEX
  #include <sys/time.h>
  #define PTHREAD_MUTEX_TIMED_NP PTHREAD_MUTEX_NORMAL
#endif
#define ONCE_FLAG_INIT  PTHREAD_ONCE_INIT
#define TSS_DTOR_ITERATIONS 4
typedef pthread_t thrd_t;
typedef pthread_mutex_t mtx_t;
typedef pthread_cond_t cnd_t;
typedef pthread_key_t tss_t;
typedef pthread_once_t once_flag;
typedef int (*thrd_start_t)(void*);
typedef void (*tss_dtor_t)(void*);
enum {
  mtx_plain = 0,
  mtx_recursive = 1,
  mtx_timed = 2,
};
enum {
  thrd_success,
  thrd_timedout,
  thrd_busy,
  thrd_error,
  thrd_nomem
};
static inline int thrd_err_from(int res) {
  switch(res) {
    case 0: return thrd_success;
    case ETIMEDOUT: return thrd_timedout;
    case EDEADLK: case EBUSY: return thrd_busy;
    case ENOMEM: return thrd_nomem;
  }
  return thrd_error;
}
static inline int thrd_create(thrd_t *thr, thrd_start_t func, void *arg) {
  return thrd_err_from(pthread_create(thr, 0, (void*(*)(void*))(void*)func, arg));
}
static inline int thrd_equal(thrd_t a, thrd_t b) {
  return pthread_equal(a, b);
}
static inline thrd_t thrd_current(void) {
  return pthread_self();
}
static inline int thrd_sleep(const struct timespec *ts_in, struct timespec *rem_out) {
  return nanosleep(ts_in, rem_out) >= 0 ? 0 : (errno == EINTR ? -1 : -2);
}
static inline void thrd_exit(int res) {
  pthread_exit((void*)(size_t)res);
}
static inline int thrd_detach(thrd_t thr) {
  return thrd_err_from(pthread_detach(thr));
}
static inline int thrd_join(thrd_t thr, int *res) {
  void *retval;
  if(pthread_join(thr, &retval) != 0) {
    return thrd_error;
  }
  if(res) {
    *res = (int)(size_t)retval;
  }
  return thrd_success;
}
static inline void thrd_yield(void) {
  sched_yield();
}
static inline int mtx_init(mtx_t *mtx, int type) {
  int res;
  pthread_mutexattr_t attr;
  pthread_mutexattr_init(&attr);
  if(type & mtx_timed) {
    pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_TIMED_NP);
  }
  if(type & mtx_recursive) {
    pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);
  }
  res = pthread_mutex_init(mtx, &attr);
  pthread_mutexattr_destroy(&attr);
  return thrd_err_from(res);
}
static inline int mtx_lock(mtx_t *mtx) {
  return thrd_err_from(pthread_mutex_lock(mtx));
}
static inline int mtx_timedlock(mtx_t *mtx, const struct timespec *ts) {
  int res;
#ifdef C11THREADS_NO_TIMED_MUTEX
  struct timeval now;
  struct timespec sleeptime;
  sleeptime.tv_sec = 0;
  sleeptime.tv_nsec = 5000000;
  while((res = pthread_mutex_trylock(mtx)) == EBUSY) {
    gettimeofday(&now, NULL);
    if(now.tv_sec > ts->tv_sec || (now.tv_sec == ts->tv_sec && (now.tv_usec * 1000) >= ts->tv_nsec)) {
      return thrd_timedout;
    }
    nanosleep(&sleeptime, NULL);
  }
#else
  res = pthread_mutex_timedlock(mtx, ts);
#endif
  return thrd_err_from(res);
}
static inline int mtx_trylock(mtx_t *mtx) {
  return thrd_err_from(pthread_mutex_trylock(mtx));
}
static inline int mtx_unlock(mtx_t *mtx) {
  return thrd_err_from(pthread_mutex_unlock(mtx));
}
static inline void mtx_destroy(mtx_t *mtx) {
  pthread_mutex_destroy(mtx);
}
static inline int cnd_init(cnd_t *cond) {
  return thrd_err_from(pthread_cond_init(cond, 0));
}
static inline int cnd_signal(cnd_t *cond) {
  return thrd_err_from(pthread_cond_signal(cond));
}
static inline int cnd_broadcast(cnd_t *cond) {
  return thrd_err_from(pthread_cond_broadcast(cond));
}
static inline int cnd_wait(cnd_t *cond, mtx_t *mtx) {
  return thrd_err_from(pthread_cond_wait(cond, mtx));
}
static inline int cnd_timedwait(cnd_t *cond, mtx_t *mtx, const struct timespec *ts) {
  return thrd_err_from(pthread_cond_timedwait(cond, mtx, ts));
}
static inline void cnd_destroy(cnd_t *cond) {
  pthread_cond_destroy(cond);
}
static inline int tss_create(tss_t *key, tss_dtor_t dtor) {
  return thrd_err_from(pthread_key_create(key, dtor));
}
static inline void *tss_get(tss_t key) {
  return pthread_getspecific(key);
}
static inline int tss_set(tss_t key, void *val){
  return thrd_err_from(pthread_setspecific(key, val));
}
static inline void tss_delete(tss_t key) {
  pthread_key_delete(key);
}
static inline void call_once(once_flag *flag, void (*func)(void)) {
  pthread_once(flag, func);
}
#endif
]==] ]]
