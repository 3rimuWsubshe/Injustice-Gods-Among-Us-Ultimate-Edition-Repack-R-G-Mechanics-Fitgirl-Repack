## strict = true
## cinclude '<stdlib.h>'

-- Memory management
function C.malloc(size: csize): pointer <cimport 'malloc'> end
function C.calloc(nmemb: csize, size: csize): pointer <cimport 'calloc'> end
function C.realloc(ptr: pointer, size: csize): pointer <cimport 'realloc'> end
function C.free(ptr: pointer): void <cimport 'free'> end
function C.aligned_alloc(alignment: csize, size: csize): pointer <cimport 'aligned_alloc'> end

-- Program termination
function C.abort(): void <cimport 'abort'> end
function C.exit(status: cint): void <cimport 'exit'> end
function C.quick_exit(status: cint): void <cimport 'quick_exit'> end
function C._Exit(status: cint): void <cimport '_Exit'> end
function C.atexit(func: pointer): cint <cimport 'atexit'> end
function C.at_quick_exit(func: pointer): cint <cimport 'at_quick_exit'> end

-- Communicating with the environment
function C.system(command: cstring): cint <cimport 'system'> end
function C.getenv(name: cstring): cstring <cimport 'getenv'> end

-- Searching and sorting
function C.bsearch(key: pointer, base: pointer, nmemb: csize, size: csize, compar: pointer): pointer <cimport 'bsearch'> end
function C.qsort(base: pointer, nmemb: csize, size: csize, compar: pointer): void <cimport 'qsort'> end

-- Pseudo-random sequence generation
function C.rand(): cint <cimport 'rand'> end
function C.srand(seed: cuint): void <cimport 'srand'> end

-- Conversions to numeric formats
function C.atof(nptr: cstring): float64 <cimport 'atof'> end
function C.atoi(nptr: cstring): cint <cimport 'atoi'> end
function C.atol(nptr: cstring): clong <cimport 'atol'> end
function C.atoll(nptr: cstring): clonglong <cimport 'atoll'> end

function C.strtof(nptr: cstring, endptr: cstring*): float32 <cimport 'strtof'> end
function C.strtod(nptr: cstring, endptr: cstring*): float64 <cimport 'strtod'> end
function C.strtold(nptr: cstring, endptr: cstring*): clongdouble <cimport 'strtold'> end

function C.strtol(nptr: cstring, endptr: cstring*, base: cint): clong <cimport 'strtol'> end
function C.strtoll(nptr: cstring, endptr: cstring*, base: cint): clonglong <cimport 'strtoll'> end
function C.strtoul(nptr: cstring, endptr: cstring*, base: cint): culong <cimport 'strtoul'> end
function C.strtoull(nptr: cstring, endptr: cstring*, base: cint): culonglong <cimport 'strtoull'> end

-- Integer arithmetics
function C.abs(x: cint): cint <cimport 'abs'> end
function C.labs(x: clong): clong <cimport 'labs'> end
function C.llabs(x: clonglong): clonglong <cimport 'llabs'> end

local div_t <cimport 'div_t'> = @record{quot: cint, rem: cint}
local ldiv_t <cimport 'ldiv_t'> = @record{quot: cint, rem: cint}
local lldiv_t <cimport 'lldiv_t'> = @record{quot: cint, rem: cint}
function C.div(numer: cint, denom: cint): div_t <cimport 'div'> end
function C.ldiv(numer: clong, denom: clong): ldiv_t <cimport 'ldiv'> end
function C.lldiv(numer: clonglong, denom: clonglong): lldiv_t <cimport 'lldiv'> end

-- Constants
global C.EXIT_SUCCESS: cint <const, cimport 'EXIT_SUCCESS'>
global C.EXIT_FAILURE: cint <const, cimport 'EXIT_FAILURE'>

global C.RAND_MAX: cint <const, cimport 'RAND_MAX'>
global C.NULL <compconst, nodecl> = nilptr
