require 'filestream'

--------------------------------------------------------------------------------
-- C imports

local FILEptr = @pointer
local errno: cint <cimport,cinclude'<errno.h>',nodecl>
local stdin: FILEptr <cimport,cinclude'<stdio.h>',nodecl>
local stdout: FILEptr <cimport,cinclude'<stdio.h>',nodecl>
local stderr: FILEptr <cimport,cinclude'<stdio.h>',nodecl>
local function strerror(errnum: cint): cstring <cimport,cinclude'<string.h>',nodecl> end
local function tmpfile(): FILEptr <cimport,cinclude'<stdio.h>',nodecl> end

--------------------------------------------------------------------------------
-- io

global io = @record{}

global io.stderr: filestream = filestream._from_fp(stderr)
global io.stdout: filestream = filestream._from_fp(stdout)
global io.stdin: filestream = filestream._from_fp(stdin)

function io.open(filename: stringview,
                 mode: #[optional_concept(stringview)]#) : (filestream, stringview, integer)
  return filestream.open(filename, mode)
end

function io.flush(file: filestream): boolean
  return file:flush()
end

function io.close(file: #[concept(function(x)
  if x.type.is_filestream then
    -- force taking the file by reference
    return types.PointerType(filestream.value)
  elseif x.type:is_pointer_of(filestream.value) or x.type.is_niltype then
    return true
  end
  return nil, 'value type is not an addressable `filestream` or `niltype`'
end)]#)
  ## if file.type.is_niltype then
    return io.stdout:close()
  ## else
    return file:close()
  ## end
end

function io.input(file: #[overload_concept{stringview,filestream,niltype}]#): filestream
  ## if file.type.is_stringview then
    local fin: filestream, err: stringview = io.open(file, "r")
    if not fin:isopen() then error(err) end
    io.stdin = fin
  ## elseif file.type.is_filestream then
    if not file:isopen() then error('io.input: attempt to use a closed file') end
    io.stdin = file
  ## end
  return io.stdin
end

function io.output(file: #[overload_concept{stringview,filestream,niltype}]#): filestream
  ## if file.type.is_stringview then
    local fout: filestream, err: stringview = io.open(file, "w")
    if not fout:isopen() then error(err) end
    io.stdout = fout
  ## elseif file.type.is_filestream then
    if not file:isopen() then error('io.output: attempt to use a closed file') end
    io.stdout = file
  ## end
  return io.stdout
end

function io.tmpfile(): (filestream, stringview, integer)
  local fp: FILEptr = tmpfile()
  if not fp then
    return filestream{}, strerror(errno), errno
  end
  return filestream._from_fp(fp), '', 0
end

function io.read(fmt: #[overload_concept{integer,stringview,niltype}]#): (string, stringview, integer)
  return io.stdin:read(fmt)
end

function io.write(s: stringview): (boolean, stringview, integer)
  return io.stdout:write(s)
end

function io.type(x: auto)
  ## if x.type.is_filestream then
    if x:isopen() then
      return "file"
    else
      return "closed file"
    end
  ## else
    return nil
  ## end
end

function io.isopen(file: filestream): boolean
  return file:isopen()
end

-- TODO: io.lines
-- TODO: io.popen
