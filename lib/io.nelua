require 'filestream'

--------------------------------------------------------------------------------
-- C imports

local FILE <cimport,nodecl,forwarddecl,cinclude'<stdio.h>'> = @record{}
local errno: cint <cimport,cinclude'<errno.h>',nodecl>
local stdin: *FILE <cimport,cinclude'<stdio.h>',nodecl>
local stdout: *FILE <cimport,cinclude'<stdio.h>',nodecl>
local stderr: *FILE <cimport,cinclude'<stdio.h>',nodecl>
local function strerror(errnum: cint): cstring <cimport,cinclude'<string.h>',nodecl> end
local function tmpfile(): *FILE <cimport,cinclude'<stdio.h>',nodecl> end
local function fclose(fp: *FILE): cint <cimport,cinclude'<stdio.h>',nodecl> end
local function fflush(fp: *FILE): cint <cimport,cinclude'<stdio.h>',nodecl> end

--------------------------------------------------------------------------------
-- io

global io = @record{}

global io.stderr: filestream = filestream._from_fp(stderr, nilptr)
global io.stdout: filestream = filestream._from_fp(stdout, nilptr)
global io.stdin: filestream = filestream._from_fp(stdin, nilptr)

function io.open(filename: stringview,
                 mode: facultative(stringview)) : (filestream, stringview, integer)
  return filestream.open(filename, mode)
end

function io.popen(filename: stringview,
                  mode: facultative(stringview)) : (filestream, stringview, integer)
  ## if mode.type.is_niltype then
  local mode: stringview = "r"
  ## else
  assert(m.size == 1 and (m.data[0] == 'r' or m.data[0] == 'w') and m.data[1] == '\0', 'invalid mode')
  ## end
  ## local ccdefs = require'nelua.ccompiler'.get_cc_defines()
  ## if ccdefs._WIN32 then
    local function popen(command: cstring, type: cstring): *FILE <cimport'_popen',cinclude'<stdio.h>',nodecl> end
    local function pclose(fp: *FILE): cint <cimport'_pclose',cinclude'<stdio.h>',nodecl> end
  ## else
    local function popen(command: cstring, type: cstring): *FILE <cimport,cinclude'<stdio.h>',nodecl> end
    local function pclose(fp: *FILE): cint <cimport,cinclude'<stdio.h>',nodecl> end
    fflush(nilptr) -- flush all open streams
  ## end
  local fp: *FILE = popen(filename, mode)
  if not fp then
    return filestream{}, strerror(errno), errno
  end
  return filestream._from_fp(fp, pclose), '', 0
end

function io.flush(): boolean
  return io.stdout:flush()
end

function io.close(file: #[concept(function(x)
  if x.type.is_filestream then
    -- force taking the file by reference
    return types.PointerType(filestream.value)
  elseif x.type:is_pointer_of(filestream.value) or x.type.is_niltype then
    return true
  end
  return false, string.format("type '%s' is not an addressable `filestream` or `niltype`", x.type)
end)]#)
  ## if file.type.is_niltype then
    return io.stdout:close()
  ## else
    return file:close()
  ## end
end

function io.input(file: overload(stringview,filestream,niltype)): filestream
  ## if file.type.is_stringview then
    local fin: filestream, err: stringview = io.open(file, "r")
    if not fin:isopen() then error(err) end
    io.stdin = fin
  ## elseif file.type.is_filestream then
    assert(file:isopen(), 'attempt to use a closed file')
    io.stdin = file
  ## end
  return io.stdin
end

function io.output(file: overload(stringview,filestream,niltype)): filestream
  ## if file.type.is_stringview then
    local fout: filestream, err: stringview = io.open(file, "w")
    if not fout:isopen() then error(err) end
    io.stdout = fout
  ## elseif file.type.is_filestream then
    assert(file:isopen(), 'attempt to use a closed file')
    io.stdout = file
  ## end
  return io.stdout
end

function io.tmpfile(): (filestream, stringview, integer)
  local fp: *FILE = tmpfile()
  if not fp then
    return filestream{}, strerror(errno), errno
  end
  return filestream._from_fp(fp, fclose), '', 0
end

function io.read(fmt: overload(integer,stringview,niltype)): (string, stringview, integer)
  return io.stdin:read(fmt)
end

function io.write(s: stringview): (boolean, stringview, integer)
  return io.stdout:write(s)
end

function io.writef(s: stringview, arg1: auto): (boolean, stringview, integer)
  return io.stdout:writef(s, arg1)
end

function io.type(x: auto)
  ## if x.type.is_filestream then
    if x:isopen() then
      return "file"
    else
      return "closed file"
    end
  ## else
    return nil
  ## end
end

function io.isopen(file: filestream): boolean
  return file:isopen()
end

function io.lines(filename: facultative(stringview), fmt: overload(integer,stringview,niltype))
  ## if filename.type.is_niltype then
    return io.stdin:lines()
  ## else
    -- TODO: close file using to be closed variables
    local file: filestream = io.open(filename)
    assert(file:isopen(), 'cannot open file')
    return file:lines(fmt)
  ## end
end
