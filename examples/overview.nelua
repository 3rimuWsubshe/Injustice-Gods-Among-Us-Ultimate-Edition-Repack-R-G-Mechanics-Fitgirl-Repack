require 'span'
require 'string'
require 'math'
require 'memory'
require 'iterators'
require 'allocators.gc'
require 'allocators.general'

do -- Comments
  -- one line comment
  --[[
    multi-line comment
  ]]
  --[=[
    multi line comment, `=` can be placed multiple times
    in case if you have `[[` `]]` tokens inside, it will
    always match it's corresponding token
  ]=]
end

do -- Variables
  local b = false -- of deduced type 'boolean', initialized to false
  local s = 'test' -- of deduced type 'string', initialized to 'test'
  local one = 1 --  of type 'integer', initialized to 1
  local pi: number = 3.14 --  of type 'number', initialized to 1
  print(b,s,one,pi) -- outputs: false test 1 3.14
end

do -- Type deduction
  local a -- type will be deduced and scope end
  a = 1
  a = 2
  print(a) -- outputs: 2
  -- end of scope, compiler deduced 'a' to be of type 'integer'
end

do -- Zero initialization
  local b: boolean -- variable of type 'boolean', initialized to 'false'
  local i: integer -- variable of type 'integer', initialized to 0
  print(b, i) --outputs: false 0
end

do -- Auto variables
  local a: auto = 1 -- a is deduced to be of type 'integer'

  -- uncommenting the following will trigger the compile error:
  --   constant value `1.0` is fractional which is invalid for the type 'int64'
  --a = 1.0

  print(a) -- outputs: 1
end

do -- Comptime variables
  local a <comptime> = 1 + 2 -- constant variable evaluated and known at compile time
  print(a) -- outputs: 3
end

do -- Const variables
  local x <const> = 1
  local a <const> = x
  print(a) -- outputs: 1

  -- uncommenting the following will trigger the compile error:
  --   error: cannot assign a constant variable
  --a = 2
end

do -- Multiple assignment
  local a, b = 1, 2
  print(a, b) -- outputs: 1 2
  b, a = a, b
  print(a, b) -- outputs: 2 1
end

do -- Local symbol
  do
    local a = 1
    do
      print(a) -- outputs: 1
    end
  end
  -- this would trigger a compiler error because `a` is not visible:
  -- a = 1
end

--do -- Global symbols
  global global_a = 1
  global function global_f()
    return 'f'
  end
  -- require 'globals'
  print(global_a) -- outputs: 1
  print(global_f()) -- outputs: f
--end

do -- If
  local a = 1 -- change this to 2 or 3 to trigger other ifs
  if a == 1 then
    print 'is one'
  elseif a == 2 then
    print 'is two'
  else
    print('not one or two')
  end
end

do -- Switch
  local a = 1 -- change this to 2 or 3 to trigger other ifs
  switch a
  case 1 then
    print 'is 1'
  case 2 then
    print 'is 2'
  else
    print 'else'
  end
end

do -- Do
  do
    local a = 0
    print(a) -- outputs: 0
  end
  do
    local a = 1 -- can declare variable named a again
    print(a) -- outputs: 1
  end
end

do -- Defer
  do
    defer
      print 'world'
    end
    print 'hello'
  end
  -- outputs 'hello' then 'world'
end

do -- Goto
  local haserr = true
  if haserr then
    goto getout -- get out of the loop
  end
  print 'success'
  ::getout::
  print 'fail'
  -- outputs only 'fail'
end

do -- While
  local a = 1
  while a <= 5 do
    print(a) -- outputs 1 2 3 4 5
    a = a + 1
  end
end

do -- Repeat
  local a = 0
  repeat
    a = a + 1
    print(a) -- outputs 1 2 3 4 5
    local stop = a == 5
  until stop
end

do -- Numeric For
  for i=0,5 do
    -- i is deduced to 'integer'
    print(i) -- outputs 0 1 2 3 4 5
  end
end

do -- Numeric For Exclusive
  for i=0,<5 do
    print(i) -- outputs 0 1 2 3 4
  end
end

do -- Numeric For Stepped
  for i=5,0,-1 do
    print(i) -- outputs 5 4 3 2 1
  end
end

do -- For In
  local a: [4]string = {"a","b","c","d"}
  for i,v in ipairs(a) do
    print(i,v) -- outputs: 0 a, 1 b, 2 c, 3 d
  end
end

do -- Continue
  for i=1,10 do
    if i<=5 then
      continue
    end
    print(i) -- outputs: 6 7 8 9 10
  end
end

do -- Break
  for i=1,10 do
    if i>5 then
      break
    end
    print(i) -- outputs: 1 2 3 4 5
  end
end

do -- Do expression
  local i = 2
  local s = (do
    if i == 1 then
      return 'one'
    elseif i == 2 then
      return 'two'
    else
      return 'other'
    end
  end)
  print(s) -- outputs: two
end

do -- Boolean
  local a: boolean -- variable of type 'boolean' initialized to 'false'
  local b = false
  local c = true
  print(a,b,c) -- outputs: false false true
end

do -- Number
  local dec = 1234 -- variable of type 'integer'
  local bin = 0b1010 -- variable of type 'uint8', set from binary number
  local hex = 0xff -- variable of type 'integer', set from hexadecimal number
  local char = 'A'_u8 -- variable of type 'uint8' set from ASCII character
  local exp = 1.2e-100 -- variable of type 'number' set using scientific notation
  local frac = 1.41 -- variable of type 'number'
  print(dec,bin,hex,char,exp,frac)

  local pi = 0x1.921FB54442D18p+2 -- hexadecimal with fractional and exponent
  print(pi) -- outputs: 3.1415926535898

  do
    local a = 1234_u32 -- variable of type 'int32'
    local b = 1_f32 -- variable of type 'float32'
    print(a,b) --outputs: 1234 1.0
  end
end

do -- String
  local str1: string -- empty string
  local str2 = "string 2" -- variable of type 'string'
  local str3: string = 'string 3' -- also a 'string'
  local str4 = [[
multi
line
string
]]
  print(str1, str2, str3) -- outputs: "" "string 2" "string 3"
  print(str4) -- outputs the multi line string
end

do -- Escape Sequence
  local ctr = "\n\t\r\a\b\v\f" -- escape control characters
  local utf = "\u{03C0}" -- escape UTF-8 code
  local hex = "\x41" -- escape hexadecimal byte
  local dec = "\65" -- escape decimal byte
  local multiline1 = "my\z
                      text1" -- trim spaces and newlines after '\z'
  local multiline2 = "my\
  text2" -- escape new lines after '\' to '\n'
  print(utf, hex, dec, multiline1) -- outputs: Ï€ A A mytext1
  print(multiline2) -- outputs "my" and "text2" on a new line
end

do -- The "type" type
  local MyInt: type = @integer -- a symbol of type 'type' holding the type 'integer'
  local a: MyInt -- variable of type 'MyInt' (actually an 'integer')
  print(a) -- outputs: 0
end

do -- Explicit type conversion
  local i = 1
  local f = (@number)(i) -- convert 'i' to the type 'number'
  print(i, f) -- outputs: 1 1.0

  local MyNumber = @number
  local i = 1
  local f = MyNumber(i) -- convert 'i' to the type 'number'
  print(i, f) -- outputs: 1 1.0
end

do print('Implicit type conversion')
  local i: integer = 1
  local u: uinteger = i
  print(u) -- outputs: 1

  local ni: integer = -1
  local nu: uinteger = (@uinteger)(ni) -- explicit cast works, no checks are done
  print(nu) -- outputs: 18446744073709551615
end

do -- Array
  local a: array(integer, 4) = {1,2,3,4}
  print(a[0], a[1], a[2], a[3]) -- outputs: 1 2 3 4

  local b: [4]integer -- "[4]integer" is syntax sugar for "array(integer, 4)"
  print(b[0], b[1], b[2], b[3]) -- outputs: 0 0 0 0
end

do -- Multidimensional Array
  local m: [2][2]number = {
    {1.0, 2.0},
    {3.0, 4.0}
  }
  print(m[0][0], m[0][1]) -- outputs: 1.0 2.0
  print(m[1][0], m[1][1]) -- outputs: 3.0 4.0
end

do -- Enum
  local Weeks = @enum{
    Sunday = 0,
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Saturday
  }
  print(Weeks.Sunday) -- outputs: 0

  local a: Weeks = Weeks.Monday
  print(a) -- outputs: 1
end

do -- Record
  local Person = @record{
    name: string,
    age: integer
  }

  -- typed initialization
  local a: Person = {name = "Mark", age = 20}
  print(a.name, a.age)

  -- casting initialization
  local b = (@Person){name = "Paul", age = 21}
  print(b.name, b.age)

  -- ordered fields initialization
  local c = (@Person){"Eric", 21}
  print(c.name, c.age)

  -- late initialization
  local d: Person
  d.name = "John"
  d.age  = 22
  print(d.name, d.age)
end

do -- Union
  local IntOrFloat = @union{
    i: int64,
    f: float64,
  }
  local u: IntOrFloat = {i=1}
  print(u.i) -- outputs: 1
  u.f = 1
  print(u.f) -- outputs: 1.0
  print(u.i) -- outputs some garbage integer
end

do -- Span
  local arr = (@[4]integer) {1,2,3,4}
  local s: span(integer) = &arr
  print(s[0], s[1]) -- outputs: 1 2
  print(#s) -- outputs 4
end

do -- Void
  local function f(): void end
end

do -- Operators
  print(2 ^ 2) -- pow, outputs: 4.0
  print(5 // 2) -- integer division, outputs: 2
  print(5 / 2) -- float division, outputs: 2.5
end

do -- Functions
  local function add(a: integer, b: integer)
    return a + b -- return is of deduced type 'integer'
  end
  print(add(1, 2)) -- outputs 3
end

do -- Return type inference
  local function add(a: integer, b: integer): integer
    return a + b -- return is of deduced type 'integer'
  end
  print(add(1, 2)) -- outputs 3
end

do -- Recursive calls
  local function fib(n: integer): integer
    if n < 2 then return n end
    return fib(n - 2) + fib(n - 1)
  end
  print(fib(10)) -- outputs: 55
end

do -- Multiple returns
  local function get_multiple()
    return false, 1
  end

  local a, b = get_multiple()
  -- a is of type 'boolean' with value 'false'
  -- b is of type 'integer' with value '1'
  print(a,b)

  local function get_multiple(): (boolean, integer)
    return false, 1
  end

  local a, b = get_multiple()
  print(a,b) -- outputs: false 1
end

do -- Variable number of arguments
  local function f(...: varargs)
    print(...)
  end
  f(1, true) -- outputs: 1 true

  local function sum(...: varargs)
    local s: integer
    ## for i=1,select('#', ...) do -- iterate over all arguments
      s = s + #[select(i, ...)]# -- select argument at index `i`
    ## end
    return s
  end
  print(sum(1, 2, 3)) -- outputs: 6
end

do -- Anonymous functions
  local function g(x: integer, f: function(x: integer): integer)
    return f(x)
  end

  local y = g(1, function(x: integer): integer
    return 2*x
  end)

  print(y) -- outputs: 2
end

--do -- Top scope closures
  local counter = 1 -- 'a' lives in the heap because it's on the top scope
  local function increment() -- foo is a top scope closure
    -- counter is an upvalue for this function, we can access and modify it
    counter = counter + 1
  end
  print(counter) -- outputs 1
  increment()
  print(counter) -- outputs 2
--end

do -- Polymorphic functions
  local function add(a: auto, b: auto)
    return a + b
  end

  local a = add(1,2)
  -- call to 'add', a function 'add(a: integer, b: integer): integer' is defined
  print(a) -- outputs: 3
  local b = add(1.0, 2.0)
  -- call to 'add' with different types, function 'add(a: number, b: number): number' is defined
  print(b) -- outputs: 3.0
end

do -- Record functions
  local Vec2 = @record{x: number, y: number}

  function Vec2.create(x: integer, y: integer): Vec2
    return (@Vec2){x, y}
  end

  local v = Vec2.create(1,2)
  print(v.x, v.y) -- outputs: 1 2
end

do -- Record methods
  local Rect = @record{x: number, y: number, w: number, h: number}

  function Rect:translate(x: number, y: number)
    self.x = self.x + x
    self.y = self.y + y
  end

  function Rect:area()
    return self.w * self.h
  end

  local v = Rect{0,0,2,3}
  v:translate(2,2)
  print(v.x, v.y) -- outputs 2 2
  print(v:area()) -- outputs 6
end

do -- Record metamethods
  local Vec2 = @record{x: number, y: number}

  -- Called on the binary operator '+'
  function Vec2.__add(a: Vec2, b: Vec2)
    return (@Vec2){a.x+b.x, a.y+b.y}
  end

  -- Called on the unary operator '#'
  function Vec2:__len()
    return math.sqrt(self.x*self.x + self.y*self.y)
  end

  local a: Vec2 = {1, 2}
  local b: Vec2 = {3, 4}
  local c = a + b -- calls the __add metamethod
  print(c.x, c.y) -- outputs: 4 6
  local len = #c -- calls the __len metamethod
  print(len) -- outputs: 7.2
end

do -- Dereferencing and referencing
  local a = 1
  local ap = &a -- ap is a pointer to a
  $ap = 2
  print(a) -- outputs: 2
  a = 3
  print($ap) -- outputs: 3
  print(ap) -- outputs memory address of a
end

do -- Allocating memory
  local Person = @record{name: string, age: integer}
  local p: *Person = default_allocator:new(@Person)
  p.name = "John"
  p.age = 20
  print(p.name, p.age)
  p = nilptr
  -- we don't need to deallocate, the GC will do this on its own when needed!
end

do -- Preprocessor
  local a = 0
  ## for i = 1,4 do
    a = a + 1 -- unroll this line 4 times
  ## end
  print(a) -- outputs 4


  ##[[
  local something = false
  if something then
  ]]
    print('hello') -- prints hello when compiling with "something" defined
  ##[[ end ]]
end

do -- Emitting AST nodes
  local a = #[aster.Number{1}]#
  print(a) -- outputs: 1
end

do -- Expression replacement
  local deg2rad = #[math.pi/180.0]#
  local hello = #['hello' .. 'world']#
  local mybool = #[false]#
  print(deg2rad, hello, mybool) -- outputs: 0.017453 helloworld false
end

do -- Name replacement
  local #|'my' .. 'var'|# = 1
  print(myvar) -- outputs: 1

  local function foo1() print 'foo' end
  #|'foo' .. 1|#() -- outputs: foo
end

do -- Macros
  ## function increment(a, amount)
    -- 'a' in the preprocessor context is a symbol, we access its name here
    -- 'amount' in the preprocessor context is a lua number
    #|a.name|# = #|a.name|# + #[amount]#
  ## end
  local x = 0
  ## increment(x, 4)
  print(x)

  -- unroll
  ##[[
  function unroll(count, block)
    for i=1,count do
      block()
    end
  end
  ]]

  local counter = 1
  ## unroll(4, function()
    print(counter) -- outputs: 1 2 3 4
    counter = counter + 1
  ## end)

  -- generic
  ## function Point(PointT, T)
    local #|PointT|# = @record{x: #|T|#, y: #|T|#}
    function #|PointT|#:squaredlength()
      return self.x*self.x + self.y*self.y
    end
  ## end

  ## Point('PointFloat', 'float64')
  ## Point('PointInt', 'int64')

  local pa: PointFloat = {x=1,y=2}
  print(pa:squaredlength()) -- outputs: 5.0

  local pb: PointInt = {x=1,y=2}
  print(pb:squaredlength()) -- outputs: 5
end

do -- Preprocessor macros emitting AST nodes
  ##[[
  -- Create a fixed array initializing to 1,2,3,4...n
  local function create_sequence(attr_or_type, n)
    local type
    if traits.is_type(attr_or_type) then -- already a type
      type = attr_or_type
    elseif traits.is_attr(attr_or_type) then -- get a type from a symbol
      type = attr_or_type.value
    end
    -- check if the inputs are valid, in case of wrong input
    static_assert(traits.is_type(type), 'expected a type or a symbol to a type')
    static_assert(traits.is_number(n) and n > 0, 'expected n > 0')
    -- create the InitList ASTNode, it's used for any braces {} expression
    local initlist = aster.InitList{pattr = {
      -- hint the compiler what type this braces should be evaluated
      desiredtype = types.ArrayType(type, n)}
    }
    -- fill expressions
    for i=1,n do
      -- convert any Lua value to the proper ASTNode
      initlist[i] = aster.create_value(i)
    end
    return initlist
  end
  ]]

  local a = #[create_sequence(integer, 10)]#
  assert(#a == 10 and a[0] == 1 and a[9] == 10)
end

do -- Processing on the fly
  local Weekends = @enum{ Friday=0, Saturday, Sunday }
  ## for i,field in ipairs(Weekends.value.fields) do
    print(#[field.name .. ' ' .. tostring(field.value)]#)
  ## end

  local Person = @record{name: string}
  ## Person.value:add_field('age', primtypes.integer) -- add field 'age' to 'Person'
  local p: Person = {name='Joe', age=21}
  print(p.age) -- outputs '21'
end

do -- Preprocessing poly functions
  local function pow(x: auto, n: integer)
    ## static_assert(x.type.is_scalar, 'cannot pow variable of type "%s"', x.type)
    ## if x.type.is_integral then
      -- x is an integral type (any unsigned/signed integer)
      local r: #[x.type]# = 1
      for i=1,n do
        r = r * x
      end
      return r
    ## elseif x.type.is_float then
      -- x is a floating point type
      return x ^ n
    ## end
  end

  local a = pow(2, 2) -- use specialized implementation for integers
  local b = pow(2.0, 2) -- use pow implementation for floats
  print(a,b) -- outputs: 4 4.0

  -- uncommenting the following will trigger the compile error:
  --   error: cannot pow variable of type "string"
  --pow('a', 2)
end

do -- Function annotations
  local function sum(a: integer, b: integer) <inline> -- C inline function
    return a + b
  end
  print(sum(1,2)) -- outputs: 3
end

do -- Variable annotations
  local a: integer <noinit>-- don't initialize variable to zero
  a = 0 -- manually initialize to zero
  print(a) -- outputs: 0

  local b <volatile> = 1 -- C volatile variable
  print(b) -- outputs: 1
end

do -- Mixing C code
  -- `cimport` informs the compiler the function name from C that should be imported
  -- `cinclude` informs the compiler which C header its declared
  -- `nodecl` informs the compiler that it doesn't need to declare it (C header already declares)
  local function malloc(size: usize): pointer <cimport'malloc',cinclude'<stdlib.h>',nodecl> end
  local function memset(s: pointer, c: int32, n: usize): pointer <cimport'memset',cinclude'<string.h>',nodecl> end
  local function free(ptr: pointer) <cimport'free',cinclude'<stdlib.h>',nodecl> end

  local a = (@*[10]int64)(malloc(10 * 8))
  memset(a, 0, 10*8)
  assert(a[0] == 0)
  a[0] = 1
  assert(a[0] == 1)
  free(a)
end

