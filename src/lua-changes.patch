diff -u a/linit.c b/linit.c
--- a/linit.c	2020-11-13 12:32:01.000000000 -0300
+++ b/linit.c	2021-03-31 18:59:20.443329639 -0300
@@ -50,6 +50,10 @@
   {LUA_MATHLIBNAME, luaopen_math},
   {LUA_UTF8LIBNAME, luaopen_utf8},
   {LUA_DBLIBNAME, luaopen_debug},
+  {LUA_HASHERLIBNAME, luaopen_hasher},
+  {LUA_LFSLIBNAME, luaopen_lfs},
+  {LUA_SYSLIBNAME, luaopen_sys},
+  {LUA_LPEGLABELLIBNAME, luaopen_lpeglabel},
   {NULL, NULL}
 };
 
diff -u a/lua.c b/lua.c
--- a/lua.c	2020-11-13 12:32:02.000000000 -0300
+++ b/lua.c	2021-03-31 18:59:20.455329809 -0300
@@ -619,10 +619,49 @@
   return 1;
 }
 
+#ifdef LUA_USE_RPMALLOC
+
+#include "../rpmalloc/rpmalloc.h"
+
+static void *L_alloc (void *ud, void *ptr, size_t osize, size_t nsize) {
+  (void)ud;  /* not used */
+  if (nsize == 0) {
+    rpfree(ptr);
+    return NULL;
+  }
+  else
+    return rpaligned_realloc(ptr, 16, nsize, osize, 0);
+}
+
+#else /* LUA_USE_RPMALLOC */
+
+static void *L_alloc (void *ud, void *ptr, size_t osize, size_t nsize) {
+  (void)ud; (void)osize;  /* not used */
+  if (nsize == 0) {
+    free(ptr);
+    return NULL;
+  }
+  else
+    return realloc(ptr, nsize);
+}
+
+#endif /* LUA_USE_RPMALLOC */
+
+static lua_State *newstate (void) {
+  lua_State *L = lua_newstate(L_alloc, NULL);
+  if (L) {
+    lua_atpanic(L, &panic);
+    lua_setwarnf(L, warnfoff, L);  /* default is warnings off */
+  }
+  return L;
+}
 
 int main (int argc, char **argv) {
   int status, result;
-  lua_State *L = luaL_newstate();  /* create state */
+#ifdef LUA_USE_RPMALLOC
+  rpmalloc_initialize();
+#endif
+  lua_State *L = newstate();  /* create state */
   if (L == NULL) {
     l_message(argv[0], "cannot create state: not enough memory");
     return EXIT_FAILURE;
@@ -634,6 +673,9 @@
   result = lua_toboolean(L, -1);  /* get result */
   report(L, status);
   lua_close(L);
+#ifdef LUA_USE_RPMALLOC
+  rpmalloc_finalize();
+#endif
   return (result && status == LUA_OK) ? EXIT_SUCCESS : EXIT_FAILURE;
 }
 
diff -u a/luaconf.h b/luaconf.h
--- a/luaconf.h	2020-11-13 12:32:02.000000000 -0300
+++ b/luaconf.h	2021-03-31 18:59:20.455329809 -0300
@@ -212,7 +212,9 @@
 
 #else			/* }{ */
 
+#ifndef LUA_ROOT
 #define LUA_ROOT	"/usr/local/"
+#endif
 #define LUA_LDIR	LUA_ROOT "share/lua/" LUA_VDIR "/"
 #define LUA_CDIR	LUA_ROOT "lib/lua/" LUA_VDIR "/"
 
diff -u a/lualib.h b/lualib.h
--- a/lualib.h	2020-11-13 12:32:02.000000000 -0300
+++ b/lualib.h	2021-03-31 18:59:20.456329823 -0300
@@ -45,6 +45,19 @@
 LUAMOD_API int (luaopen_package) (lua_State *L);
 
 
+/* additional libs used by nelua */
+#define LUA_HASHERLIBNAME "hasher"
+LUAMOD_API int (luaopen_hasher) (lua_State *L);
+
+#define LUA_LFSLIBNAME "lfs"
+LUAMOD_API int (luaopen_lfs) (lua_State *L);
+
+#define LUA_SYSLIBNAME "sys"
+LUAMOD_API int (luaopen_sys) (lua_State *L);
+
+#define LUA_LPEGLABELLIBNAME "lpeglabel"
+LUAMOD_API int (luaopen_lpeglabel) (lua_State *L);
+
 /* open all previous libraries */
 LUALIB_API void (luaL_openlibs) (lua_State *L);
 
diff -u a/lvm.c b/lvm.c
--- a/lvm.c	2020-11-13 12:32:02.000000000 -0300
+++ b/lvm.c	2021-03-31 18:59:20.457329837 -0300
@@ -1118,7 +1118,9 @@
 #define vmcase(l)	case l:
 #define vmbreak		break
 
-
+#if defined(__GNUC__) && !defined(__clang__)
+__attribute((optimize("no-crossjumping,no-gcse")))
+#endif
 void luaV_execute (lua_State *L, CallInfo *ci) {
   LClosure *cl;
   TValue *k;
